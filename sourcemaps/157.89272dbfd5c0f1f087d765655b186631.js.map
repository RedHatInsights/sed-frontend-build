{"version":3,"file":"js/157.fdd4e32a571ed913ecb5.js","mappings":"uRAEMA,EAAuB,+BAAG,wGACVC,OAAOC,SAASC,OAAOC,KAAKC,WADlB,cACxBC,EADwB,gBAGPC,MAAM,+BAAgC,CAC3DC,QAAS,CAAEC,cAAe,UAAF,OAAYH,MAJR,cAGxBI,EAHwB,gBAOGA,EAASC,OAPZ,cAOxBC,EAPwB,yBASvBA,EAAmBC,MATI,4CAAH,qDAYvBC,EAAiB,+BAAG,oGACDd,IADC,cAClBe,EADkB,yBAEjBA,GAFiB,2CAAH,qD,sBC0CvB,QA3C4B,WAC1B,IAAMC,EACE,WADFA,EAEE,OAFFA,EAIG,QALuB,GDOzBC,EAAAA,EAAAA,UAAS,mBAAmB,kBAAMH,OCAjCI,EAPwB,EAOxBA,UAAWC,EAPa,EAObA,MAAOC,EAPM,EAONA,KAEpBC,EAAU,WACd,OACE,kBAAC,EAAAC,gBAAD,CAAiB,aAAW,kBAC1B,kBAAC,EAAAC,MAAD,KACE,kBAAC,EAAAC,GAAD,CAAIC,UAAU,GACZ,kBAAC,EAAAC,GAAD,KAAKV,GACL,kBAAC,EAAAU,GAAD,KAAKV,GACL,kBAAC,EAAAU,GAAD,KAZM,OAaN,kBAAC,EAAAA,GAAD,KAAKV,KAGT,kBAAC,EAAAW,MAAD,KACGP,EAAKQ,KAAI,SAACC,GAAD,OACR,kBAAC,EAAAL,GAAD,CAAIM,IAAKD,EAAME,KAAMN,UAAU,GAC7B,kBAAC,EAAAO,GAAD,CAAIC,UAAWjB,GAAmBa,EAAME,MACxC,kBAAC,EAAAC,GAAD,CAAIC,UAAWjB,GAAmBa,EAAMK,MACxC,kBAAC,EAAAF,GAAD,CAAIC,UArBA,OAqBsCJ,EAAMM,cAChD,kBAAC,EAAAH,GAAD,CAAIC,UAAWjB,GAAoBa,EAAMO,cAQrD,OAAIlB,IAAcC,EACT,kBAACkB,EAAA,EAAD,MACGnB,GAAcC,EAGjB,kBAACmB,EAAA,EAAD,MAFA,kBAACjB,EAAD,O,eCzBX,QAfqB,kBACnB,kBAAC,EAAAkB,SAAD,KACE,kBAAC,EAAAC,WAAD,KACE,kBAAC,EAAAC,eAAD,CAAgBC,KAAMC,EAAAA,KACtB,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,wEAGA,kBAAC,EAAAC,eAAD,2GCfN,GCsCeC,EAAAA,EAAAA,aA5BQ,WACrB,IACMC,GADcC,EAAAA,EAAAA,kBACKC,aAAa,QAChCC,EAAO,WACX,OACE,kBAAC,aAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,MAAM,oBACvB,kBAAC,EAAAC,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,EAAAA,aAAAA,GAAjB,oBACoBV,EAAKW,SAI7B,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,SAMR,OAAIZ,EAAKa,gBAAgBC,sBAChB,kBAACX,EAAD,MAEA,kBAAC,EAAD","sources":["webpack:///./src/hooks/useActivationKeys.js","webpack:///./src/Components/ActivationKeysTable/ActivationKeysTable.js","webpack:///./src/Components/ActivationKeys/no-access.js","webpack:///./src/Components/ActivationKeys/index.js","webpack:///./src/Components/ActivationKeys/ActivationKeys.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst fetchActivationKeysData = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKeys = async () => {\n  const keysData = await fetchActivationKeysData();\n  return keysData;\n};\n\nconst useActivationKeys = () => {\n  return useQuery('activation_keys', () => getActivationKeys());\n};\n\nexport { useActivationKeys as default };\n","import React from 'react';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from '@patternfly/react-table';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\n\nconst ActivationKeysTable = () => {\n  const columnNames = {\n    name: 'Key Name',\n    role: 'Role',\n    serviceLevel: 'SLA',\n    usage: 'Usage',\n  };\n  const { isLoading, error, data } = useActivationKeys();\n\n  const Results = () => {\n    return (\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th>{columnNames.name}</Th>\n            <Th>{columnNames.role}</Th>\n            <Th>{columnNames.serviceLevel}</Th>\n            <Th>{columnNames.usage}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {data.map((datum) => (\n            <Tr key={datum.name} ouiaSafe={true}>\n              <Td dataLabel={columnNames.name}>{datum.name}</Td>\n              <Td dataLabel={columnNames.role}>{datum.role}</Td>\n              <Td dataLabel={columnNames.serviceLevel}>{datum.serviceLevel}</Td>\n              <Td dataLabel={columnNames.usage}>{datum.usage}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    );\n  };\n\n  if (isLoading && !error) {\n    return <Loading />;\n  } else if (!isLoading && !error) {\n    return <Results />;\n  } else {\n    return <Unavailable />;\n  }\n};\n\nexport default ActivationKeysTable;\n","import {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst NoAccessView = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={LockIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Activation keys can only be accessed by organization administrators.\n      </Title>\n      <EmptyStateBody>\n        If you already know your organization ID and activation key, you can\n        register systems with RHC.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoAccessView;\n","import ActivationKeys from './ActivationKeys';\n\nexport default ActivationKeys;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ActivationKeysTable from '../ActivationKeysTable';\nimport { useQueryClient } from 'react-query';\nimport NoAccessView from './no-access';\n\nconst ActivationKeys = () => {\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <PageHeaderTitle title=\"Activation Keys\" />\n          <TextContent>\n            <Text component={TextVariants.p}>\n              Organization ID: {user.orgId}\n            </Text>\n          </TextContent>\n        </PageHeader>\n        <Main>\n          <ActivationKeysTable />\n        </Main>\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKeys);\n"],"names":["fetchActivationKeysData","window","insights","chrome","auth","getToken","token","fetch","headers","Authorization","response","json","activationKeysData","body","getActivationKeys","keysData","columnNames","useQuery","isLoading","error","data","Results","TableComposable","Thead","Tr","ouiaSafe","Th","Tbody","map","datum","key","name","Td","dataLabel","role","serviceLevel","usage","Loading","Unavailable","Bullseye","EmptyState","EmptyStateIcon","icon","LockIcon","Title","headingLevel","size","EmptyStateBody","withRouter","user","useQueryClient","getQueryData","Page","PageHeader","PageHeaderTitle","title","TextContent","Text","component","TextVariants","orgId","Main","rbacPermissions","canReadActivationKeys"],"sourceRoot":""}