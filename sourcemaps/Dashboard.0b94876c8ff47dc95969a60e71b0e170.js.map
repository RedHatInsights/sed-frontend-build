{"version":3,"file":"js/Dashboard.5dfb889a74ae141c7663.js","mappings":"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","sources":["webpack:///./src/Components/ConfirmChangesModal/index.js","webpack:///./src/Components/Services/permissionsConfig.js","webpack:///./src/Components/Services/Services.js","webpack:///./src/store/connectedSystems.js","webpack:///./src/store/currStateReducer.js","webpack:///./src/store/logReducer.js","webpack:///./src/Routes/Dashboard/index.js","webpack:///./src/api/inventory.js","webpack:///./src/api/index.js","webpack:///./src/store/actionTypes.js","webpack:///./src/store/actions.js","webpack:///./src/utils/helpers.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { configApi } from '../../api';\nimport { Button, Modal, Text, TextContent } from '@patternfly/react-core';\nimport { pluralize, downloadFile } from '../../utils/helpers';\n\nconst ConfirmChangesModal = ({\n  isOpen = false,\n  handleCancel,\n  handleConfirm,\n  systemsCount,\n  data,\n}) => {\n  return (\n    <Modal\n      variant=\"small\"\n      title=\"Confirm changes\"\n      isOpen={isOpen}\n      onClose={handleCancel}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"button\"\n          onClick={handleConfirm}\n        >\n          Confirm changes\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text component=\"p\">\n          Your changes applies to{' '}\n          <b>\n            {systemsCount} connected {pluralize(systemsCount, 'system')}\n          </b>\n          . Selected settings will also be applied to <b>all future systems</b>{' '}\n          that are connected through remote host configuration (rhc).\n        </Text>\n        <Text component=\"p\" className=\"pf-u-mb-sm\">\n          Upon confirmation, an Ansible Playbook will be pushed to{' '}\n          {systemsCount} {pluralize(systemsCount, 'system')} to apply changes.\n        </Text>\n      </TextContent>\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          (async () => {\n            const playbook = await configApi.getPlaybookPreview({\n              compliance_openscap: data.useOpenSCAP ? 'enabled' : 'disabled',\n              insights: data.hasInsights ? 'enabled' : 'disabled',\n              remediations: data.enableCloudConnector ? 'enabled' : 'disabled',\n            });\n            downloadFile(playbook);\n          })();\n        }}\n        style={{ paddingLeft: 0 }}\n      >\n        View playbook\n      </Button>\n    </Modal>\n  );\n};\n\nConfirmChangesModal.propTypes = {\n  isOpen: PropTypes.bool,\n  handleConfirm: PropTypes.func.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  systemsCount: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    useOpenSCAP: PropTypes.bool,\n    enableCloudConnector: PropTypes.bool,\n    hasInsights: PropTypes.bool,\n  }),\n};\n\nexport default ConfirmChangesModal;\n","export const permissions = [\n  {\n    id: 'useOpenSCAP',\n    name: 'Service: Use OpenSCAP for Compliance policies',\n    additionalInfo: 'Requires Insights',\n    description:\n      'This setting installs OpenSCAP for connected systems and ensures that systems are using the most current versions of profiles and policies. OpenSCAP is required for systems to use the compliance service.',\n    links: [\n      {\n        name: 'About Insights for RHEL Compliance',\n        link:\n          'https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/assessing_and_monitoring_security_policy_compliance_of_rhel_systems/index',\n      },\n      {\n        name: 'View configuration playbook',\n        link:\n          'https://github.com/RedHatInsights/config-manager/tree/master/playbooks',\n      },\n    ],\n  },\n  {\n    id: 'enableCloudConnector',\n    name:\n      'Allow Insights users to use “Remediations” to send Ansible Playbooks to fix issues on your systems',\n    description:\n      'Users can create Ansible Playbooks using the “Remediate” function in Insights and then execute these playbooks on systems in inventory. Playbooks are sent to systems to fix issues using the Cloud Connector technology.',\n    links: [\n      {\n        name: 'About Cloud Connector',\n        link:\n          'https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html-single/red_hat_connector_configuration_guide/index',\n      },\n    ],\n  },\n];\n","import React, { useState, useEffect } from 'react';\nimport {\n  Alert,\n  Button,\n  Stack,\n  StackItem,\n  ToggleGroup,\n  ToggleGroupItem,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  FlexItem,\n  Flex,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  BanIcon,\n  ExternalLinkAltIcon,\n} from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from '@patternfly/react-table';\n\nimport { permissions } from './permissionsConfig';\n\nconst Services = ({\n  defaults,\n  setConfirmChangesOpen,\n  onChange,\n  isEditing,\n  setIsEditing,\n}) => {\n  const initState = {\n    enableCloudConnector: {\n      value: defaults.enableCloudConnector,\n      isDisabled: false,\n    },\n    useOpenSCAP: { value: defaults.useOpenSCAP, isDisabled: false },\n  };\n  const [formState, setFormState] = useState(initState);\n  const [madeChanges, setMadeChanges] = useState(false);\n\n  const cancelEditing = () => {\n    setFormState(initState);\n    setIsEditing(false);\n  };\n\n  useEffect(() => {\n    setMadeChanges(\n      formState.useOpenSCAP.value !== defaults.useOpenSCAP ||\n        formState.enableCloudConnector.value != defaults.enableCloudConnector\n    );\n    onChange({\n      useOpenSCAP: formState.useOpenSCAP.value,\n      enableCloudConnector: formState.enableCloudConnector.value,\n    });\n  }, [formState]);\n\n  const getStatusIcon = (row) => {\n    if (formState[row.id].value) {\n      return (\n        <Flex style={{ color: 'var(--pf-global--success-color--200)' }}>\n          <FlexItem spacer={{ default: 'spacerXs' }}>\n            <CheckCircleIcon />\n          </FlexItem>\n          <FlexItem className=\"status\">\n            <b>Enabled</b>\n          </FlexItem>\n        </Flex>\n      );\n    }\n    return (\n      <Flex style={{ color: 'var(--pf-global--default-color--300)' }}>\n        <FlexItem spacer={{ default: 'spacerXs' }}>\n          <BanIcon />\n        </FlexItem>\n        <FlexItem className=\"status\">\n          <b>Disabled</b>\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  return (\n    <Stack hasGutter className=\"pf-u-p-md\">\n      <StackItem>\n        <Toolbar id=\"toolbar-items\">\n          <ToolbarContent>\n            {!isEditing && (\n              <ToolbarItem>\n                <Button\n                  ouiaId=\"secondary-edit-button\"\n                  onClick={() => setIsEditing(true)}\n                  variant=\"secondary\"\n                >\n                  Change settings\n                </Button>\n              </ToolbarItem>\n            )}\n            {isEditing && (\n              <>\n                <ToolbarItem>\n                  <Button\n                    ouiaId=\"primary-save-button\"\n                    onClick={() => setConfirmChangesOpen(true)}\n                    isDisabled={!madeChanges}\n                  >\n                    Save changes\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    ouiaId=\"secondary-cancel-button\"\n                    onClick={() => cancelEditing()}\n                    variant=\"secondary\"\n                  >\n                    Cancel\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Alert\n                    variant=\"info\"\n                    isInline\n                    isPlain\n                    title=\"Changes will affect all systems connected with Red Hat connector\"\n                  />\n                </ToolbarItem>\n              </>\n            )}\n          </ToolbarContent>\n        </Toolbar>\n      </StackItem>\n      <StackItem>\n        <TableComposable aria-label=\"Settings table\">\n          <Thead>\n            <Tr>\n              <Th>Permission</Th>\n              <Th>Status</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {permissions.map((row) => (\n              <Tr key={row.name}>\n                <Td\n                  dataLabel=\"Permission\"\n                  width={80}\n                  style={row.secondary && { paddingLeft: 70, fontSize: 14 }}\n                >\n                  <Stack>\n                    <StackItem>\n                      <Flex>\n                        <FlexItem>\n                          <b>{row.name}</b>\n                        </FlexItem>\n                        {row.additionalInfo && (\n                          <FlexItem\n                            style={{ color: 'var(--pf-global--Color--100)' }}\n                          >\n                            <i>{row.additionalInfo}</i>\n                          </FlexItem>\n                        )}\n                      </Flex>\n                    </StackItem>\n                    <StackItem style={{ fontSize: 14 }}>\n                      {row.description}\n                    </StackItem>\n                    {row.links && (\n                      <StackItem className=\"stack-item\">\n                        <Flex>\n                          {row.links.map((link) => (\n                            <FlexItem key={link.name}>\n                              <a\n                                href={link.link}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                {link.name}\n                                <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                              </a>\n                            </FlexItem>\n                          ))}\n                        </Flex>\n                      </StackItem>\n                    )}\n                  </Stack>\n                </Td>\n                {!isEditing && <Td dataLabel=\"Status\">{getStatusIcon(row)}</Td>}\n                {isEditing && (\n                  <Td dataLabel=\"Status\">\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                      <ToggleGroupItem\n                        text=\"Enabled\"\n                        isSelected={formState[row.id].value}\n                        onChange={() =>\n                          setFormState({\n                            ...formState,\n                            [row.id]: { ...formState[row.id], value: true },\n                          })\n                        }\n                        isDisabled={formState[row.id].isDisabled}\n                      />\n                      <ToggleGroupItem\n                        text=\"Disabled\"\n                        isSelected={!formState[row.id].value}\n                        onChange={() =>\n                          setFormState({\n                            ...formState,\n                            [row.id]: { ...formState[row.id], value: false },\n                          })\n                        }\n                        isDisabled={formState[row.id].isDisabled}\n                      />\n                    </ToggleGroup>\n                  </Td>\n                )}\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      </StackItem>\n    </Stack>\n  );\n};\n\nServices.propTypes = {\n  setMadeChanges: propTypes.func.isRequired,\n  defaults: propTypes.shape({\n    useOpenSCAP: propTypes.bool,\n    hasInsights: propTypes.bool,\n    enableCloudConnector: propTypes.bool,\n  }),\n  onChange: propTypes.func.isRequired,\n  madeChanges: propTypes.bool,\n  setConfirmChangesOpen: propTypes.func.isRequired,\n  isEditing: propTypes.bool.isRequired,\n  setIsEditing: propTypes.func.isRequired,\n};\n\nServices.defaultProps = {\n  defaults: {\n    useOpenSCAP: false,\n    hasInsights: false,\n    enableCloudConnector: false,\n  },\n};\n\nexport default Services;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CONNECTED_HOSTS } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst connectedSystemsPending = (state) => ({\n  ...state,\n  loaded: false,\n});\n\nconst connectedSystemsFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  hosts: payload?.results || [],\n  total: payload?.count || 0,\n  page: payload?.page || 0,\n  perPage: payload?.per_page || 0,\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_CONNECTED_HOSTS}_PENDING`]: connectedSystemsPending,\n    [`${GET_CONNECTED_HOSTS}_FULFILLED`]: connectedSystemsFulfilled,\n    [`${GET_CONNECTED_HOSTS}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CURR_STATE, SET_CURR_STATE } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst currStatePending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst currStateFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  values: {\n    useOpenSCAP: payload?.state?.compliance_openscap === 'enabled',\n    enableCloudConnector: payload?.state?.remediations === 'enabled',\n    hasInsights: payload?.state?.insights === 'enabled',\n  },\n});\n\nexport default applyReducerHash(\n  {\n    [`${SET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${SET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${GET_CURR_STATE}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_LOG } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  results: [],\n};\n\nconst logPending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst logFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  ...(payload || {}),\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_LOG}_PENDING`]: logPending,\n    [`${GET_LOG}_FULFILLED`]: logFulfilled,\n    [`${GET_LOG}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import {\n  Bullseye,\n  Button,\n  Flex,\n  FlexItem,\n  Spinner,\n  Split,\n  SplitItem,\n  Page,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, {\n  lazy,\n  Suspense,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Route, useHistory } from 'react-router-dom';\nimport pckg from '../../../package.json';\nimport ConfirmChangesModal from '../../Components/ConfirmChangesModal';\nimport Services from '../../Components/Services/Services';\nimport { RegistryContext } from '../../store';\nimport {\n  fetchConnectedHosts,\n  fetchCurrState,\n  saveCurrState,\n} from '../../store/actions';\nimport connectedSystemsReducer from '../../store/connectedSystems';\nimport activeStateReducer from '../../store/currStateReducer';\nimport logReducer from '../../store/logReducer';\nimport './dashboard.scss';\n\nconst { routes: paths } = pckg;\n\nconst AboutRemoteHostConfigPopover = lazy(() =>\n  import(\n    /* webpackChunkName: \"ConnectSysAboutRemoteHostConfigPopovertemsModal\" */ '../../Components/AboutRemoteHostConfigPopover/AboutRemoteHostConfigPopover'\n  )\n);\n\nconst ConnectLog = lazy(() =>\n  import(/* webpackChunkName: \"ConnectLog\" */ '../../Components/ConnectLog')\n);\n\nconst SamplePage = () => {\n  const history = useHistory();\n  const { getRegistry } = useContext(RegistryContext);\n  const [confirmChangesOpen, setConfirmChangesOpen] = useState(false);\n  const [madeChanges, setMadeChanges] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const dataRef = useRef();\n  const dispatch = useDispatch();\n\n  const activeStateLoaded = useSelector(\n    ({ activeStateReducer }) => activeStateReducer?.loaded\n  );\n  const { useOpenSCAP, enableCloudConnector, hasInsights } = useSelector(\n    ({ activeStateReducer }) => ({\n      useOpenSCAP: activeStateReducer?.values?.useOpenSCAP,\n      enableCloudConnector: activeStateReducer?.values?.enableCloudConnector,\n      hasInsights: activeStateReducer?.values?.hasInsights,\n    }),\n    shallowEqual\n  );\n  const { systemsCount } = useSelector(\n    ({ connectedSystemsReducer }) => ({\n      systemsLoaded: connectedSystemsReducer?.loaded,\n      systemsCount: connectedSystemsReducer?.total,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    getRegistry().register({\n      activeStateReducer,\n      logReducer,\n      connectedSystemsReducer,\n    });\n    dispatch(fetchCurrState());\n    dispatch(fetchConnectedHosts());\n  }, [getRegistry]);\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('cloud-connector-dashboard');\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Route\n        exact\n        path={paths.logModal}\n        render={() => (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <ConnectLog />\n          </Suspense>\n        )}\n      />\n      <PageHeader className=\"page-header\">\n        <Split hasGutter className=\"page-title\">\n          <SplitItem isFilled>\n            <Flex>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <PageHeaderTitle title=\"Remote Host Configuration Manager\" />\n              </FlexItem>\n              <FlexItem>\n                <AboutRemoteHostConfigPopover />\n              </FlexItem>\n            </Flex>\n          </SplitItem>\n          <SplitItem>\n            <Button onClick={() => history.push(paths.logModal)} variant=\"link\">\n              View log\n            </Button>\n          </SplitItem>\n        </Split>\n        <Stack hasGutter>\n          <StackItem>\n            Selections here affect Red Hat Enterprise Linux (RHEL) systems\n            connected to Red Hat with remote host configuration (rhc). Upon\n            saving changes, Ansible Playbooks are automatically pushed to\n            connected systems to update the configuration of the connection to\n            Red Hat.\n          </StackItem>\n          <StackItem>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={\n                'https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html-single/red_hat_connector_configuration_guide/index'\n              }\n            >\n              Connecting with Red Hat\n              {<ExternalLinkAltIcon className=\"pf-u-ml-sm\" />}\n            </a>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <Page>\n        <div className=\"dashboard__content\">\n          {activeStateLoaded ||\n          (useOpenSCAP !== undefined && enableCloudConnector !== undefined) ? (\n            <Services\n              madeChanges={madeChanges}\n              setConfirmChangesOpen={setConfirmChangesOpen}\n              setMadeChanges={setMadeChanges}\n              setIsEditing={setIsEditing}\n              isEditing={isEditing}\n              defaults={{\n                useOpenSCAP,\n                enableCloudConnector,\n                hasInsights,\n              }}\n              onChange={(data) => {\n                dataRef.current = data;\n              }}\n            />\n          ) : (\n            <Bullseye>\n              <Spinner className=\"pf-u-p-lg\" size=\"xl\" />\n            </Bullseye>\n          )}\n        </div>\n      </Page>\n      <ConfirmChangesModal\n        isOpen={confirmChangesOpen}\n        handleCancel={() => setConfirmChangesOpen(false)}\n        systemsCount={systemsCount}\n        data={dataRef.current}\n        handleConfirm={() => {\n          setConfirmChangesOpen(false);\n          (async () => {\n            const saveAction = saveCurrState(dataRef.current);\n            dispatch(saveAction);\n            await saveAction.payload;\n            dispatch(\n              addNotification({\n                variant: 'success',\n                title: 'Changes saved',\n                description:\n                  'Your service enablement changes were applied to connected systems',\n              })\n            );\n            setMadeChanges(false);\n            setIsEditing(false);\n          })();\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default SamplePage;\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst INVENTORY_BASE = '/api/inventory/v1';\n\nexport const getConnectedHosts = () =>\n  instance.get(\n    `${INVENTORY_BASE}/hosts?filter[system_profile][rhc_client_id]=not_nil&fields[system_profile]=rhc_client_id,rhc_config_state&staleness=fresh&staleness=stale&&registered_with=insights`\n  );\n","export const CONNECTOR_API_BASE = '/api/config-manager/v1';\n\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { DefaultApi } from '@redhat-cloud-services/config-manager-client';\n\nexport * from './inventory';\n\nexport const configApi = new DefaultApi(\n  undefined,\n  CONNECTOR_API_BASE,\n  instance\n);\n\nexport const updateCurrState = ({\n  useOpenSCAP,\n  enableCloudConnector,\n  hasInsights,\n}) => {\n  return configApi.updateStates({\n    compliance_openscap: useOpenSCAP ? 'enabled' : 'disabled',\n    insights:\n      useOpenSCAP || enableCloudConnector || hasInsights\n        ? 'enabled'\n        : 'disabled',\n    remediations: enableCloudConnector ? 'enabled' : 'disabled',\n  });\n};\n","// Current state actions\nexport const GET_CURR_STATE = 'GET_CURR_STATE';\nexport const SET_CURR_STATE = 'SET_CURR_STATE';\n\n// Log view actions\nexport const GET_LOG = 'GET_LOG';\n\n// Connected hosts\nexport const GET_CONNECTED_HOSTS = 'GET_CONNECTED_HOSTS';\n","import { configApi, updateCurrState, getConnectedHosts } from '../api';\nimport {\n  GET_CURR_STATE,\n  GET_LOG,\n  SET_CURR_STATE,\n  GET_CONNECTED_HOSTS,\n} from './actionTypes';\n\nexport const fetchCurrState = () => ({\n  type: GET_CURR_STATE,\n  payload: configApi.getCurrentState(),\n});\n\nexport const saveCurrState = (data) => ({\n  type: SET_CURR_STATE,\n  payload: updateCurrState(data),\n});\n\nexport const fetchLog = ({ perPage = 50, page = 1 } = {}) => ({\n  type: GET_LOG,\n  payload: configApi.getStates(perPage, (page - 1) * perPage),\n});\n\nexport const fetchConnectedHosts = () => ({\n  type: GET_CONNECTED_HOSTS,\n  payload: getConnectedHosts(),\n});\n","export const pluralize = (count, str, fallback) =>\n  count > 1 ? fallback || str + 's' : str;\n\nexport const downloadFile = (\n  data,\n  filename = `${new Date().toISOString()}`\n) => {\n  const type = 'data:text/plain;charset=utf-8,';\n  const blob = new Blob([data], { type });\n  const link = document.createElement('a');\n  link.setAttribute('href', URL.createObjectURL(blob));\n  link.setAttribute('download', `${filename}.yml`);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n"],"names":["ConfirmChangesModal","isOpen","handleCancel","handleConfirm","systemsCount","data","Modal","variant","title","onClose","actions","Button","key","type","onClick","TextContent","Text","component","pluralize","className","configApi","compliance_openscap","useOpenSCAP","insights","hasInsights","remediations","enableCloudConnector","playbook","downloadFile","style","paddingLeft","propTypes","PropTypes","permissions","id","name","additionalInfo","description","links","link","Services","defaults","setConfirmChangesOpen","onChange","isEditing","setIsEditing","initState","value","isDisabled","useState","formState","setFormState","madeChanges","setMadeChanges","useEffect","Stack","hasGutter","StackItem","Toolbar","ToolbarContent","ToolbarItem","ouiaId","Alert","isInline","isPlain","TableComposable","Thead","Tr","Th","Tbody","map","row","Td","dataLabel","width","secondary","fontSize","Flex","FlexItem","color","href","target","rel","spacer","default","getStatusIcon","ToggleGroup","ToggleGroupItem","text","isSelected","defaultProps","applyReducerHash","GET_CONNECTED_HOSTS","state","loaded","payload","hosts","results","total","count","page","perPage","per_page","error","values","currStatePending","currStateFulfilled","SET_CURR_STATE","GET_CURR_STATE","GET_LOG","paths","pckg","AboutRemoteHostConfigPopover","lazy","ConnectLog","history","useHistory","getRegistry","useContext","RegistryContext","confirmChangesOpen","dataRef","useRef","dispatch","useDispatch","activeStateLoaded","useSelector","activeStateReducer","shallowEqual","connectedSystemsReducer","systemsLoaded","register","logReducer","fetchCurrState","fetchConnectedHosts","chrome","appAction","Route","exact","path","logModal","render","Suspense","fallback","Bullseye","Spinner","PageHeader","Split","SplitItem","isFilled","PageHeaderTitle","push","Page","undefined","current","size","saveAction","saveCurrState","addNotification","getConnectedHosts","instance","DefaultApi","updateCurrState","updateStates","fetchLog","str","filename","Date","toISOString","blob","Blob","document","createElement","setAttribute","URL","createObjectURL","visibility","body","appendChild","click","removeChild"],"sourceRoot":""}