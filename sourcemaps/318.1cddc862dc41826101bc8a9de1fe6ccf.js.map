{"version":3,"file":"js/318.1689607366045.7ea486fe19f2604b6e6b.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack:///./src/hooks/useActivationKeys.js","webpack:///./src/Components/ActivationKeysTable/ActivationKeysTable.js","webpack:///./src/Components/ActivationKeys/CreateActivationKeyButton.js","webpack:///./src/Components/EmptyState/NoActivationKeysFound.js","webpack:///./src/Components/EmptyState/index.js","webpack:///./src/hooks/useCreateActivationKey.js","webpack:///./src/Components/Pages/ReviewPage.js","webpack:///./src/Components/Pages/SetNamePage.js","webpack:///./src/hooks/useEusVersions.js","webpack:///./src/Components/Pages/SetWorkLoadPage.js","webpack:///./src/Components/Pages/SetSystemPurposePage.js","webpack:///./src/Components/Pages/SuccessPage.js","webpack:///./src/Components/Modals/CreateActivationKeyWizard.js","webpack:///./src/Components/Modals/CreateActivationKeyModal.js","webpack:///./src/Components/ActivationKeys/ActivationKeys.js","webpack:///./src/Components/ActivationKeys/index.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","import { useQuery } from 'react-query';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst fetchActivationKeysData = (token) => async () => {\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    headers: { Authorization: `Bearer ${await token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKeys = (token) => async () => {\n  const keysData = await fetchActivationKeysData(token)();\n  return keysData;\n};\n\nconst useActivationKeys = () => {\n  const chrome = useChrome();\n\n  return useQuery(\n    'activation_keys',\n    getActivationKeys(chrome?.auth?.getToken())\n  );\n};\n\nexport { useActivationKeys as default };\n","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ActionsColumn,\n} from '@patternfly/react-table';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport { useQueryClient } from 'react-query';\nimport { KebabToggle } from '@patternfly/react-core';\nimport useFeatureFlag from '../../hooks/useFeatureFlag';\n\nconst CustomActionsToggle = (props) => (\n  <KebabToggle\n    onToggle={props.onToggle}\n    isDisabled={props.isDisabled}\n    className={props.isDisabled ? 'pf-m-disabled' : ''}\n  >\n    Actions\n  </KebabToggle>\n);\n\nconst ActivationKeysTable = (props) => {\n  const { actions } = props;\n  const columnNames = {\n    name: 'Key Name',\n    role: 'Role',\n    serviceLevel: 'SLA',\n    usage: 'Usage',\n  };\n  const { isLoading, error, data } = useActivationKeys();\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isActionsDisabled = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n  const { url } = useRouteMatch();\n\n  const keyDetailsIsEnabled = useFeatureFlag(\n    'sed-frontend.activationKeysDetailsPage'\n  );\n  const Results = () => {\n    return (\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th width={40}>{columnNames.name}</Th>\n            <Th>{columnNames.role}</Th>\n            <Th>{columnNames.serviceLevel}</Th>\n            <Th>{columnNames.usage}</Th>\n            <Td></Td>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {data.map((datum) => {\n            let rowActions = actions(datum.name);\n            return (\n              <Tr key={datum.name} ouiaSafe={true}>\n                <Td modifier=\"breakWord\" dataLabel={columnNames.name}>\n                  {keyDetailsIsEnabled ? (\n                    <Link to={`${url}/${datum.name}`}> {datum.name}</Link>\n                  ) : (\n                    datum.name\n                  )}\n                </Td>\n                <Td dataLabel={columnNames.role}>{datum.role}</Td>\n                <Td dataLabel={columnNames.serviceLevel}>\n                  {datum.serviceLevel}\n                </Td>\n                <Td dataLabel={columnNames.usage}>{datum.usage}</Td>\n                <Td isActionCell>\n                  <ActionsColumn\n                    items={rowActions}\n                    isDisabled={isActionsDisabled()}\n                    actionsToggle={CustomActionsToggle}\n                  />\n                </Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </TableComposable>\n    );\n  };\n\n  if (isLoading && !error) {\n    return <Loading />;\n  } else if (!isLoading && !error) {\n    return <Results />;\n  } else {\n    return <Unavailable />;\n  }\n};\n\nActivationKeysTable.propTypes = {\n  actions: propTypes.func,\n};\n\nCustomActionsToggle.propTypes = {\n  onToggle: propTypes.func,\n  isDisabled: propTypes.bool,\n};\n\nexport default ActivationKeysTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { WriteOnlyButton } from '../WriteOnlyButton';\n\nconst CreateActivationKeyButton = ({ onClick }) => {\n  return (\n    <WriteOnlyButton variant=\"primary\" onClick={onClick}>\n      Create activation key\n    </WriteOnlyButton>\n  );\n};\n\nCreateActivationKeyButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default CreateActivationKeyButton;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport CreateActivationKeyButton from '../ActivationKeys/CreateActivationKeyButton';\n\nconst NoActivationKeysFound = (props) => {\n  const { handleModalToggle } = props;\n  return (\n    <>\n      <EmptyState>\n        <EmptyStateIcon icon={AddCircleOIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          No activation keys\n        </Title>\n        <EmptyStateBody>\n          You currently have no activation keys to display. Activation keys\n          allow you to register a system with system purpose, role and usage\n          attached.\n        </EmptyStateBody>\n        <CreateActivationKeyButton onClick={handleModalToggle} />\n      </EmptyState>\n    </>\n  );\n};\n\nNoActivationKeysFound.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n};\n\nexport default NoActivationKeysFound;\n","import NoActivationKeysFound from './NoActivationKeysFound';\n\nexport default NoActivationKeysFound;\n","import { useMutation } from 'react-query';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst activationKeyMutation = (token) => async (data) => {\n  const { name, role, serviceLevel, usage, additionalRepositories } = data;\n\n  const body = {\n    name: name,\n    role: role,\n    serviceLevel: serviceLevel,\n    usage: usage,\n  };\n\n  if (additionalRepositories) {\n    body.additionalRepositories = additionalRepositories.map(\n      (repositoryLabel) => ({ repositoryLabel })\n    );\n  }\n\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${await token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error creating activation key: ${response.statusText}.`\n    );\n  }\n  return response.json();\n};\n\nconst useCreateActivationKey = () => {\n  const chrome = useChrome();\n\n  return useMutation(activationKeyMutation(chrome?.auth?.getToken()));\n};\n\nexport { useCreateActivationKey as default };\n","import React from 'react';\nimport {\n  Title,\n  Text,\n  TextVariants,\n  DescriptionList,\n  DescriptionListTerm,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  TextContent,\n} from '@patternfly/react-core';\nimport Loading from '../LoadingState/Loading';\nimport PropTypes from 'prop-types';\n\nconst ReviewPage = ({\n  name,\n  workload,\n  role,\n  sla,\n  usage,\n  isLoading,\n  extendedReleaseProduct,\n  extendedReleaseVersion,\n}) => {\n  return isLoading ? (\n    <Loading />\n  ) : (\n    <>\n      <Title headingLevel=\"h2\" className=\"pf-u-mb-sm\">\n        Review\n      </Title>\n      <Text component={TextVariants.p} className=\"pf-u-mb-xl\">\n        Review the following information and click <b>Create</b> to create the\n        activation key.\n      </Text>\n      <DescriptionList\n        isHorizontal\n        horizontalTermWidthModifier={{\n          default: '21ch',\n        }}\n      >\n        <DescriptionListGroup>\n          <DescriptionListTerm>Name</DescriptionListTerm>\n          <DescriptionListDescription>{name}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Workload</DescriptionListTerm>\n          <DescriptionListDescription>\n            <TextContent>\n              <Text component=\"p\">{workload}</Text>\n              {workload.includes('Extended') && (\n                <>\n                  <Text component=\"p\">{extendedReleaseProduct}</Text>\n                  <Text component=\"p\">{extendedReleaseVersion}</Text>\n                </>\n              )}\n            </TextContent>\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Role</DescriptionListTerm>\n          <DescriptionListDescription>\n            {role || 'Not defined'}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            Service level agreement (SLA)\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {sla || 'Not defined'}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Usage</DescriptionListTerm>\n          <DescriptionListDescription>\n            {usage || 'Not defined'}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    </>\n  );\n};\n\nReviewPage.propTypes = {\n  name: PropTypes.string.isRequired,\n  workload: PropTypes.string.isRequired,\n  role: PropTypes.string.isRequired,\n  sla: PropTypes.string.isRequired,\n  usage: PropTypes.string.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  extendedReleaseProduct: PropTypes.string.isRequired,\n  extendedReleaseVersion: PropTypes.string.isRequired,\n};\n\nexport default ReviewPage;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Title,\n  Text,\n  TextInput,\n  TextVariants,\n  FormGroup,\n  Form,\n} from '@patternfly/react-core';\n\nconst SetNamePage = ({ name, setName, nameIsValid }) => {\n  const [enableValidationFeedback, setEnableValidationFeedback] =\n    useState(false);\n\n  const helperText =\n    'Your activation key name must be unique and must contain only numbers, letters, underscores, and hyphens.';\n\n  return (\n    <>\n      <Title headingLevel=\"h2\" className=\"pf-u-mb-sm\">\n        Name key\n      </Title>\n      <Text component={TextVariants.p} className=\"pf-u-mb-xl\">\n        This name cannot be modified after the activation key is created.\n      </Text>\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          helperText={helperText}\n          fieldId=\"activation-key-name\"\n          validated={\n            nameIsValid || !enableValidationFeedback ? 'default' : 'error'\n          }\n          helperTextInvalid={`Name requirements have not been met. ${helperText}`}\n        >\n          <TextInput\n            id=\"activation-key-name\"\n            isRequired\n            type=\"text\"\n            value={name}\n            onChange={setName}\n            validated={\n              nameIsValid || !enableValidationFeedback ? 'default' : 'error'\n            }\n            onBlur={() => setEnableValidationFeedback(true)}\n          />\n        </FormGroup>\n      </Form>\n    </>\n  );\n};\n\nSetNamePage.propTypes = {\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired,\n  nameIsValid: PropTypes.bool.isRequired,\n};\n\nexport default SetNamePage;\n","import { useQuery } from 'react-query';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst fetchEusVersions = (token) => async () => {\n  const response = await fetch(\n    '/api/rhsm/v2/products/RHEL/extended-update-support-products',\n    {\n      headers: { Authorization: `Bearer ${await token}` },\n    }\n  );\n\n  if (!response.ok) {\n    return Promise.reject(response.status);\n  }\n\n  const eusVersionsData = await response.json();\n\n  return eusVersionsData.body;\n};\n\nconst useEusVersions = () => {\n  const chrome = useChrome();\n\n  return useQuery({\n    queryKey: 'eus_versions',\n    queryFn: () => fetchEusVersions(chrome?.auth?.getToken())(),\n    retry: (failureCount, error) => {\n      if (failureCount < 3 && error != '400') {\n        return true;\n      }\n      return false;\n    },\n  });\n};\n\nexport { useEusVersions as default };\n","import React, { useEffect } from 'react';\nimport {\n  Title,\n  Text,\n  TextVariants,\n  Radio,\n  Spinner,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useEusVersions from '../../hooks/useEusVersions';\n\nconst SetWorkloadPage = ({\n  workloadOptions,\n  workload,\n  setWorkload,\n  extendedReleaseProduct,\n  setExtendedReleaseProduct,\n  extendedReleaseVersion,\n  setExtendedReleaseVersion,\n  setExtendedReleaseRepositories,\n}) => {\n  const { isLoading, error, data } = useEusVersions();\n\n  useEffect(() => {\n    if (workload.includes('Extended') && data) {\n      setExtendedReleaseProduct(extendedReleaseProduct || data[0].name);\n      setExtendedReleaseVersion(\n        extendedReleaseVersion || data[0].configurations[0].version\n      );\n    } else {\n      setExtendedReleaseProduct('');\n      setExtendedReleaseVersion('');\n    }\n  }, [data, workload]);\n\n  useEffect(() => {\n    if (data && workload.includes('Extended')) {\n      setExtendedReleaseRepositories(\n        data\n          .find((product) => extendedReleaseProduct == product.name)\n          .configurations.find(\n            (configuration) => extendedReleaseVersion == configuration.version\n          ).repositories\n      );\n    } else {\n      setExtendedReleaseRepositories([]);\n    }\n  }, [data, extendedReleaseProduct, extendedReleaseVersion]);\n\n  return (\n    <>\n      <Title headingLevel=\"h2\" className=\"pf-u-mb-sm\">\n        Select Workload\n      </Title>\n      <Text component={TextVariants.p} className=\"pf-u-mb-xl\">\n        Choose a workload option to associate an appropriate selection of\n        repositories to the activation key. Repositories can be edited on the\n        activation key detail page.{' '}\n      </Text>\n      {!isLoading ? (\n        workloadOptions.map((wl) => {\n          return (\n            <Radio\n              label={wl}\n              onChange={() => setWorkload(wl)}\n              isChecked={wl == workload}\n              className=\"pf-u-mb-md\"\n              name={wl}\n              id={wl}\n              isDisabled={wl == 'Extended support' && error == 400}\n              key={wl}\n            />\n          );\n        })\n      ) : (\n        <Spinner />\n      )}\n\n      {workload === 'Extended support' && (\n        <Form>\n          <FormGroup label=\"Product\">\n            <FormSelect\n              onChange={(v) => setExtendedReleaseProduct(v)}\n              value={extendedReleaseProduct}\n              id=\"product\"\n            >\n              {data.map((product, i) => {\n                return (\n                  <FormSelectOption\n                    key={i}\n                    value={product.name}\n                    label={product.name}\n                  />\n                );\n              })}\n            </FormSelect>\n          </FormGroup>\n          <FormGroup label=\"Version\">\n            <FormSelect\n              onChange={(v) => setExtendedReleaseVersion(v)}\n              value={extendedReleaseVersion}\n              id=\"version\"\n            >\n              {data\n                .find((product) => product.name == extendedReleaseProduct)\n                ?.configurations.map((configuration, i) => {\n                  return (\n                    <FormSelectOption\n                      key={i}\n                      value={configuration.version}\n                      label={configuration.version}\n                    />\n                  );\n                })}\n            </FormSelect>\n          </FormGroup>\n        </Form>\n      )}\n    </>\n  );\n};\n\nSetWorkloadPage.propTypes = {\n  workloadOptions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  workload: PropTypes.string.isRequired,\n  setWorkload: PropTypes.func.isRequired,\n  extendedReleaseProduct: PropTypes.string.isRequired,\n  setExtendedReleaseProduct: PropTypes.func.isRequired,\n  extendedReleaseVersion: PropTypes.string.isRequired,\n  setExtendedReleaseVersion: PropTypes.func.isRequired,\n  setExtendedReleaseRepositories: PropTypes.func.isRequired,\n};\n\nexport default SetWorkloadPage;\n","import React from 'react';\nimport {\n  Title,\n  Text,\n  TextVariants,\n  FormGroup,\n  FormSelectOption,\n  FormSelect,\n  Form,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\n\nconst SetSystemPurposePage = ({\n  role,\n  setRole,\n  sla,\n  setSla,\n  usage,\n  setUsage,\n  data,\n  isLoading,\n  isError,\n}) => {\n  const Options = ({ options }) => (\n    <>\n      {options.map((option) => (\n        <FormSelectOption key={option} value={option} label={option} />\n      ))}\n    </>\n  );\n  Options.propTypes = {\n    options: PropTypes.array.isRequired,\n  };\n  const Placeholder = () => (\n    <FormSelectOption label=\"Not defined\" isPlaceholder />\n  );\n  return isLoading ? (\n    <Loading />\n  ) : (\n    !isError && (\n      <>\n        <Title headingLevel=\"h2\" className=\"pf-u-mb-sm\">\n          Select system purpose\n        </Title>\n        <Text component={TextVariants.p} className=\"pf-u-mb-xl\">\n          System purpose values are used by the subscriptions service to help\n          filter and identify hosts. Setting values for these attributes is an\n          optional step, but doing so ensures that subscriptions reporting\n          accurately reflects the system. Only those values available to your\n          account are shown.\n        </Text>\n        <Form>\n          <FormGroup\n            label=\"Role\"\n            className=\"pf-u-mb-sm\"\n            fieldId=\"activation-key-role\"\n          >\n            <FormSelect\n              onChange={setRole}\n              value={role}\n              id=\"activation-key-role\"\n            >\n              <Options options={data.roles} />\n              <Placeholder />\n            </FormSelect>\n          </FormGroup>\n          <FormGroup\n            label=\"Service level agreement (SLA)\"\n            className=\"pf-u-mb-sm\"\n            fieldId=\"activation-key-sla\"\n          >\n            <FormSelect onChange={setSla} value={sla} id=\"activation-key-sla\">\n              <Options options={data.serviceLevel} />\n              <Placeholder />\n            </FormSelect>\n          </FormGroup>\n          <FormGroup\n            label=\"Usage\"\n            className=\"pf-u-mb-sm\"\n            fieldId=\"activation-key-usage\"\n          >\n            <FormSelect\n              onChange={setUsage}\n              value={usage}\n              id=\"activation-key-usage\"\n            >\n              <Options options={data.usage} />\n              <Placeholder />\n            </FormSelect>\n          </FormGroup>\n        </Form>\n      </>\n    )\n  );\n};\n\nSetSystemPurposePage.propTypes = {\n  role: PropTypes.string.isRequired,\n  setRole: PropTypes.func.isRequired,\n  sla: PropTypes.string.isRequired,\n  setSla: PropTypes.func.isRequired,\n  usage: PropTypes.string.isRequired,\n  setUsage: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  isError: PropTypes.bool.isRequired,\n};\n\nexport default SetSystemPurposePage;\n","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst SuccessPage = ({ isLoading, name, onClose }) => {\n  const history = useHistory();\n\n  const content = isLoading ? (\n    <Spinner />\n  ) : (\n    <EmptyState>\n      <EmptyStateIcon color=\"green\" icon={CheckCircleIcon} />\n      <Title headingLevel=\"h4\">Activation key created</Title>\n      <EmptyStateBody>\n        <b>{name}</b> is now available for use. Click <b>View activation key</b>{' '}\n        to edit settings or add repositories.\n      </EmptyStateBody>\n      <Button\n        variant=\"primary\"\n        onClick={() => history.push(`/activation-keys/${name}`)}\n      >\n        View activation key\n      </Button>\n      <EmptyStateSecondaryActions>\n        <Button variant=\"link\" onClick={onClose}>\n          Close\n        </Button>\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  );\n\n  return <Bullseye>{content}</Bullseye>;\n};\n\nSuccessPage.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default SuccessPage;\n","import React, { useState } from 'react';\nimport { Wizard, Modal, ModalVariant, Button } from '@patternfly/react-core';\n\nimport PropTypes from 'prop-types';\nimport useCreateActivationKey from '../../hooks/useCreateActivationKey';\nimport useSystemPurposeAttributes from '../../hooks/useSystemPurposeAttributes';\nimport useNotifications from '../../hooks/useNotifications';\nimport { useQueryClient } from 'react-query';\nimport ReviewPage from '../Pages/ReviewPage';\nimport SetNamePage from '../Pages/SetNamePage';\nimport SetWorkloadPage from '../Pages/SetWorkLoadPage';\nimport SetSystemPurposePage from '../Pages/SetSystemPurposePage';\nimport SuccessPage from '../Pages/SuccessPage';\n\nconst workloadOptions = ['Latest release', 'Extended support'];\nconst confirmCloseTitle = 'Exit activation key creation?';\nconst confirmCloseBody = <p>All inputs will be discarded.</p>;\nconst ConfirmCloseFooter = ({ onClose, returnToWizard }) => (\n  <>\n    <Button variant=\"primary\" onClick={onClose}>\n      Exit\n    </Button>\n    <Button variant=\"link\" onClick={returnToWizard}>\n      Stay\n    </Button>\n  </>\n);\n\nconst nameValidator = /^([\\w-_])+$/;\n\nconst CreateActivationKeyWizard = ({ onClose: parentOnClose, isOpen }) => {\n  const queryClient = useQueryClient();\n  const { mutate, isLoading: createActivationKeyIsLoading } =\n    useCreateActivationKey();\n  const {\n    isLoading: attributesAreLoading,\n    error,\n    data,\n  } = useSystemPurposeAttributes();\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const [name, setName] = useState('');\n  const [workload, setWorkload] = useState(workloadOptions[0]);\n  const [extendedReleaseProduct, setExtendedReleaseProduct] = useState('');\n  const [extendedReleaseVersion, setExtendedReleaseVersion] = useState('');\n  const [extendedReleaseRepositories, setExtendedReleaseRepositories] =\n    useState([]);\n  const [role, setRole] = useState('');\n  const [sla, setSla] = useState('');\n  const [usage, setUsage] = useState('');\n  const [isConfirmClose, setIsConfirmClose] = useState(false);\n  const [shouldConfirmClose, setShouldConfirmClose] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const nameIsValid = nameValidator.test(name);\n\n  const onClose = () => {\n    queryClient.invalidateQueries('activation_keys');\n    parentOnClose();\n  };\n\n  const confirmClose = (onClose) => {\n    if (shouldConfirmClose) {\n      setIsConfirmClose(true);\n    } else {\n      onClose();\n    }\n  };\n\n  const returnToWizard = () => {\n    setIsConfirmClose(false);\n  };\n\n  const steps = [\n    {\n      id: 0,\n      name: 'Name',\n      component: (\n        <SetNamePage name={name} setName={setName} nameIsValid={nameIsValid} />\n      ),\n      enableNext: nameIsValid,\n    },\n    {\n      id: 1,\n      name: 'Workload',\n      component: (\n        <SetWorkloadPage\n          workloadOptions={workloadOptions}\n          workload={workload}\n          setWorkload={setWorkload}\n          extendedReleaseProduct={extendedReleaseProduct}\n          setExtendedReleaseProduct={setExtendedReleaseProduct}\n          extendedReleaseVersion={extendedReleaseVersion}\n          setExtendedReleaseVersion={setExtendedReleaseVersion}\n          setExtendedReleaseRepositories={setExtendedReleaseRepositories}\n        />\n      ),\n      isDisabled: !nameIsValid,\n    },\n    {\n      id: 2,\n      name: 'System purpose',\n      component: (\n        <SetSystemPurposePage\n          role={role}\n          setRole={setRole}\n          data={data}\n          sla={sla}\n          setSla={setSla}\n          usage={usage}\n          setUsage={setUsage}\n          isLoading={attributesAreLoading}\n          isError={error}\n        />\n      ),\n      isDisabled: !nameIsValid,\n    },\n    {\n      id: 3,\n      name: 'Review',\n      component: (\n        <ReviewPage\n          name={name}\n          workload={workload}\n          role={role}\n          sla={sla}\n          usage={usage}\n          isLoading={createActivationKeyIsLoading}\n          extendedReleaseProduct={extendedReleaseProduct}\n          extendedReleaseVersion={extendedReleaseVersion}\n        />\n      ),\n      isDisabled: !nameIsValid,\n      nextButtonText: 'Create',\n    },\n    {\n      id: 4,\n      name: 'Finish',\n      component: (\n        <SuccessPage\n          isLoading={createActivationKeyIsLoading}\n          name={name}\n          onClose={onClose}\n        />\n      ),\n      isFinishedStep: true,\n    },\n  ];\n\n  return (\n    <Modal\n      variant={isConfirmClose ? ModalVariant.small : ModalVariant.large}\n      isOpen={isOpen}\n      showClose={isConfirmClose}\n      title={isConfirmClose ? confirmCloseTitle : undefined}\n      titleIconVariant={isConfirmClose ? 'warning' : undefined}\n      footer={\n        isConfirmClose ? (\n          <ConfirmCloseFooter\n            onClose={onClose}\n            returnToWizard={returnToWizard}\n          />\n        ) : undefined\n      }\n      hasNoBodyWrapper={!isConfirmClose}\n      aria-label=\"Create activation key wizard\"\n      onClose={isConfirmClose ? returnToWizard : undefined}\n    >\n      {!isConfirmClose && (\n        <Wizard\n          title=\"Create activation key\"\n          steps={steps}\n          height={400}\n          navAriaLabel=\"Create activation key steps\"\n          mainAriaLabel=\"Create activation key content\"\n          onCurrentStepChanged={(step) => {\n            setShouldConfirmClose(step.id > 0 && step.id < 4);\n            setCurrentStep(step.id);\n            if (step.id == 4) {\n              mutate(\n                {\n                  name,\n                  role,\n                  serviceLevel: sla,\n                  usage,\n                  additionalRepositories: workload.includes('Extended')\n                    ? extendedReleaseRepositories\n                    : undefined,\n                },\n                {\n                  onSuccess: () => {\n                    addSuccessNotification(`Activation key \"${name}\" created`);\n                  },\n                  onError: () => {\n                    addErrorNotification('Something went wrong', {\n                      description:\n                        'Your changes could not be saved. Please try again.',\n                    });\n                    onClose();\n                  },\n                }\n              );\n            }\n          }}\n          startAtStep={currentStep + 1}\n          onClose={() => confirmClose(onClose)}\n        />\n      )}\n      {isConfirmClose && confirmCloseBody}\n    </Modal>\n  );\n};\n\nConfirmCloseFooter.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnToWizard: PropTypes.func.isRequired,\n};\n\nCreateActivationKeyWizard.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n};\n\nexport default CreateActivationKeyWizard;\n","import * as React from 'react';\nimport { Modal, ModalVariant } from '@patternfly/react-core';\nimport ActivationKeyForm from '../Forms/ActivationKeyForm';\nimport useCreateActivationKey from '../../hooks/useCreateActivationKey';\nimport propTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\nimport useFeatureFlag from '../../hooks/useFeatureFlag';\nimport CreateActivationKeyWizard from './CreateActivationKeyWizard';\n\nconst CreateActivationKeyModal = (props) => {\n  const queryClient = useQueryClient();\n  const [created, setCreated] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const { handleModalToggle, isOpen } = props;\n  const { mutate, isLoading } = useCreateActivationKey();\n  const showNewWizard = useFeatureFlag(\n    'sed-frontend.activationKeysDetailsPage'\n  );\n  const submitForm = (formData) => {\n    const { name, role, serviceLevel, usage } = formData;\n    mutate(\n      { name, role, serviceLevel, usage },\n      {\n        onSuccess: () => {\n          setError(false);\n          setCreated(true);\n          queryClient.invalidateQueries('activation_keys');\n        },\n        onError: () => {\n          setError(true);\n          setCreated(false);\n        },\n      }\n    );\n  };\n  const CreateActivationKeyWizardModal = () => (\n    <CreateActivationKeyWizard onClose={handleModalToggle} isOpen={isOpen} />\n  );\n  const LegacyModel = () => (\n    <Modal\n      variant={ModalVariant.large}\n      title=\"Create new activation key\"\n      description=\"\"\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n    >\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <ActivationKeyForm\n          handleModalToggle={handleModalToggle}\n          submitForm={submitForm}\n          isSuccess={created}\n          isError={error}\n        />\n      )}\n    </Modal>\n  );\n  return showNewWizard ? <CreateActivationKeyWizardModal /> : <LegacyModel />;\n};\n\nCreateActivationKeyModal.propTypes = {\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  activationKeyName: propTypes.string,\n};\n\nexport default CreateActivationKeyModal;\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  ActionGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport ActivationKeysTable from '../ActivationKeysTable';\nimport { useQueryClient } from 'react-query';\nimport NoAccessView from './no-access';\nimport NoActivationKeysFound from '../EmptyState';\nimport CreateActivationKeyModal from '../Modals/CreateActivationKeyModal';\nimport EditActivationKeyModal from '../Modals/EditActivationKeyModal';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport CreateActivationKeyButton from './CreateActivationKeyButton';\nimport DeleteActivationKeyConfirmationModal from '../Modals/DeleteActivationKeyConfirmationModal';\nimport ActivationKeysDocsPopover from '../ActivationKeysDocsPopover';\nconst ActivationKeys = () => {\n  const { updateDocumentTitle } = useChrome();\n  updateDocumentTitle?.('Activation Keys - Remote Host Configuration');\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const { isLoading, error, data } = useActivationKeys();\n  const [isOpen, setisOpen] = useState(false);\n  const [currentKeyName, setCurrentKeyName] = useState('');\n\n  const [isDeleteActivationKeyModalOpen, setIsDeleteActivationKeyModalOpen] =\n    useState(false);\n  const [isEditActivationKeyModalOpen, setIsEditActivationKeyModalOpen] =\n    useState(false);\n  const handleModalToggle = () => {\n    setisOpen(!isOpen);\n  };\n\n  const popoverContent = (\n    <TextContent className=\"pf-u-font-size-sm\">\n      <Text>\n        Activation keys assist you in registering systems. Metadata such as\n        role, system purpose, and usage can be automatically attached to systems\n        via an activation key, and monitored with &nbsp;\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={'https://console.redhat.com/insights/subscriptions/rhel'}\n        >\n          Subscription Watch.\n        </a>\n      </Text>\n      <Text>\n        To register with an activation key, you will need your organization ID:{' '}\n        <b>{user.orgId}</b>\n      </Text>\n    </TextContent>\n  );\n\n  const actions = (activationKeyName) => {\n    return [\n      {\n        title: 'Edit',\n        onClick: () => handleEditActivationKeyModalToggle(activationKeyName),\n      },\n      {\n        title: 'Delete',\n        onClick: () => handleDeleteActivationKeyModalToggle(activationKeyName),\n      },\n    ];\n  };\n\n  const setKeyName = (modalOpen, name) => {\n    let currentName = modalOpen ? '' : name;\n    setCurrentKeyName(currentName);\n  };\n\n  const handleDeleteActivationKeyModalToggle = (name) => {\n    setKeyName(isDeleteActivationKeyModalOpen, name);\n    setIsDeleteActivationKeyModalOpen(!isDeleteActivationKeyModalOpen);\n  };\n\n  const handleEditActivationKeyModalToggle = (name) => {\n    setKeyName(isEditActivationKeyModalOpen, name);\n    setIsEditActivationKeyModalOpen(!isEditActivationKeyModalOpen);\n  };\n\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <Split hasGutter className=\"page-title\">\n            <SplitItem isFilled>\n              <Flex>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                  <PageHeaderTitle title=\"Activation Keys\" />\n                </FlexItem>\n                <FlexItem>\n                  <ActivationKeysDocsPopover\n                    popoverContent={popoverContent}\n                    title=\"Activation Keys\"\n                    position=\"right\"\n                  />\n                </FlexItem>\n              </Flex>\n            </SplitItem>\n          </Split>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              Organization ID: {user.orgId}\n            </Text>\n          </TextContent>\n        </PageHeader>\n        <Main>\n          <PageSection variant={PageSectionVariants.light}>\n            {isLoading && <Loading />}\n            {!isLoading && !error && data.length > 0 && (\n              <>\n                <ActionGroup>\n                  <CreateActivationKeyButton onClick={handleModalToggle} />\n                </ActionGroup>\n                <ActivationKeysTable actions={actions} />\n              </>\n            )}\n            {!isLoading && !error && !data.length && (\n              <NoActivationKeysFound handleModalToggle={handleModalToggle} />\n            )}\n          </PageSection>\n        </Main>\n        <CreateActivationKeyModal\n          isOpen={isOpen}\n          handleModalToggle={handleModalToggle}\n        />\n        <EditActivationKeyModal\n          title=\"Edit activation key\"\n          isOpen={isEditActivationKeyModalOpen}\n          handleModalToggle={handleEditActivationKeyModalToggle}\n          activationKeyName={currentKeyName}\n          modalSize=\"large\"\n        />\n        <DeleteActivationKeyConfirmationModal\n          handleModalToggle={handleDeleteActivationKeyModalToggle}\n          isOpen={isDeleteActivationKeyModalOpen}\n          name={currentKeyName}\n        />\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKeys);\n","import ActivationKeys from './ActivationKeys';\n\nexport default ActivationKeys;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","i","fetchActivationKeysData","token","fetch","Authorization","headers","response","json","activationKeysData","body","useActivationKeys","chrome","useChrome","useQuery","auth","getToken","keysData","CustomActionsToggle","props","KebabToggle","onToggle","isDisabled","className","ActivationKeysTable","actions","columnNames","isLoading","error","data","user","useQueryClient","getQueryData","url","useRouteMatch","keyDetailsIsEnabled","useFeatureFlag","Results","TableComposable","Thead","Tr","ouiaSafe","Th","Td","Tbody","map","datum","rowActions","key","modifier","dataLabel","Link","to","role","serviceLevel","usage","isActionCell","ActionsColumn","items","rbacPermissions","canWriteActivationKeys","actionsToggle","Loading","Unavailable","propTypes","CreateActivationKeyButton","onClick","WriteOnlyButton","W","variant","PropTypes","NoActivationKeysFound","handleModalToggle","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","headingLevel","size","EmptyStateBody","useCreateActivationKey","useMutation","additionalRepositories","repositoryLabel","JSON","stringify","method","ok","Error","status","statusText","ReviewPage","workload","sla","extendedReleaseProduct","extendedReleaseVersion","Text","component","TextVariants","DescriptionList","isHorizontal","horizontalTermWidthModifier","default","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","TextContent","includes","SetNamePage","setName","nameIsValid","useState","enableValidationFeedback","setEnableValidationFeedback","helperText","Form","onSubmit","e","preventDefault","FormGroup","label","isRequired","fieldId","validated","helperTextInvalid","TextInput","id","type","value","onChange","onBlur","SetWorkloadPage","workloadOptions","setWorkload","setExtendedReleaseProduct","setExtendedReleaseVersion","setExtendedReleaseRepositories","queryKey","queryFn","Promise","reject","eusVersionsData","retry","failureCount","useEffect","configurations","version","find","product","configuration","repositories","Spinner","wl","Radio","isChecked","FormSelect","v","FormSelectOption","SetSystemPurposePage","setRole","setSla","setUsage","isError","Options","options","option","Placeholder","isPlaceholder","roles","SuccessPage","onClose","history","useHistory","content","color","CheckCircleIcon","Button","push","EmptyStateSecondaryActions","Bullseye","confirmCloseBody","ConfirmCloseFooter","returnToWizard","nameValidator","CreateActivationKeyWizard","parentOnClose","isOpen","queryClient","mutate","createActivationKeyIsLoading","useSystemPurposeAttributes","attributesAreLoading","useNotifications","addSuccessNotification","addErrorNotification","extendedReleaseRepositories","isConfirmClose","setIsConfirmClose","shouldConfirmClose","setShouldConfirmClose","currentStep","setCurrentStep","test","invalidateQueries","steps","enableNext","nextButtonText","isFinishedStep","Modal","ModalVariant","showClose","title","undefined","titleIconVariant","footer","hasNoBodyWrapper","Wizard","navAriaLabel","mainAriaLabel","onCurrentStepChanged","step","onSuccess","onError","description","startAtStep","CreateActivationKeyModal","React","created","setCreated","setError","showNewWizard","submitForm","formData","CreateActivationKeyWizardModal","LegacyModel","ActivationKeyForm","isSuccess","activationKeyName","withRouter","updateDocumentTitle","setisOpen","currentKeyName","setCurrentKeyName","isDeleteActivationKeyModalOpen","setIsDeleteActivationKeyModalOpen","isEditActivationKeyModalOpen","setIsEditActivationKeyModalOpen","popoverContent","target","rel","href","orgId","handleEditActivationKeyModalToggle","handleDeleteActivationKeyModalToggle","setKeyName","modalOpen","Page","PageHeader","Split","hasGutter","SplitItem","isFilled","Flex","FlexItem","spacer","PageHeaderTitle","ActivationKeysDocsPopover","position","Main","PageSection","PageSectionVariants","length","ActionGroup","EditActivationKeyModal","modalSize","DeleteActivationKeyConfirmationModal","canReadActivationKeys"],"sourceRoot":""}