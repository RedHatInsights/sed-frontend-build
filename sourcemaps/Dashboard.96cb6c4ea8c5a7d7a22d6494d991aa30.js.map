{"version":3,"file":"js/Dashboard.1669289275202.4d8e58746f8b22aa20e0.js","mappings":"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","sources":["webpack:///./src/Components/ConfirmChangesModal/index.js","webpack:///./src/Components/Services/permissionsConfig.js","webpack:///./src/Components/Services/Services.js","webpack:///./src/store/connectedSystems.js","webpack:///./src/store/currStateReducer.js","webpack:///./src/store/logReducer.js","webpack:///./src/Routes/Dashboard/index.js","webpack:///./src/api/inventory.js","webpack:///./src/api/index.js","webpack:///./src/store/actionTypes.js","webpack:///./src/store/actions.js","webpack:///./src/utils/helpers.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { configApi } from '../../api';\nimport { Button, Modal, Text, TextContent } from '@patternfly/react-core';\nimport { pluralize, downloadFile } from '../../utils/helpers';\n\nconst ConfirmChangesModal = ({\n  isOpen = false,\n  handleCancel,\n  handleConfirm,\n  systemsCount,\n  data,\n}) => {\n  return (\n    <Modal\n      variant=\"small\"\n      title=\"Confirm changes\"\n      isOpen={isOpen}\n      onClose={handleCancel}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"button\"\n          onClick={handleConfirm}\n        >\n          Confirm changes\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text component=\"p\">\n          Your changes applies to{' '}\n          <b>\n            {systemsCount} connected {pluralize(systemsCount, 'system')}\n          </b>\n          . Selected settings will also be applied to <b>all future systems</b>{' '}\n          that are connected through remote host configuration (rhc).\n        </Text>\n        <Text component=\"p\" className=\"pf-u-mb-sm\">\n          Upon confirmation, an Ansible Playbook will be pushed to{' '}\n          {systemsCount} {pluralize(systemsCount, 'system')} to apply changes.\n        </Text>\n      </TextContent>\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          (async () => {\n            const playbook = await configApi.getPlaybookPreview({\n              compliance: data.compliance,\n              insights: data.insights,\n              remediations: data.remediations,\n            });\n            downloadFile(playbook);\n          })();\n        }}\n        style={{ paddingLeft: 0 }}\n      >\n        View playbook\n      </Button>\n    </Modal>\n  );\n};\n\nConfirmChangesModal.propTypes = {\n  isOpen: PropTypes.bool,\n  handleConfirm: PropTypes.func.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  systemsCount: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    compliance: PropTypes.bool,\n    remediations: PropTypes.bool,\n    insights: PropTypes.bool,\n  }),\n};\n\nexport default ConfirmChangesModal;\n","export const permissions = [\n  {\n    id: 'remediations',\n    name: 'Allow Insights users to use “Remediations” to send Ansible Playbooks to fix issues on your systems',\n    description:\n      'Users can create Ansible Playbooks using the “Remediate” function in Insights and then execute these playbooks on systems in inventory. Playbooks are sent to systems to fix issues using the Cloud Connector technology.',\n    links: [\n      {\n        name: 'About Cloud Connector',\n        link: 'https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/remote_host_configuration_and_management/index',\n      },\n    ],\n  },\n  {\n    id: 'active',\n    name: 'Allow remote host configuration to manage the configuration of Red Hat services',\n    description:\n      'Based on changes users make in this settings area, the remote host configuration tool can push Ansible Playbooks to connected systems to update their configurations. This includes turning these configurations on and off, based on selections.',\n    links: [\n      {\n        name: 'View configuration manager playbooks',\n        link: 'https://github.com/RedHatInsights/config-manager/tree/master/playbooks',\n      },\n    ],\n  },\n  {\n    id: 'compliance',\n    secondary: true,\n    name: 'Service: Use OpenSCAP for Compliance policies',\n    additionalInfo: 'Requires Insights; Configuration management',\n    description:\n      'This setting installs OpenSCAP for connected systems and ensures that systems are using the most current versions of profiles and policies. OpenSCAP is required for systems to use the compliance service.',\n    links: [\n      {\n        name: 'About Insights for RHEL Compliance',\n        link: 'https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/assessing_and_monitoring_security_policy_compliance_of_rhel_systems/index',\n      },\n      {\n        name: 'View configuration playbook',\n        link: 'https://github.com/RedHatInsights/config-manager/tree/master/playbooks',\n      },\n    ],\n  },\n];\n","import React, { useState, useEffect } from 'react';\nimport {\n  Alert,\n  Button,\n  Stack,\n  StackItem,\n  ToggleGroup,\n  ToggleGroupItem,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  Tooltip,\n  FlexItem,\n  Flex,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  BanIcon,\n  ExternalLinkAltIcon,\n} from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from '@patternfly/react-table';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nimport { permissions } from './permissionsConfig';\n\nconst changeSettingsButton = (isLoading, hasAccess, setIsEditing) => (\n  <Button\n    ouiaId=\"secondary-edit-button\"\n    onClick={() => setIsEditing(true)}\n    variant=\"secondary\"\n    isAriaDisabled={isLoading || !hasAccess}\n  >\n    Change settings\n  </Button>\n);\n\nconst Services = ({\n  defaults,\n  setConfirmChangesOpen,\n  onChange,\n  isEditing,\n  setIsEditing,\n}) => {\n  const initState = {\n    remediations: {\n      value: defaults.remediations,\n      isDisabled: false,\n    },\n    compliance: { value: defaults.compliance, isDisabled: false },\n    active: { value: defaults.active, isDisabled: false },\n  };\n  const [formState, setFormState] = useState(initState);\n  const [madeChanges, setMadeChanges] = useState(false);\n\n  const { hasAccess, isLoading } = usePermissions(\n    '',\n    [\n      'config-manager:activation_keys:*',\n      'config-manager:state:read',\n      'config-manager:state:write',\n      'config-manager:state-changes:read',\n      'inventory:*:read',\n      'playbook-dispatcher:run:read',\n    ],\n    false,\n    true\n  );\n\n  const cancelEditing = () => {\n    setFormState(initState);\n    setIsEditing(false);\n  };\n\n  useEffect(() => {\n    setMadeChanges(\n      formState.compliance.value !== defaults.compliance ||\n        formState.remediations.value !== defaults.remediations ||\n        formState.active.value !== defaults.active\n    );\n    onChange({\n      compliance: formState.compliance.value,\n      remediations: formState.remediations.value,\n      active: formState.active.value,\n    });\n  }, [formState]);\n\n  const getStatusIcon = (row) => {\n    if (formState[row.id].value) {\n      return (\n        <Flex style={{ color: 'var(--pf-global--success-color--200)' }}>\n          <FlexItem spacer={{ default: 'spacerXs' }}>\n            <CheckCircleIcon />\n          </FlexItem>\n          <FlexItem className=\"status\">\n            <b>Enabled</b>\n          </FlexItem>\n        </Flex>\n      );\n    }\n    return (\n      <Flex style={{ color: 'var(--pf-global--default-color--300)' }}>\n        <FlexItem spacer={{ default: 'spacerXs' }}>\n          <BanIcon />\n        </FlexItem>\n        <FlexItem className=\"status\">\n          <b>Disabled</b>\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  return (\n    <Stack hasGutter className=\"pf-u-p-md\">\n      <StackItem>\n        <Toolbar id=\"toolbar-items\">\n          <ToolbarContent>\n            {!isEditing && (\n              <ToolbarItem>\n                {!hasAccess ? (\n                  <Tooltip\n                    content={\n                      <div>\n                        To perform this action, you must be granted the\n                        &quot;System Administrator&quot; role by your\n                        Organization Administrator in your Setting&apos;s User\n                        Access area.\n                      </div>\n                    }\n                  >\n                    {changeSettingsButton(isLoading, hasAccess, setIsEditing)}\n                  </Tooltip>\n                ) : (\n                  changeSettingsButton(isLoading, hasAccess, setIsEditing)\n                )}\n              </ToolbarItem>\n            )}\n            {isEditing && (\n              <>\n                <ToolbarItem>\n                  <Button\n                    ouiaId=\"primary-save-button\"\n                    onClick={() => setConfirmChangesOpen(true)}\n                    isDisabled={!madeChanges}\n                  >\n                    Save changes\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    ouiaId=\"secondary-cancel-button\"\n                    onClick={() => cancelEditing()}\n                    variant=\"secondary\"\n                  >\n                    Cancel\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Alert\n                    variant=\"info\"\n                    isInline\n                    isPlain\n                    title=\"Changes will affect all systems connected with Red Hat connector\"\n                  />\n                </ToolbarItem>\n              </>\n            )}\n          </ToolbarContent>\n        </Toolbar>\n      </StackItem>\n      <StackItem>\n        <TableComposable aria-label=\"Settings table\">\n          <Thead>\n            <Tr>\n              <Th>Permission</Th>\n              <Th>Status</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {permissions.map((row) => (\n              <Tr key={row.name}>\n                <Td\n                  dataLabel=\"Permission\"\n                  width={80}\n                  style={row.secondary && { paddingLeft: 70, fontSize: 14 }}\n                >\n                  <Stack>\n                    <StackItem>\n                      <Flex>\n                        <FlexItem>\n                          <b>{row.name}</b>\n                        </FlexItem>\n                        {row.additionalInfo && (\n                          <FlexItem\n                            style={{ color: 'var(--pf-global--Color--100)' }}\n                          >\n                            <i>{row.additionalInfo}</i>\n                          </FlexItem>\n                        )}\n                      </Flex>\n                    </StackItem>\n                    <StackItem style={{ fontSize: 14 }}>\n                      {row.description}\n                    </StackItem>\n                    {row.links && (\n                      <StackItem className=\"stack-item\">\n                        <Flex>\n                          {row.links.map((link) => (\n                            <FlexItem key={link.name}>\n                              <a\n                                href={link.link}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                {link.name}\n                                <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                              </a>\n                            </FlexItem>\n                          ))}\n                        </Flex>\n                      </StackItem>\n                    )}\n                  </Stack>\n                </Td>\n                {!isEditing && <Td dataLabel=\"Status\">{getStatusIcon(row)}</Td>}\n                {isEditing && (\n                  <Td dataLabel=\"Status\">\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                      <ToggleGroupItem\n                        text=\"Enabled\"\n                        isSelected={formState[row.id].value}\n                        onChange={() =>\n                          setFormState({\n                            ...formState,\n                            [row.id]: { ...formState[row.id], value: true },\n                          })\n                        }\n                        isDisabled={formState[row.id].isDisabled}\n                      />\n                      <ToggleGroupItem\n                        text=\"Disabled\"\n                        isSelected={!formState[row.id].value}\n                        onChange={() =>\n                          setFormState({\n                            ...formState,\n                            [row.id]: { ...formState[row.id], value: false },\n                          })\n                        }\n                        isDisabled={formState[row.id].isDisabled}\n                      />\n                    </ToggleGroup>\n                  </Td>\n                )}\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      </StackItem>\n    </Stack>\n  );\n};\n\nServices.propTypes = {\n  setMadeChanges: propTypes.func.isRequired,\n  defaults: propTypes.shape({\n    compliance: propTypes.bool,\n    active: propTypes.bool,\n    remediations: propTypes.bool,\n  }),\n  onChange: propTypes.func.isRequired,\n  madeChanges: propTypes.bool,\n  setConfirmChangesOpen: propTypes.func.isRequired,\n  isEditing: propTypes.bool.isRequired,\n  setIsEditing: propTypes.func.isRequired,\n};\n\nServices.defaultProps = {\n  defaults: {\n    compliance: false,\n    active: false,\n    remediations: false,\n  },\n};\n\nexport default Services;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CONNECTED_HOSTS } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst connectedSystemsPending = (state) => ({\n  ...state,\n  loaded: false,\n});\n\nconst connectedSystemsFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  hosts: payload?.results || [],\n  total: payload?.count || 0,\n  page: payload?.page || 0,\n  perPage: payload?.per_page || 0,\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_CONNECTED_HOSTS}_PENDING`]: connectedSystemsPending,\n    [`${GET_CONNECTED_HOSTS}_FULFILLED`]: connectedSystemsFulfilled,\n    [`${GET_CONNECTED_HOSTS}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CURR_STATE, SET_CURR_STATE } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst currStatePending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst currStateFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  values: {\n    compliance: payload?.compliance,\n    remediations: payload?.remediations,\n    insights: payload?.insights,\n    active: payload?.active,\n  },\n});\n\nexport default applyReducerHash(\n  {\n    [`${SET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${SET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${GET_CURR_STATE}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_LOG } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  results: [],\n};\n\nconst logPending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst logFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  ...(payload || {}),\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_LOG}_PENDING`]: logPending,\n    [`${GET_LOG}_FULFILLED`]: logFulfilled,\n    [`${GET_LOG}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import {\n  Bullseye,\n  Button,\n  Flex,\n  FlexItem,\n  Spinner,\n  Split,\n  SplitItem,\n  Page,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, {\n  lazy,\n  Suspense,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Route, useHistory } from 'react-router-dom';\nimport pckg from '../../../package.json';\nimport ConfirmChangesModal from '../../Components/ConfirmChangesModal';\nimport Services from '../../Components/Services/Services';\nimport { RegistryContext } from '../../store';\nimport {\n  fetchConnectedHosts,\n  fetchCurrState,\n  saveCurrState,\n} from '../../store/actions';\nimport connectedSystemsReducer from '../../store/connectedSystems';\nimport activeStateReducer from '../../store/currStateReducer';\nimport logReducer from '../../store/logReducer';\nimport './dashboard.scss';\n\nconst { routes: paths } = pckg;\n\nconst AboutRemoteHostConfigPopover = lazy(() =>\n  import(\n    /* webpackChunkName: \"ConnectSysAboutRemoteHostConfigPopovertemsModal\" */ '../../Components/AboutRemoteHostConfigPopover/AboutRemoteHostConfigPopover'\n  )\n);\n\nconst ConnectLog = lazy(() =>\n  import(/* webpackChunkName: \"ConnectLog\" */ '../../Components/ConnectLog')\n);\n\nconst SamplePage = () => {\n  const history = useHistory();\n  const { getRegistry } = useContext(RegistryContext);\n  const [confirmChangesOpen, setConfirmChangesOpen] = useState(false);\n  const [madeChanges, setMadeChanges] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const dataRef = useRef();\n  const dispatch = useDispatch();\n\n  const activeStateLoaded = useSelector(\n    ({ activeStateReducer }) => activeStateReducer?.loaded\n  );\n  const { compliance, remediations, active } = useSelector(\n    ({ activeStateReducer }) => ({\n      compliance: activeStateReducer?.values?.compliance,\n      remediations: activeStateReducer?.values?.remediations,\n      active: activeStateReducer?.values?.active,\n    }),\n    shallowEqual\n  );\n  const { systemsCount } = useSelector(\n    ({ connectedSystemsReducer }) => ({\n      systemsLoaded: connectedSystemsReducer?.loaded,\n      systemsCount: connectedSystemsReducer?.total,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    getRegistry().register({\n      activeStateReducer,\n      logReducer,\n      connectedSystemsReducer,\n    });\n    dispatch(fetchCurrState());\n    dispatch(fetchConnectedHosts());\n  }, [getRegistry]);\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('cloud-connector-dashboard');\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Route\n        exact\n        path={paths.logModal}\n        render={() => (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <ConnectLog />\n          </Suspense>\n        )}\n      />\n      <PageHeader className=\"page-header\">\n        <Split hasGutter className=\"page-title\">\n          <SplitItem isFilled>\n            <Flex>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <PageHeaderTitle title=\"Remote Host Configuration Manager\" />\n              </FlexItem>\n              <FlexItem>\n                <AboutRemoteHostConfigPopover />\n              </FlexItem>\n            </Flex>\n          </SplitItem>\n          <SplitItem>\n            <Button onClick={() => history.push(paths.logModal)} variant=\"link\">\n              View log\n            </Button>\n          </SplitItem>\n        </Split>\n        <Stack hasGutter>\n          <StackItem>\n            Selections here affect Red Hat Enterprise Linux (RHEL) systems\n            connected to Red Hat with remote host configuration (rhc). Upon\n            saving changes, Ansible Playbooks are automatically pushed to\n            connected systems to update the configuration of the connection to\n            Red Hat.\n          </StackItem>\n          <StackItem>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={\n                'https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/remote_host_configuration_and_management/index'\n              }\n            >\n              Connecting with Red Hat\n              {<ExternalLinkAltIcon className=\"pf-u-ml-sm\" />}\n            </a>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <Page>\n        <div className=\"dashboard__content\">\n          {activeStateLoaded ||\n          (compliance !== undefined && remediations !== undefined) ? (\n            <Services\n              madeChanges={madeChanges}\n              setConfirmChangesOpen={setConfirmChangesOpen}\n              setMadeChanges={setMadeChanges}\n              setIsEditing={setIsEditing}\n              isEditing={isEditing}\n              defaults={{\n                compliance,\n                remediations,\n                active,\n              }}\n              onChange={(data) => {\n                dataRef.current = data;\n              }}\n            />\n          ) : (\n            <Bullseye>\n              <Spinner className=\"pf-u-p-lg\" size=\"xl\" />\n            </Bullseye>\n          )}\n        </div>\n      </Page>\n      <ConfirmChangesModal\n        isOpen={confirmChangesOpen}\n        handleCancel={() => setConfirmChangesOpen(false)}\n        systemsCount={systemsCount}\n        data={dataRef.current}\n        handleConfirm={() => {\n          setConfirmChangesOpen(false);\n          (async () => {\n            const saveAction = saveCurrState(dataRef.current);\n            dispatch(saveAction);\n            await saveAction.payload;\n            dispatch(\n              addNotification({\n                variant: 'success',\n                title: 'Changes saved',\n                description:\n                  'Your service enablement changes were applied to connected systems',\n              })\n            );\n            setMadeChanges(false);\n            setIsEditing(false);\n          })();\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default SamplePage;\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst INVENTORY_BASE = '/api/inventory/v1';\n\nexport const getConnectedHosts = () =>\n  instance.get(\n    `${INVENTORY_BASE}/hosts?filter[system_profile][rhc_client_id]=not_nil&fields[system_profile]=rhc_client_id,rhc_config_state&staleness=fresh&staleness=stale&&registered_with=insights`\n  );\n","export const CONNECTOR_API_BASE = '/api/config-manager/v2';\n\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { DefaultApi } from '@redhat-cloud-services/config-manager-client';\n\nexport * from './inventory';\n\nexport const configApi = new DefaultApi(\n  undefined,\n  CONNECTOR_API_BASE,\n  instance\n);\n\nexport const updateCurrState = ({ compliance, remediations, active }) => {\n  return configApi.createProfile({\n    compliance,\n    insights: true,\n    remediations,\n    active,\n  });\n};\n","// Current state actions\nexport const GET_CURR_STATE = 'GET_CURR_STATE';\nexport const SET_CURR_STATE = 'SET_CURR_STATE';\n\n// Log view actions\nexport const GET_LOG = 'GET_LOG';\n\n// Connected hosts\nexport const GET_CONNECTED_HOSTS = 'GET_CONNECTED_HOSTS';\n","import { configApi, updateCurrState, getConnectedHosts } from '../api';\nimport {\n  GET_CURR_STATE,\n  GET_LOG,\n  SET_CURR_STATE,\n  GET_CONNECTED_HOSTS,\n} from './actionTypes';\n\nexport const fetchCurrState = () => ({\n  type: GET_CURR_STATE,\n  payload: configApi.getProfile('current'),\n});\n\nexport const saveCurrState = (data) => ({\n  type: SET_CURR_STATE,\n  payload: updateCurrState(data),\n});\n\nexport const fetchLog = ({ perPage = 50, page = 1 } = {}) => ({\n  type: GET_LOG,\n  payload: configApi.getProfiles(perPage, (page - 1) * perPage),\n});\n\nexport const fetchConnectedHosts = () => ({\n  type: GET_CONNECTED_HOSTS,\n  payload: getConnectedHosts(),\n});\n","export const pluralize = (count, str, fallback) =>\n  count > 1 ? fallback || str + 's' : str;\n\nexport const downloadFile = (\n  data,\n  filename = `${new Date().toISOString()}`\n) => {\n  const type = 'data:text/plain;charset=utf-8,';\n  const blob = new Blob([data], { type });\n  const link = document.createElement('a');\n  link.setAttribute('href', URL.createObjectURL(blob));\n  link.setAttribute('download', `${filename}.yml`);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n"],"names":["i","ConfirmChangesModal","isOpen","handleCancel","handleConfirm","systemsCount","data","Modal","variant","title","onClose","actions","Button","key","type","onClick","TextContent","Text","component","pluralize","className","configApi","compliance","insights","remediations","playbook","downloadFile","style","paddingLeft","propTypes","PropTypes","permissions","id","name","description","links","link","secondary","additionalInfo","changeSettingsButton","isLoading","hasAccess","setIsEditing","ouiaId","isAriaDisabled","Services","defaults","setConfirmChangesOpen","onChange","isEditing","initState","value","isDisabled","active","useState","formState","setFormState","madeChanges","setMadeChanges","usePermissions","useEffect","Stack","hasGutter","StackItem","Toolbar","ToolbarContent","ToolbarItem","Tooltip","content","Alert","isInline","isPlain","TableComposable","Thead","Tr","Th","Tbody","map","row","Td","dataLabel","width","fontSize","Flex","FlexItem","color","href","target","rel","spacer","default","getStatusIcon","ToggleGroup","ToggleGroupItem","text","isSelected","defaultProps","applyReducerHash","GET_CONNECTED_HOSTS","state","loaded","payload","hosts","results","total","count","page","perPage","per_page","error","values","currStatePending","currStateFulfilled","SET_CURR_STATE","GET_CURR_STATE","GET_LOG","paths","pckg","AboutRemoteHostConfigPopover","lazy","ConnectLog","history","useHistory","getRegistry","useContext","RegistryContext","confirmChangesOpen","dataRef","useRef","dispatch","useDispatch","activeStateLoaded","useSelector","activeStateReducer","shallowEqual","connectedSystemsReducer","systemsLoaded","register","logReducer","fetchCurrState","fetchConnectedHosts","chrome","appAction","Route","exact","path","logModal","render","Suspense","fallback","Bullseye","Spinner","PageHeader","Split","SplitItem","isFilled","PageHeaderTitle","push","Page","undefined","current","size","saveAction","saveCurrState","addNotification","getConnectedHosts","instance","DefaultApi","updateCurrState","createProfile","fetchLog","str","filename","Date","toISOString","blob","Blob","document","createElement","setAttribute","URL","createObjectURL","visibility","body","appendChild","click","removeChild"],"sourceRoot":""}