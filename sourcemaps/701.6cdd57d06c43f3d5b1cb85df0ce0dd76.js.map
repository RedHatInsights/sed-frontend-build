{"version":3,"file":"js/701.90c0528579f9a6e8cfbd.js","mappings":"4PAEMA,EAAsB,+BAAG,uGACtBC,QAAQC,QACbC,OAAOC,SAASC,OAAOC,mBAAmB,mBAC1CC,MAAK,SAACC,GACN,IAAMC,EAAcD,EAAmBE,KACrC,SAACC,GAAD,OAAmBA,EAAcC,cAWnC,MATwB,CACtBC,sBACEJ,EAAYK,SAAS,wCACrBL,EAAYK,SAAS,oCACvBC,uBACEN,EAAYK,SAAS,yCACrBL,EAAYK,SAAS,yCAbE,2CAAH,qDCFtBE,EAAmB,WACvB,IACE,OAAOb,OAAOC,SAASC,OAAOY,KAAKC,UACnC,MAAOC,GACP,MAAM,IAAIC,MAAJ,qCAAwCD,EAAEE,Y,sBC2BpD,QAzBuB,SAAC,GAAiB,QAAfC,EAAe,EAAfA,SAClBC,GAAcC,EAAAA,EAAAA,kBACdC,GAAWC,EAAAA,EAAAA,eAFsB,GCYhCC,EAAAA,EAAAA,UAAS,QAAQ,kBAbjB1B,QAAQ2B,IAAI,CAACZ,IAAoBhB,MAA2BO,MACjE,YAAmC,mBAAjCsB,EAAiC,KAArBC,EAAqB,KAMjC,MALa,CACXC,cAAeF,EAAWG,SAASC,eACnCC,MAAOL,MAAAA,GAAF,UAAEA,EAAYG,gBAAd,iBAAE,EAAsBG,gBAAxB,aAAE,EAAgCC,OACvCN,gBAAiBA,SDAfO,EAJ+B,EAI/BA,UAAWC,EAJoB,EAIpBA,WAAYC,EAJQ,EAIRA,UAAWC,EAJH,EAIGA,QAY1C,OAVAC,EAAAA,EAAAA,YAAU,WAKRlB,EAAYmB,kBAAkB,UAC7B,CAACjB,EAASkB,WAEbJ,IAAS,UAAIpC,OAAOC,gBAAX,iBAAI,EAAiBC,cAArB,OAAI,EAAyBuC,qBAEtB,IAAZJ,EACK,kBAACK,EAAA,EAAD,OACgB,IAAdR,IAAqC,IAAfC,EACxB,kBAACQ,EAAA,EAAD,OACgB,IAAdP,EACF,oCAAGjB,QADL,G,IErBOyB,EAAUC,EAAAA,GAEpBC,GAAYC,EAAAA,EAAAA,OAAK,kBACrB,qFAGIC,GAAiBD,EAAAA,EAAAA,OAAK,kBAAM,qFAErBE,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAD,KACE,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,KAAMZ,EAAMa,eAAgBC,UAAWV,IAC9C,kBAAC,EAAAO,MAAD,CAAOC,KAAMZ,EAAMe,UAAWD,UAAWZ,Q,sDCejD,QA/BsB,WAAM,OACoBc,EAAAA,EAAAA,KAAtCC,EADkB,EAClBA,cAAeC,EADG,EACHA,mBAEvB,OACE,kBAAC,EAAAC,WAAD,CAAYC,SAAO,GAChBH,EAActD,KAAI,SAAC0D,EAAcC,GAAf,OACjB,kBAAC,EAAAC,MAAD,CACEC,cAAY,EACZC,QAASJ,EAAaI,QACtBC,MAAOL,EAAa/C,QACpBqD,QAASN,EAAaM,QACtBC,IAAKP,EAAaO,IAClBC,YACE,kBAAC,EAAAC,uBAAD,CACE,+CAAuCR,GACvCI,MAAOL,EAAa/C,QACpByD,aAAY,UAAKV,EAAaM,QAAlB,UACZK,QAAS,WACPd,EAAmBG,EAAaO,KAC5BP,MAAAA,GAAAA,EAAcY,cAChB7E,OAAO8E,IAAIC,gBAAgBd,EAAaY,wBClB1D,IAAMzD,EAAc,IAAI4D,EAAAA,YAAY,CAClCC,eAAgB,CACdC,QAAS,CACPC,MAAO,EACPC,WAAY,IACZC,UAAWC,EAAAA,EACXC,sBAAsB,EACtBC,gBAAgB,MAgDtB,QA3CY,WAAM,IACRC,GAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAA3BF,YACFG,GAAUC,EAAAA,EAAAA,eAChBvD,EAAAA,EAAAA,YAAU,WACRmD,IAAcK,SAAS,CAAEjC,cAAekC,EAAAA,OACvC,CAACN,IAEJ,IAAMO,GAAcC,EAAAA,EAAAA,UAClB,iBAAO,CACLC,SADK,SACIC,GAAU,QACT,QAAR,EAAAlG,gBAAA,mBAAUC,cAAV,SAAkB8F,YAAY,CAAEI,GAAI,WAAYD,SAAAA,KAElD1C,eAJK,SAIU0C,GAAU,QACf,QAAR,EAAAlG,gBAAA,mBAAUC,cAAV,SAAkB8F,YAAY,CAAEI,GAAI,iBAAkBD,SAAAA,QAG1D,IAiBF,OAdA7D,EAAAA,EAAAA,YAAU,WACRrC,SAASC,OAAOmG,OAChBpG,SAASC,OAAOoG,YAAY,aAC5B,IAAMC,EAAatG,SAASC,OAAOsG,GAAG,kBAAkB,SAACC,GACnDA,EAAMC,WACRd,EAAQe,KAAR,WAAiBF,EAAMG,aACMC,IAA7Bb,EAAYS,EAAMG,OACdZ,EAAYS,EAAMG,QAAO,GACzBZ,EAAYE,UAAS,OAG7B,OAAO,kBAAMK,OACZ,IAGD,kBAAC,EAAAO,oBAAD,CAAqBC,OAAQ3F,GAC3B,kBAAC,KAAD,MACA,kBAAC4F,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC/D,EAAD,U,oECjDR,QARgB,WACd,OACE,kBAAC,EAAAG,SAAD,KACE,kBAAC,EAAAC,QAAD,S,yvBCDN,IAAM4D,EAAsBC,IAAAA,cAAoB,CAC9CrD,cAAe,GACfsD,gBAAiB,kBAAM,MACvBrD,mBAAoB,kBAAM,QAGtBkD,EAAuB,SAAC,GAAiB,IAAf7F,EAAe,EAAfA,SAAe,GACHiG,EAAAA,EAAAA,UAAS,IADN,WACtCvD,EADsC,KACvBwD,EADuB,KA4DvCC,EAAe,CACnBzD,cAAAA,EACAsD,gBAAiB,SAAC5C,EAASrD,EAASqG,GAClC,OA5BoB,SAAChD,EAASrD,EAASqG,GACzC,IAAMC,EAjCuB,SAACjD,EAASrD,EAASqG,GAAY,MAEtDE,EAAoB,CACxBlD,QAASA,EACTrD,QAASA,EACTsD,KAJsBkD,EAAAA,EAAAA,MAKtBrD,QAAO,UAAEkD,MAAAA,OAAF,EAAEA,EAASI,kBAAX,UAGT,GAAIJ,GAAWA,EAAQK,eAAiBL,EAAQM,cAAe,CAC7D,IAAMC,EAAiBP,EAAQQ,oBAC3B,CAAEC,SAAU,IACZ,GACEC,EACJ,oCACE,kBAAC,EAAAC,gBAAD,KACE,2BAAGC,KAAMZ,EAAQM,eAAmBC,GACjCP,EAAQK,iBAKjBH,EAAkBW,YAAcH,EAOlC,OAJIV,GAAWA,EAAQQ,qBAAuBR,EAAQM,gBACpDJ,EAAkB5C,aAAe0C,EAAQM,eAGpCJ,EAIsBY,CAC3B9D,EACArD,EACAqG,GAGEe,EAAmB,GAAH,WAAOzE,GAAP,MAA2B2D,KAS/C,OAPID,GAAWA,EAAQgB,sBACrBD,EAAmBA,EAAiBE,QAClC,SAACvE,GAAD,OAAkBA,EAAaO,MAAQ+C,EAAQgB,wBAInDlB,EAAiBiB,GACVd,EAAqBhD,IAYnB2C,CAAgB5C,EAASrD,EAASqG,IAE3CzD,mBAAoB,SAACU,GAAD,OAXK,SAACA,GAC1B6C,EACExD,EAAc2E,QAAO,SAACvE,GAAD,OAAkBA,EAAaO,MAAQA,MASjCV,CAAmBU,KAGlD,OACE,kBAACyC,EAAoBwB,SAArB,CAA8BC,MAAOpB,GAClCnG,IAKP6F,EAAqB2B,UAAY,CAC/BxH,SAAUyH,IAAAA,O,0DC1DZ,QA1ByB,WAAM,OACkClD,EAAAA,EAAAA,YAC7DuB,EAAAA,GADMpD,EADqB,EACrBA,cAAesD,EADM,EACNA,gBAgBvB,MAAO,CACLtD,cAAAA,EACAgF,uBAd6B,SAAC3H,EAASqG,GACvC,OAAOJ,EAAgB,UAAWjG,EAASqG,IAc3CuB,qBAX2B,SAAC5H,EAASqG,GACrC,OAAOJ,EAAgB,SAAUjG,EAASqG,IAW1CwB,oBAR0B,SAAC7H,EAASqG,GACpC,OAAOJ,EAAgB,OAAQjG,EAASqG,IAQxCzD,mBAtB2B,EACWA,sB,oGCG7B6B,GAAkBqD,EAAAA,EAAAA,eAAc,CAC3CvD,YAAa,eAGR,SAASY,IAAoB,2BAAZ4C,EAAY,yBAAZA,EAAY,gBAMlC,OALWxD,EAAAA,EAAAA,IAAY,GAAD,CACpByD,KACAC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAFtC,OAGjBH,M","sources":["webpack:///./src/hooks/useRbacPermissions.js","webpack:///./src/utils/platformServices.js","webpack:///./src/Components/Authentication/Authentication.js","webpack:///./src/hooks/useUser.js","webpack:///./src/Routes.js","webpack:///./src/Components/Notifications/Notifications.js","webpack:///./src/App.js","webpack:///./src/Components/LoadingState/Loading.js","webpack:///./src/contexts/NotificationProvider.js","webpack:///./src/hooks/useNotifications.js","webpack:///./src/store/index.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst getUserRbacPermissions = async () => {\n  return Promise.resolve(\n    window.insights.chrome.getUserPermissions('config-manager')\n  ).then((rawRbacPermissions) => {\n    const permissions = rawRbacPermissions.map(\n      (rawPermission) => rawPermission.permission\n    );\n    const rbacPermissions = {\n      canReadActivationKeys:\n        permissions.includes('config-manager:activation_keys:read') ||\n        permissions.includes('config-manager:activation_keys:*'),\n      canWriteActivationKeys:\n        permissions.includes('config-manager:activation_keys:write') ||\n        permissions.includes('config-manager:activation_keys:*'),\n    };\n\n    return rbacPermissions;\n  });\n};\n\nconst useRbacPermissions = () => {\n  return useQuery('rbac_permissions', () => getUserRbacPermissions());\n};\n\nexport { getUserRbacPermissions, useRbacPermissions as default };\n","const authenticateUser = () => {\n  try {\n    return window.insights.chrome.auth.getUser();\n  } catch (e) {\n    throw new Error(`Error authenticating user: ${e.message}`);\n  }\n};\n\nexport { authenticateUser };\n","import React, { useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { useLocation } from 'react-router-dom';\nimport useUser from '../../hooks/useUser';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nconst Authentication = ({ children }) => {\n  const queryClient = useQueryClient();\n  const location = useLocation();\n\n  const { isLoading, isFetching, isSuccess, isError } = useUser();\n\n  useEffect(() => {\n    /**\n     * On every rerender, based on URL change (location.pathname),\n     * reset the user's status to loading before authenticating again.\n     */\n    queryClient.invalidateQueries('user');\n  }, [location.pathname]);\n\n  isSuccess && window.insights?.chrome?.hideGlobalFilter();\n\n  if (isError === true) {\n    return <Unavailable />;\n  } else if (isLoading === true || isFetching === true) {\n    return <Loading />;\n  } else if (isSuccess === true) {\n    return <>{children}</>;\n  }\n};\n\nexport default Authentication;\n","import { useQuery } from 'react-query';\nimport { getUserRbacPermissions } from '../hooks/useRbacPermissions';\nimport { authenticateUser } from '../utils/platformServices';\n\nconst getUser = () => {\n  return Promise.all([authenticateUser(), getUserRbacPermissions()]).then(\n    ([userStatus, rbacPermissions]) => {\n      const user = {\n        accountNumber: userStatus.identity.account_number,\n        orgId: userStatus?.identity?.internal?.org_id,\n        rbacPermissions: rbacPermissions,\n      };\n      return user;\n    }\n  );\n};\n\nconst useUser = () => {\n  return useQuery('user', () => getUser());\n};\n\nexport { getUser, useUser as default };\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport pckg from '../package.json';\nimport Authentication from './Components/Authentication/Authentication';\nconst { routes: paths } = pckg;\n\nconst Dashboard = lazy(() =>\n  import(/* webpackChunkName: \"Dashboard\" */ './Routes/Dashboard')\n);\n\nconst ActivationKeys = lazy(() => import('./Components/ActivationKeys'));\n\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Authentication>\n      <Switch>\n        <Route path={paths.activationKeys} component={ActivationKeys} />\n        <Route path={paths.connector} component={Dashboard} />\n      </Switch>\n    </Authentication>\n  </Suspense>\n);\n","import React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertGroup,\n} from '@patternfly/react-core';\nimport useNotifications from '../../hooks/useNotifications';\n\nconst Notifications = () => {\n  const { notifications, removeNotification } = useNotifications();\n\n  return (\n    <AlertGroup isToast>\n      {notifications.map((notification, i) => (\n        <Alert\n          isLiveRegion\n          timeout={notification.timeout}\n          title={notification.message}\n          variant={notification.variant}\n          key={notification.key}\n          actionClose={\n            <AlertActionCloseButton\n              data-testid={`notification-close-btn-${i}`}\n              title={notification.message}\n              variantLabel={`${notification.variant} alert`}\n              onClose={() => {\n                removeNotification(notification.key);\n                if (notification?.downloadHref) {\n                  window.URL.revokeObjectURL(notification.downloadHref);\n                }\n              }}\n            />\n          }\n        />\n      ))}\n    </AlertGroup>\n  );\n};\n\nexport default Notifications;\n","import React, { useEffect, useContext, useMemo } from 'react';\nimport { Routes } from './Routes';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { RegistryContext } from './store';\nimport { useHistory } from 'react-router-dom';\nimport NotificationProvider from './contexts/NotificationProvider';\nimport Notifications from './Components/Notifications';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 3,\n      retryDelay: 10 * 1000,\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    },\n  },\n});\n\nconst App = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const history = useHistory();\n  useEffect(() => {\n    getRegistry().register({ notifications: notificationsReducer });\n  }, [getRegistry]);\n\n  const appNavClick = useMemo(\n    () => ({\n      settings(redirect) {\n        insights?.chrome?.appNavClick({ id: 'settings', redirect });\n      },\n      activationKeys(redirect) {\n        insights?.chrome?.appNavClick({ id: 'activationKeys', redirect });\n      },\n    }),\n    []\n  );\n\n  useEffect(() => {\n    insights.chrome.init();\n    insights.chrome.identifyApp('connector');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event.domEvent) {\n        history.push(`/${event.navId}`);\n        appNavClick[event.navId] !== undefined\n          ? appNavClick[event.navId](true)\n          : appNavClick.settings(true);\n      }\n    });\n    return () => unregister();\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <NotificationsPortal />\n      <NotificationProvider>\n        <Notifications />\n        <Routes />\n      </NotificationProvider>\n    </QueryClientProvider>\n  );\n};\nexport default App;\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst Loading = () => {\n  return (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default Loading;\n","import React, { useState } from 'react';\nimport { AlertActionLink } from '@patternfly/react-core';\nimport { v4 as uuid } from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst NotificationContext = React.createContext({\n  notifications: [],\n  addNotification: () => null,\n  removeNotification: () => null,\n});\n\nconst NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n\n  const buildNotificationProps = (variant, message, options) => {\n    const notificationKey = uuid();\n    const notificationProps = {\n      variant: variant,\n      message: message,\n      key: notificationKey,\n      timeout: options?.hasTimeout ?? true,\n    };\n\n    if (options && options.alertLinkText && options.alertLinkHref) {\n      const linkAttributes = options.alertLinkIsDownload\n        ? { download: '' }\n        : {};\n      const alertLink = (\n        <>\n          <AlertActionLink>\n            <a href={options.alertLinkHref} {...linkAttributes}>\n              {options.alertLinkText}\n            </a>\n          </AlertActionLink>\n        </>\n      );\n      notificationProps.actionLinks = alertLink;\n    }\n\n    if (options && options.alertLinkIsDownload && options.alertLinkHref) {\n      notificationProps.downloadHref = options.alertLinkHref;\n    }\n\n    return notificationProps;\n  };\n\n  const addNotification = (variant, message, options) => {\n    const newNotificationProps = buildNotificationProps(\n      variant,\n      message,\n      options\n    );\n\n    let newNotifications = [...notifications, { ...newNotificationProps }];\n\n    if (options && options.keyOfAlertToReplace) {\n      newNotifications = newNotifications.filter(\n        (notification) => notification.key !== options.keyOfAlertToReplace\n      );\n    }\n\n    setNotifications(newNotifications);\n    return newNotificationProps.key;\n  };\n\n  const removeNotification = (key) => {\n    setNotifications(\n      notifications.filter((notification) => notification.key !== key)\n    );\n  };\n\n  const contextValue = {\n    notifications,\n    addNotification: (variant, message, options) => {\n      return addNotification(variant, message, options);\n    },\n    removeNotification: (key) => removeNotification(key),\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nNotificationProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { NotificationContext, NotificationProvider as default };\n","import { useContext } from 'react';\nimport { NotificationContext } from '../contexts/NotificationProvider';\n\nconst useNotifications = () => {\n  const { notifications, addNotification, removeNotification } = useContext(\n    NotificationContext\n  );\n\n  const addSuccessNotification = (message, options) => {\n    return addNotification('success', message, options);\n  };\n\n  const addErrorNotification = (message, options) => {\n    return addNotification('danger', message, options);\n  };\n\n  const addInfoNotification = (message, options) => {\n    return addNotification('info', message, options);\n  };\n\n  return {\n    notifications,\n    addSuccessNotification,\n    addErrorNotification,\n    addInfoNotification,\n    removeNotification,\n  };\n};\n\nexport default useNotifications;\n","import { createContext } from 'react';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"names":["getUserRbacPermissions","Promise","resolve","window","insights","chrome","getUserPermissions","then","rawRbacPermissions","permissions","map","rawPermission","permission","canReadActivationKeys","includes","canWriteActivationKeys","authenticateUser","auth","getUser","e","Error","message","children","queryClient","useQueryClient","location","useLocation","useQuery","all","userStatus","rbacPermissions","accountNumber","identity","account_number","orgId","internal","org_id","isLoading","isFetching","isSuccess","isError","useEffect","invalidateQueries","pathname","hideGlobalFilter","Unavailable","Loading","paths","pckg","Dashboard","lazy","ActivationKeys","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","activationKeys","component","connector","useNotifications","notifications","removeNotification","AlertGroup","isToast","notification","i","Alert","isLiveRegion","timeout","title","variant","key","actionClose","AlertActionCloseButton","variantLabel","onClose","downloadHref","URL","revokeObjectURL","QueryClient","defaultOptions","queries","retry","retryDelay","staleTime","Infinity","refetchOnWindowFocus","refetchOnMount","getRegistry","useContext","RegistryContext","history","useHistory","register","notificationsReducer","appNavClick","useMemo","settings","redirect","id","init","identifyApp","unregister","on","event","domEvent","push","navId","undefined","QueryClientProvider","client","NotificationProvider","NotificationContext","React","addNotification","useState","setNotifications","contextValue","options","newNotificationProps","notificationProps","uuid","hasTimeout","alertLinkText","alertLinkHref","linkAttributes","alertLinkIsDownload","download","alertLink","AlertActionLink","href","actionLinks","buildNotificationProps","newNotifications","keyOfAlertToReplace","filter","Provider","value","propTypes","PropTypes","addSuccessNotification","addErrorNotification","addInfoNotification","createContext","middleware","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}