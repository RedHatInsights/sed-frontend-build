{"version":3,"file":"js/1219.1670596309519.b583665279c08371305b.js","mappings":";yTACA,4yMACA,IAAMA,EAAuB,+BAAG,wGACVC,OAAOC,SAASC,OAAOC,KAAKC,WADlB,cACxBC,EADwB,gBAGPC,MAAM,+BAAgC,CAC3DC,QAAS,CAAEC,cAAe,UAAF,OAAYH,MAJR,cAGxBI,EAHwB,gBAOGA,EAASC,OAPZ,cAOxBC,EAPwB,yBASvBA,EAAmBC,MATI,4CAAH,qDAYvBC,EAAiB,+BAAG,oGACDd,IADC,cAClBe,EADkB,yBAEjBA,GAFiB,2CAAH,qDAKjBC,EAAoB,WACxB,OAAOC,EAAAA,EAAAA,UAAS,mBAAmB,kBAAMH,6DCDrCI,EAAsB,SAACC,GAAD,OAC1B,kBAAC,EAAAC,YAAD,CACEC,SAAUF,EAAME,SAChBC,WAAYH,EAAMG,WAClBC,UAAWJ,EAAMG,WAAa,gBAAkB,IAHlD,YASIE,EAAsB,SAACL,GAC3B,IAAQM,EAAYN,EAAZM,QACFC,EACE,WADFA,EAEE,OAFFA,EAIG,QAET,EAAmCV,IAA3BW,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,KAEpBC,GADcC,EAAAA,EAAAA,kBACKC,aAAa,QAI9BC,GAAQC,EAAAA,EAAAA,iBAARD,IAEFE,GAAsBC,EAAAA,EAAAA,GAC1B,0CAEIC,EAAU,WACd,OACE,kBAAC,EAAAC,gBAAD,CAAiB,aAAW,kBAC1B,kBAAC,EAAAC,MAAD,KACE,kBAAC,EAAAC,GAAD,CAAIC,UAAU,GACZ,kBAAC,EAAAC,GAAD,CAAIC,MAAO,IAAKjB,GAChB,kBAAC,EAAAgB,GAAD,KAAKhB,GACL,kBAAC,EAAAgB,GAAD,KArBM,OAsBN,kBAAC,EAAAA,GAAD,KAAKhB,GACL,kBAAC,EAAAkB,GAAD,QAGJ,kBAAC,EAAAC,MAAD,KACGhB,EAAKiB,KAAI,SAACC,GACT,IAAIC,EAAavB,EAAQsB,EAAME,MAC/B,OACE,kBAAC,EAAAT,GAAD,CAAIU,IAAKH,EAAME,KAAMR,UAAU,GAC7B,kBAAC,EAAAG,GAAD,CAAIO,SAAS,YAAYC,UAAW1B,GACjCS,EACC,kBAAC,EAAAkB,KAAD,CAAMC,GAAE,UAAKrB,EAAL,YAAYc,EAAME,OAA1B,IAAoCF,EAAME,MAE1CF,EAAME,MAGV,kBAAC,EAAAL,GAAD,CAAIQ,UAAW1B,GAAmBqB,EAAMQ,MACxC,kBAAC,EAAAX,GAAD,CAAIQ,UAvCF,OAwCCL,EAAMS,cAET,kBAAC,EAAAZ,GAAD,CAAIQ,UAAW1B,GAAoBqB,EAAMU,OACzC,kBAAC,EAAAb,GAAD,CAAIc,cAAY,GACd,kBAAC,EAAAC,cAAD,CACEC,MAAOZ,EACP1B,YAvCRQ,EAAK+B,gBAAgBC,uBAwCbC,cAAe7C,YAWjC,OAAIS,IAAcC,EACT,kBAACoC,EAAA,EAAD,MACGrC,GAAcC,EAGjB,kBAACqC,EAAA,EAAD,MAFA,kBAAC5B,EAAD,OAMXb,EAAoB0C,UAAY,CAC9BzC,QAASyC,IAAAA,MAGXhD,EAAoBgD,UAAY,CAC9B7C,SAAU6C,IAAAA,KACV5C,WAAY4C,IAAAA,MAGd,oCCzGMC,EAA4B,SAAChD,GACjC,IAAQiD,EAAYjD,EAAZiD,QAEFtC,GADcC,EAAAA,EAAAA,kBACKC,aAAa,QAItC,OACE,kBAAC,EAAAqC,OAAD,CAAQC,QAAQ,UAAUF,QAASA,EAAS9C,YAHpCQ,EAAK+B,gBAAgBC,wBAG7B,0BAMJK,EAA0BD,UAAY,CACpCE,QAASG,IAAAA,KAAAA,YAGX,UCZA,IAAMC,EAAwB,SAACrD,GAC7B,IAAQsD,EAAsBtD,EAAtBsD,kBACR,OACE,oCACE,kBAAC,EAAAC,WAAD,KACE,kBAAC,EAAAC,eAAD,CAAgBC,KAAMC,EAAAA,KACtB,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,sBAGA,kBAAC,EAAAC,eAAD,uJAKA,kBAAC,EAAD,CAA2Bb,QAASK,OAM5CD,EAAsBN,UAAY,CAChCO,kBAAmBF,IAAAA,KAAAA,YAGrB,MCjCA,EDiCA,8BElCA,4yMACA,IAAMW,EAAqB,+BAAG,WAAOrD,GAAP,wFACpBoB,EAAoCpB,EAApCoB,KAAMM,EAA8B1B,EAA9B0B,KAAMC,EAAwB3B,EAAxB2B,aAAcC,EAAU5B,EAAV4B,MADN,SAERxD,OAAOC,SAASC,OAAOC,KAAKC,WAFpB,cAEtBC,EAFsB,gBAGLC,MAAM,+BAAgC,CAC3D4E,OAAQ,OACR3E,QAAS,CACPC,cAAe,UAAF,OAAYH,GACzB,eAAgB,oBAElBO,KAAMuE,KAAKC,UAAU,CACnBpC,KAAMA,EACNM,KAAMA,EACNC,aAAcA,EACdC,MAAOA,MAbiB,WAGtB/C,EAHsB,QAgBd4E,GAhBc,sBAiBpB,IAAIC,MAAJ,sBACW7E,EAAS8E,OADpB,6CAC+D9E,EAAS+E,WADxE,MAjBoB,gCAqBrB/E,EAASC,QArBY,4CAAH,sDCMrB+E,EAA2B,SAACvE,GAChC,IAAMwE,GAAc5D,EAAAA,EAAAA,kBACpB,EAA8B6D,EAAAA,UAAe,GAA7C,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,EAAAA,UAAe,GAAzC,WAAOhE,EAAP,KAAcmE,EAAd,KACQtB,EAA8BtD,EAA9BsD,kBAAmBuB,EAAW7E,EAAX6E,OAC3B,GDcOC,EAAAA,EAAAA,aAAYf,GCdXgB,EAAR,EAAQA,OAAQvE,EAAhB,EAAgBA,UAkBhB,OACE,gBAAC,EAAAwE,MAAD,CACE7B,QAAS8B,EAAAA,aAAAA,MACTC,MAAM,4BACNC,YAAY,GACZN,OAAQA,EACRO,QAAS9B,GAER9C,EACC,gBAACqC,EAAA,EAAD,MAEA,gBAACwC,EAAA,EAAD,CACE/B,kBAAmBA,EACnBgC,WA9BW,SAACC,GAClB,IAAQzD,EAAoCyD,EAApCzD,KAAMM,EAA8BmD,EAA9BnD,KAAMC,EAAwBkD,EAAxBlD,aAAcC,EAAUiD,EAAVjD,MAClCyC,EACE,CAAEjD,KAAAA,EAAMM,KAAAA,EAAMC,aAAAA,EAAcC,MAAAA,GAC5B,CACEkD,UAAW,WACTZ,GAAS,GACTD,GAAW,GACXH,EAAYiB,kBAAkB,oBAEhCC,QAAS,WACPd,GAAS,GACTD,GAAW,OAmBXgB,UAAWjB,EACXkB,QAASnF,MAOnB8D,EAAyBxB,UAAY,CACnCO,kBAAmBP,IAAAA,KAAAA,WACnB8B,OAAQ9B,IAAAA,KAAAA,WACR8C,kBAAmB9C,IAAAA,QAGrB,+CC8GA,MCvKA,GDuKe+C,EAAAA,EAAAA,aA3IQ,WACrB,IA+CIC,EA9CEpF,GADcC,EAAAA,EAAAA,kBACKC,aAAa,QACtC,EAAmChB,IAA3BW,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,KAC1B,GAA4BsF,EAAAA,EAAAA,WAAS,GAArC,WAAOnB,EAAP,KAAeoB,EAAf,KACA,GAA4CD,EAAAA,EAAAA,UAAS,IAArD,WAAOE,EAAP,KAAuBC,EAAvB,KAEA,GACEH,EAAAA,EAAAA,WAAS,GADX,WAAOI,EAAP,KAAuCC,EAAvC,KAEA,GACEL,EAAAA,EAAAA,WAAS,GADX,WAAOM,EAAP,KAAqCC,EAArC,KAEMjD,EAAoB,WACxB2C,GAAWpB,IAGP2B,EACJ,kBAAC,EAAAC,YAAD,CAAarG,UAAU,qBACrB,kBAAC,EAAAsG,KAAD,gMAIE,uBACEC,OAAO,SACPC,IAAI,sBACJC,KAAM,0DAHR,wBAQF,kBAAC,EAAAH,KAAD,+EAC0E,IACxE,2BAAI/F,EAAKmG,SAkBXtG,EACFuF,EAAc,kBAAClD,EAAA,EAAD,MACJrC,GAAcC,GAAUC,EAAKqG,OAI7BvG,GAAcC,IAASC,EAAKqG,SACtChB,EACE,oCACE,kBAAC,EAAAiB,YAAD,KACE,kBAAC,EAAD,CAA2B/D,QAASK,KAEtC,kBAAC,EAAD,CAAqBhD,QAzBX,SAACuF,GACf,MAAO,CACL,CACEX,MAAO,OACPjC,QAAS,kBAAMgE,EAAmCpB,KAEpD,CACEX,MAAO,SACPjC,QAAS,kBAAMiE,EAAqCrB,WAQxDE,EACE,kBAAC,EAAD,CAAuBzC,kBAAmBA,IAa9C,IAAM6D,EAAa,SAACC,EAAWtF,GAE7BqE,EADkBiB,EAAY,GAAKtF,IAI/BoF,EAAuC,SAACpF,GAC5CqF,EAAWf,EAAgCtE,GAC3CuE,GAAmCD,IAG/Ba,EAAqC,SAACnF,GAC1CqF,EAAWb,EAA8BxE,GACzCyE,GAAiCD,IAG7Be,EAAO,WACX,OACE,kBAAC,aAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,WAAS,EAACpH,UAAU,cACzB,kBAAC,EAAAqH,UAAD,CAAWC,UAAQ,GACjB,kBAAC,EAAAC,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,OAAQ,CAAEC,QAAS,aAC3B,kBAACC,EAAA,EAAD,CAAiB7C,MAAM,qBAEzB,kBAAC,EAAA0C,SAAD,KACE,kBAACI,EAAA,EAAD,CACExB,eAAgBA,EAChBtB,MAAM,kBACN+C,SAAS,cAMnB,kBAAC,EAAAxB,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMwB,UAAWC,EAAAA,aAAAA,GAAjB,oBACoBxH,EAAKmG,SAI7B,kBAACsB,EAAA,EAAD,KACE,kBAAC,EAAAC,YAAD,CAAalF,QAASmF,EAAAA,oBAAAA,OACnBvC,IAGL,kBAAC,EAAD,CACElB,OAAQA,EACRvB,kBAAmBA,IAErB,kBAACiF,EAAA,EAAD,CACErD,MAAM,sBACNL,OAAQyB,EACRhD,kBAAmB2D,EACnBpB,kBAAmBK,EACnBsC,UAAU,UAEZ,kBAACC,EAAA,EAAD,CACEnF,kBAAmB4D,EACnBrC,OAAQuB,EACRtE,KAAMoE,MAMd,OAAIvF,EAAK+B,gBAAgBgG,sBAChB,kBAACrB,EAAD,MAEA,kBAAC,IAAD","sources":["webpack:///./src/hooks/useActivationKeys.js","webpack:///./src/Components/ActivationKeysTable/ActivationKeysTable.js","webpack:///./src/Components/ActivationKeys/CreateActivationKeyButton.js","webpack:///./src/Components/EmptyState/NoActivationKeysFound.js","webpack:///./src/Components/EmptyState/index.js","webpack:///./src/hooks/useCreateActivationKey.js","webpack:///./src/Components/Modals/CreateActivationKeyModal.js","webpack:///./src/Components/ActivationKeys/ActivationKeys.js","webpack:///./src/Components/ActivationKeys/index.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst fetchActivationKeysData = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKeys = async () => {\n  const keysData = await fetchActivationKeysData();\n  return keysData;\n};\n\nconst useActivationKeys = () => {\n  return useQuery('activation_keys', () => getActivationKeys());\n};\n\nexport { useActivationKeys as default };\n","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ActionsColumn,\n} from '@patternfly/react-table';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport { useQueryClient } from 'react-query';\nimport { KebabToggle } from '@patternfly/react-core';\nimport useFeatureFlag from '../../hooks/useFeatureFlag';\n\nconst customActionsToggle = (props) => (\n  <KebabToggle\n    onToggle={props.onToggle}\n    isDisabled={props.isDisabled}\n    className={props.isDisabled ? 'pf-m-disabled' : ''}\n  >\n    Actions\n  </KebabToggle>\n);\n\nconst ActivationKeysTable = (props) => {\n  const { actions } = props;\n  const columnNames = {\n    name: 'Key Name',\n    role: 'Role',\n    serviceLevel: 'SLA',\n    usage: 'Usage',\n  };\n  const { isLoading, error, data } = useActivationKeys();\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isActionsDisabled = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n  const { url } = useRouteMatch();\n\n  const keyDetailsIsEnabled = useFeatureFlag(\n    'sed-frontend.activationKeysDetailsPage'\n  );\n  const Results = () => {\n    return (\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th width={40}>{columnNames.name}</Th>\n            <Th>{columnNames.role}</Th>\n            <Th>{columnNames.serviceLevel}</Th>\n            <Th>{columnNames.usage}</Th>\n            <Td></Td>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {data.map((datum) => {\n            let rowActions = actions(datum.name);\n            return (\n              <Tr key={datum.name} ouiaSafe={true}>\n                <Td modifier=\"breakWord\" dataLabel={columnNames.name}>\n                  {keyDetailsIsEnabled ? (\n                    <Link to={`${url}/${datum.name}`}> {datum.name}</Link>\n                  ) : (\n                    datum.name\n                  )}\n                </Td>\n                <Td dataLabel={columnNames.role}>{datum.role}</Td>\n                <Td dataLabel={columnNames.serviceLevel}>\n                  {datum.serviceLevel}\n                </Td>\n                <Td dataLabel={columnNames.usage}>{datum.usage}</Td>\n                <Td isActionCell>\n                  <ActionsColumn\n                    items={rowActions}\n                    isDisabled={isActionsDisabled()}\n                    actionsToggle={customActionsToggle}\n                  />\n                </Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </TableComposable>\n    );\n  };\n\n  if (isLoading && !error) {\n    return <Loading />;\n  } else if (!isLoading && !error) {\n    return <Results />;\n  } else {\n    return <Unavailable />;\n  }\n};\n\nActivationKeysTable.propTypes = {\n  actions: propTypes.func,\n};\n\ncustomActionsToggle.propTypes = {\n  onToggle: propTypes.func,\n  isDisabled: propTypes.bool,\n};\n\nexport default ActivationKeysTable;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { useQueryClient } from 'react-query';\nimport PropTypes from 'prop-types';\n\nconst CreateActivationKeyButton = (props) => {\n  const { onClick } = props;\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isDisabled = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n  return (\n    <Button variant=\"primary\" onClick={onClick} isDisabled={isDisabled()}>\n      Create activation key\n    </Button>\n  );\n};\n\nCreateActivationKeyButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default CreateActivationKeyButton;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport CreateActivationKeyButton from '../ActivationKeys/CreateActivationKeyButton';\n\nconst NoActivationKeysFound = (props) => {\n  const { handleModalToggle } = props;\n  return (\n    <>\n      <EmptyState>\n        <EmptyStateIcon icon={AddCircleOIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          No activation keys\n        </Title>\n        <EmptyStateBody>\n          You currently have no activation keys to display. Activation keys\n          allow you to register a system with system purpose, role and usage\n          attached.\n        </EmptyStateBody>\n        <CreateActivationKeyButton onClick={handleModalToggle} />\n      </EmptyState>\n    </>\n  );\n};\n\nNoActivationKeysFound.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n};\n\nexport default NoActivationKeysFound;\n","import NoActivationKeysFound from './NoActivationKeysFound';\n\nexport default NoActivationKeysFound;\n","import { useMutation } from 'react-query';\n\nconst activationKeyMutation = async (data) => {\n  const { name, role, serviceLevel, usage } = data;\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: name,\n      role: role,\n      serviceLevel: serviceLevel,\n      usage: usage,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error creating activation key: ${response.statusText}.`\n    );\n  }\n  return response.json();\n};\n\nconst useCreateActivationKey = () => {\n  return useMutation(activationKeyMutation);\n};\n\nexport { useCreateActivationKey as default };\n","import * as React from 'react';\nimport { Modal, ModalVariant } from '@patternfly/react-core';\nimport ActivationKeyForm from '../Forms/ActivationKeyForm';\nimport useCreateActivationKey from '../../hooks/useCreateActivationKey';\nimport propTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\n\nconst CreateActivationKeyModal = (props) => {\n  const queryClient = useQueryClient();\n  const [created, setCreated] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const { handleModalToggle, isOpen } = props;\n  const { mutate, isLoading } = useCreateActivationKey();\n  const submitForm = (formData) => {\n    const { name, role, serviceLevel, usage } = formData;\n    mutate(\n      { name, role, serviceLevel, usage },\n      {\n        onSuccess: () => {\n          setError(false);\n          setCreated(true);\n          queryClient.invalidateQueries('activation_keys');\n        },\n        onError: () => {\n          setError(true);\n          setCreated(false);\n        },\n      }\n    );\n  };\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title=\"Create new activation key\"\n      description=\"\"\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n    >\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <ActivationKeyForm\n          handleModalToggle={handleModalToggle}\n          submitForm={submitForm}\n          isSuccess={created}\n          isError={error}\n        />\n      )}\n    </Modal>\n  );\n};\n\nCreateActivationKeyModal.propTypes = {\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  activationKeyName: propTypes.string,\n};\n\nexport default CreateActivationKeyModal;\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  ActionGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ActivationKeysTable from '../ActivationKeysTable';\nimport { useQueryClient } from 'react-query';\nimport NoAccessView from './no-access';\nimport NoActivationKeysFound from '../EmptyState';\nimport CreateActivationKeyModal from '../Modals/CreateActivationKeyModal';\nimport EditActivationKeyModal from '../Modals/EditActivationKeyModal';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport CreateActivationKeyButton from './CreateActivationKeyButton';\nimport DeleteActivationKeyConfirmationModal from '../Modals/DeleteActivationKeyConfirmationModal';\nimport ActivationKeysDocsPopover from '../ActivationKeysDocsPopover';\nconst ActivationKeys = () => {\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const { isLoading, error, data } = useActivationKeys();\n  const [isOpen, setisOpen] = useState(false);\n  const [currentKeyName, setCurrentKeyName] = useState('');\n\n  const [isDeleteActivationKeyModalOpen, setIsDeleteActivationKeyModalOpen] =\n    useState(false);\n  const [isEditActivationKeyModalOpen, setIsEditActivationKeyModalOpen] =\n    useState(false);\n  const handleModalToggle = () => {\n    setisOpen(!isOpen);\n  };\n\n  const popoverContent = (\n    <TextContent className=\"pf-u-font-size-sm\">\n      <Text>\n        Activation keys assist you in registering systems. Metadata such as\n        role, system purpose, and usage can be automatically attached to systems\n        via an activation key, and monitored with &nbsp;\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={'https://console.redhat.com/insights/subscriptions/rhel'}\n        >\n          Subscription Watch.\n        </a>\n      </Text>\n      <Text>\n        To register with an activation key, you will need your organization ID:{' '}\n        <b>{user.orgId}</b>\n      </Text>\n    </TextContent>\n  );\n\n  const actions = (activationKeyName) => {\n    return [\n      {\n        title: 'Edit',\n        onClick: () => handleEditActivationKeyModalToggle(activationKeyName),\n      },\n      {\n        title: 'Delete',\n        onClick: () => handleDeleteActivationKeyModalToggle(activationKeyName),\n      },\n    ];\n  };\n  let pageContent;\n  if (isLoading) {\n    pageContent = <Loading />;\n  } else if (!isLoading && !error && !data.length) {\n    pageContent = (\n      <NoActivationKeysFound handleModalToggle={handleModalToggle} />\n    );\n  } else if (!isLoading && !error && data.length) {\n    pageContent = (\n      <>\n        <ActionGroup>\n          <CreateActivationKeyButton onClick={handleModalToggle} />\n        </ActionGroup>\n        <ActivationKeysTable actions={actions} />\n      </>\n    );\n  }\n\n  const setKeyName = (modalOpen, name) => {\n    let currentName = modalOpen ? '' : name;\n    setCurrentKeyName(currentName);\n  };\n\n  const handleDeleteActivationKeyModalToggle = (name) => {\n    setKeyName(isDeleteActivationKeyModalOpen, name);\n    setIsDeleteActivationKeyModalOpen(!isDeleteActivationKeyModalOpen);\n  };\n\n  const handleEditActivationKeyModalToggle = (name) => {\n    setKeyName(isEditActivationKeyModalOpen, name);\n    setIsEditActivationKeyModalOpen(!isEditActivationKeyModalOpen);\n  };\n\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <Split hasGutter className=\"page-title\">\n            <SplitItem isFilled>\n              <Flex>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                  <PageHeaderTitle title=\"Activation Keys\" />\n                </FlexItem>\n                <FlexItem>\n                  <ActivationKeysDocsPopover\n                    popoverContent={popoverContent}\n                    title=\"Activation Keys\"\n                    position=\"right\"\n                  />\n                </FlexItem>\n              </Flex>\n            </SplitItem>\n          </Split>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              Organization ID: {user.orgId}\n            </Text>\n          </TextContent>\n        </PageHeader>\n        <Main>\n          <PageSection variant={PageSectionVariants.light}>\n            {pageContent}\n          </PageSection>\n        </Main>\n        <CreateActivationKeyModal\n          isOpen={isOpen}\n          handleModalToggle={handleModalToggle}\n        />\n        <EditActivationKeyModal\n          title=\"Edit activation key\"\n          isOpen={isEditActivationKeyModalOpen}\n          handleModalToggle={handleEditActivationKeyModalToggle}\n          activationKeyName={currentKeyName}\n          modalSize=\"large\"\n        />\n        <DeleteActivationKeyConfirmationModal\n          handleModalToggle={handleDeleteActivationKeyModalToggle}\n          isOpen={isDeleteActivationKeyModalOpen}\n          name={currentKeyName}\n        />\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKeys);\n","import ActivationKeys from './ActivationKeys';\n\nexport default ActivationKeys;\n"],"names":["fetchActivationKeysData","window","insights","chrome","auth","getToken","token","fetch","headers","Authorization","response","json","activationKeysData","body","getActivationKeys","keysData","useActivationKeys","useQuery","customActionsToggle","props","KebabToggle","onToggle","isDisabled","className","ActivationKeysTable","actions","columnNames","isLoading","error","data","user","useQueryClient","getQueryData","url","useRouteMatch","keyDetailsIsEnabled","useFeatureFlag","Results","TableComposable","Thead","Tr","ouiaSafe","Th","width","Td","Tbody","map","datum","rowActions","name","key","modifier","dataLabel","Link","to","role","serviceLevel","usage","isActionCell","ActionsColumn","items","rbacPermissions","canWriteActivationKeys","actionsToggle","Loading","Unavailable","propTypes","CreateActivationKeyButton","onClick","Button","variant","PropTypes","NoActivationKeysFound","handleModalToggle","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","headingLevel","size","EmptyStateBody","activationKeyMutation","method","JSON","stringify","ok","Error","status","statusText","CreateActivationKeyModal","queryClient","React","created","setCreated","setError","isOpen","useMutation","mutate","Modal","ModalVariant","title","description","onClose","ActivationKeyForm","submitForm","formData","onSuccess","invalidateQueries","onError","isSuccess","isError","activationKeyName","withRouter","pageContent","useState","setisOpen","currentKeyName","setCurrentKeyName","isDeleteActivationKeyModalOpen","setIsDeleteActivationKeyModalOpen","isEditActivationKeyModalOpen","setIsEditActivationKeyModalOpen","popoverContent","TextContent","Text","target","rel","href","orgId","length","ActionGroup","handleEditActivationKeyModalToggle","handleDeleteActivationKeyModalToggle","setKeyName","modalOpen","Page","PageHeader","Split","hasGutter","SplitItem","isFilled","Flex","FlexItem","spacer","default","PageHeaderTitle","ActivationKeysDocsPopover","position","component","TextVariants","Main","PageSection","PageSectionVariants","EditActivationKeyModal","modalSize","DeleteActivationKeyConfirmationModal","canReadActivationKeys"],"sourceRoot":""}