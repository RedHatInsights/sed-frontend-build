{"version":3,"file":"js/Dashboard.7ac1de035c9e8e7d789c.js","mappings":"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","sources":["webpack:///./src/Components/FormGroups/CopyHelperText.js","webpack:///./src/Components/FormGroups/RegisterWithUserName.js","webpack:///./src/Components/FormGroups/RegisterWithActivationKey.js","webpack:///./src/Components/ConfirmChangesModal/index.js","webpack:///./src/store/currStateReducer.js","webpack:///./src/store/logReducer.js","webpack:///./src/store/connectedSystems.js","webpack:///./src/Components/NoSytemsAlert/index.js","webpack:///./src/Components/ActivationKeys/index.js","webpack:///./src/Components/Services/Services.js","webpack:///./src/Routes/Dashboard/index.js","webpack:///./src/api/inventory.js","webpack:///./src/api/index.js","webpack:///./src/store/actionTypes.js","webpack:///./src/store/actions.js","webpack:///./src/utils/helpers.js"],"sourcesContent":["import { FormHelperText } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst CopyHelperText = () => (\n  <FormHelperText isHidden={false} className=\"pf-u-mt-sm\">\n    Click the <CopyIcon /> icon on a row to copy the command with your values\n  </FormHelperText>\n);\n\nexport default CopyHelperText;\n","import {\n  ClipboardCopy,\n  FormGroup,\n  Stack,\n  StackItem,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport CopyHelperText from './CopyHelperText';\n\nconst RegisterWithUserName = () => {\n  return (\n    <FormGroup\n      label={\n        <span>\n          Register with a username and password&nbsp;\n          <Tooltip\n            position=\"right\"\n            content={\n              <Stack hasGutter>\n                <StackItem>\n                  Recommended for accounts with Simple Content Access enable\n                </StackItem>\n                <StackItem>\n                  Systems can be registered using the username and password of a\n                  user on an account with valid subscription. Systems will be\n                  registered trough Simple Content Access (SCA) or if SCA is not\n                  enabled, subscriptions will be auto-attached.\n                </StackItem>\n              </Stack>\n            }\n          >\n            <OutlinedQuestionCircleIcon />\n          </Tooltip>\n        </span>\n      }\n      helperText={<CopyHelperText />}\n    >\n      <ClipboardCopy>\n        rhc connect -u &#60;username&#62; -p &#60;password&#62;\n      </ClipboardCopy>\n    </FormGroup>\n  );\n};\n\nexport default RegisterWithUserName;\n","import { ClipboardCopy, FormGroup, Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nimport CopyHelperText from './CopyHelperText';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Stack, StackItem } from '@patternfly/react-core';\n\nconst RegisterWithActivationKey = () => {\n  return (\n    <FormGroup\n      label={\n        <span>\n          Register with an activation key&nbsp;\n          <Tooltip\n            position=\"right\"\n            content={\n              <Stack hasGutter>\n                <StackItem>\n                  Recommended for accounts without Simple Content Access enable\n                </StackItem>\n                <StackItem>\n                  Systems can be registered using an actication key &amp; the\n                  organiztaion ID. Using activation keys allows systems to be\n                  associated to specific subscriptions. Activation keys can be\n                  viewed on the &quot;Activation keys&quot; tab of the Red Hat\n                  connector UI or on the customer portal.\n                </StackItem>\n              </Stack>\n            }\n          >\n            <OutlinedQuestionCircleIcon />\n          </Tooltip>\n        </span>\n      }\n      helperText={<CopyHelperText />}\n    >\n      <ClipboardCopy>\n        rhc connect -a &#60;activation-key&#62; -o&nbsp;\n        &#60;organization-id&#62;\n      </ClipboardCopy>\n    </FormGroup>\n  );\n};\n\nexport default RegisterWithActivationKey;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { configApi } from '../../api';\nimport { Button, Modal, Text, TextContent } from '@patternfly/react-core';\nimport { pluralize, downloadFile } from '../../utils/helpers';\n\nconst ConfirmChangesModal = ({\n  isOpen = false,\n  handleCancel,\n  handleConfirm,\n  systemsCount,\n  data,\n}) => {\n  return (\n    <Modal\n      variant=\"small\"\n      title=\"Confirm changes\"\n      isOpen={isOpen}\n      onClose={handleCancel}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"button\"\n          onClick={handleConfirm}\n        >\n          Confirm changes\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text component=\"p\">\n          Your changes applies to{' '}\n          <b>\n            {systemsCount} connected {pluralize(systemsCount, 'system')}\n          </b>\n          . Selected settings will also be applied to <b>all future systems</b>{' '}\n          that are connect through Red Hat Connect (rhc).\n        </Text>\n        <Text component=\"p\" className=\"pf-u-mb-sm\">\n          Upon confirmation, an Ansible Playbook will be pushed to{' '}\n          {systemsCount} {pluralize(systemsCount, 'system')} to apply changes.\n        </Text>\n      </TextContent>\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          (async () => {\n            const playbook = await configApi.getPlaybookPreview({\n              compliance_openscap: data.useOpenSCAP ? 'enabled' : 'disabled',\n              insights: data.hasInsights ? 'enabled' : 'disabled',\n              remediations: data.enableCloudConnector ? 'enabled' : 'disabled',\n            });\n            downloadFile(playbook);\n          })();\n        }}\n      >\n        View playbook\n      </Button>\n    </Modal>\n  );\n};\n\nConfirmChangesModal.propTypes = {\n  isOpen: PropTypes.bool,\n  handleConfirm: PropTypes.func.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  systemsCount: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    useOpenSCAP: PropTypes.bool,\n    enableCloudConnector: PropTypes.bool,\n    hasInsights: PropTypes.bool,\n  }),\n};\n\nexport default ConfirmChangesModal;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CURR_STATE, SET_CURR_STATE } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst currStatePending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst currStateFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  values: {\n    useOpenSCAP: payload?.state?.compliance_openscap === 'enabled',\n    enableCloudConnector: payload?.state?.remediations === 'enabled',\n    hasInsights: payload?.state?.insights === 'enabled',\n  },\n});\n\nexport default applyReducerHash(\n  {\n    [`${SET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${SET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${GET_CURR_STATE}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_LOG } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  results: [],\n};\n\nconst logPending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst logFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  ...(payload || {}),\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_LOG}_PENDING`]: logPending,\n    [`${GET_LOG}_FULFILLED`]: logFulfilled,\n    [`${GET_LOG}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CONNECTED_HOSTS } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst connectedSystemsPending = (state) => ({\n  ...state,\n  loaded: false,\n});\n\nconst connectedSystemsFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  hosts: payload?.results || [],\n  total: payload?.count || 0,\n  page: payload?.page || 0,\n  perPage: payload?.per_page || 0,\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_CONNECTED_HOSTS}_PENDING`]: connectedSystemsPending,\n    [`${GET_CONNECTED_HOSTS}_FULFILLED`]: connectedSystemsFulfilled,\n    [`${GET_CONNECTED_HOSTS}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Form,\n  Grid,\n  GridItem,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport { RegisterWithActivationKey, RegisterWithUserName } from '../FormGroups';\n\nconst NoSystemsAlert = ({ handleClose }) => (\n  <Alert\n    title={\n      <Title headingLevel=\"h2\" size=\"xl\">\n        Red Hat connector (RHC)\n      </Title>\n    }\n    actionClose={<AlertActionCloseButton onClick={handleClose} />}\n    isInline\n    customIcon={<Fragment />}\n    className=\"pf-u-mb-lg\"\n  >\n    <TextContent>\n      <Text>\n        Red Hat connector allows you to connect your systems to Red Hat with one\n        command.\n      </Text>\n      <Text>\n        Systems will be automatically set up to use the services turned on in\n        the dashboard below.\n      </Text>\n      <Text>Red Hat connector is for RHEL 8.4 systems and newer.</Text>\n      <Text>\n        To register other RHEL systems, check out the&nbsp;\n        <a\n          target=\"_blank\"\n          rel=\"noreferer noopener\"\n          href=\"./insights/registration\"\n        >\n          Registration Assistant\n        </a>\n        .\n      </Text>\n      <Form onSubmit={(event) => event.preventDefault()}>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <RegisterWithActivationKey />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            <RegisterWithUserName />\n          </GridItem>\n        </Grid>\n      </Form>\n    </TextContent>\n  </Alert>\n);\n\nNoSystemsAlert.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n};\n\nexport default NoSystemsAlert;\n","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\n\nconst ActivationKeys = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={LockIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        This feature is not currently supported\n      </Title>\n      <Button\n        component=\"a\"\n        variant=\"link\"\n        href=\"https://access.redhat.com/articles/simple-content-access\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        Customer portal\n      </Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default ActivationKeys;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  Button,\n  Level,\n  LevelItem,\n  Stack,\n  StackItem,\n  Switch,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport propTypes from 'prop-types';\n\nimport pckg from '../../../package.json';\nimport '@patternfly/react-styles/css/components/Table/table.css';\n\nconst { routes: paths } = pckg;\n\nconst Services = ({\n  setMadeChanges,\n  defaults,\n  onChange,\n  madeChanges,\n  setConfirmChangesOpen,\n}) => {\n  const { push } = useHistory();\n  const { systemsLoaded } = useSelector(\n    ({ connectedSystemsReducer }) => ({\n      systemsLoaded: connectedSystemsReducer?.loaded,\n    }),\n    shallowEqual\n  );\n  const [connectToInsights, setConnectToInsights] = useState(\n    defaults.hasInsights ||\n      defaults.useOpenSCAP ||\n      defaults.enableCloudConnector\n  );\n  const [useOpenSCAP, setUseOpenSCAP] = useState(defaults.useOpenSCAP);\n  const [enableCloudConnector, setEnableCloudConnector] = useState(\n    defaults.enableCloudConnector\n  );\n\n  useEffect(() => {\n    setMadeChanges(\n      connectToInsights !== defaults.hasInsights ||\n        useOpenSCAP !== defaults.useOpenSCAP ||\n        enableCloudConnector != defaults.enableCloudConnector\n    );\n    onChange({ useOpenSCAP, enableCloudConnector });\n  }, [useOpenSCAP, enableCloudConnector, connectToInsights]);\n\n  return (\n    <Stack hasGutter className=\"pf-u-p-md\">\n      <StackItem>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\" size=\"2xl\">\n              Red Hat Insights\n            </Title>\n          </LevelItem>\n          <LevelItem>\n            <Button\n              ouiaId=\"primary-save-button\"\n              isDisabled={!systemsLoaded || !madeChanges}\n              onClick={() => setConfirmChangesOpen(true)}\n            >\n              Save changes\n            </Button>\n            <Button onClick={() => push(paths.logModal)} variant=\"link\">\n              View log\n            </Button>\n          </LevelItem>\n        </Level>\n        <TextContent className=\"pf-u-mt-md\">\n          <Text component=\"p\">\n            Red Hat Insights is a proactive operational efficiency and security\n            risk management solution in Red Hat Enterprise Linux (RHEL)\n            subscriptions for versions 6.4 and higher, as well as public cloud\n            versions of RHEL. It helps identify, prioritize, and resolve risks\n            to security, compliance, performance, availability, and stability\n            before they become urgent issues. Insights also enables users to\n            monitor for adherence to internal policies and understand\n            configuration changes over time.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Title headingLevel=\"h3\" size=\"xl\">\n          Settings\n        </Title>\n        <Stack hasGutter className=\"pf-u-mt-lg\">\n          <StackItem>\n            <Switch\n              id=\"connect-to-insights\"\n              ouiaId=\"connect-to-insights\"\n              aria-label=\"Connect to Red Hat Insights\"\n              isChecked={connectToInsights}\n              onChange={() => {\n                const newHasInsights = !connectToInsights;\n                setConnectToInsights(() => newHasInsights);\n                if (!newHasInsights) {\n                  setUseOpenSCAP(() => false);\n                  setEnableCloudConnector(() => false);\n                }\n              }}\n              label={\n                <Fragment>\n                  <Title headingLevel=\"h4\" size=\"md\">\n                    Connect to Red Hat Insights\n                  </Title>\n                  <TextContent>\n                    <Text component=\"small\">\n                      Required to use Insights applications. Enables Advisor,\n                      Drift, Patch, Vulnerability and Policies applications.\n                    </Text>\n                  </TextContent>\n                </Fragment>\n              }\n            />\n            <div className=\"pf-u-pl-3xl\">\n              <Stack>\n                <StackItem>\n                  <Switch\n                    className=\"pf-u-mt-md\"\n                    key=\"use-openscap\"\n                    id=\"use-openscap\"\n                    ouiaId=\"use-openscap\"\n                    aria-label=\"Use OpenSCAP for Compliance policies\"\n                    isChecked={useOpenSCAP}\n                    onChange={() => {\n                      setUseOpenSCAP((prevValue) => {\n                        const newUseOpenSCAP = !prevValue;\n                        setConnectToInsights(() => true);\n                        return newUseOpenSCAP;\n                      });\n                    }}\n                    label={\n                      <Fragment>\n                        <Title headingLevel=\"h4\" size=\"md\">\n                          Use OpenSCAP for Compliance policies\n                        </Title>\n                        <TextContent>\n                          <Text component=\"small\">\n                            Required to use Compliance application\n                          </Text>\n                        </TextContent>\n                      </Fragment>\n                    }\n                  />\n                </StackItem>\n                <StackItem>\n                  <Switch\n                    className=\"pf-u-mt-md\"\n                    key=\"enable-cloud-connector\"\n                    id=\"enable-cloud-connector\"\n                    ouiaId=\"enable-cloud-connector\"\n                    aria-label=\"Enable Cloud Connector\"\n                    isChecked={enableCloudConnector}\n                    onChange={() => {\n                      setEnableCloudConnector((prevValue) => {\n                        const newEnableCloudConnector = !prevValue;\n                        if (newEnableCloudConnector) {\n                          setConnectToInsights(() => true);\n                        }\n                        return newEnableCloudConnector;\n                      });\n                    }}\n                    label={\n                      <Fragment>\n                        <Title headingLevel=\"h4\" size=\"md\">\n                          Enable Cloud Connector to fix issues directly from\n                          Insights\n                        </Title>\n                        <TextContent>\n                          <Text component=\"small\">\n                            Cloud Connector allows you to push Remediation\n                            Ansible Playbooks directly from Insights to your\n                            systems.\n                          </Text>\n                        </TextContent>\n                      </Fragment>\n                    }\n                  />\n                </StackItem>\n              </Stack>\n            </div>\n          </StackItem>\n        </Stack>\n      </StackItem>\n    </Stack>\n  );\n};\n\nServices.propTypes = {\n  setMadeChanges: propTypes.func.isRequired,\n  defaults: propTypes.shape({\n    useOpenSCAP: propTypes.bool,\n    hasInsights: propTypes.bool,\n    enableCloudConnector: propTypes.bool,\n  }),\n  onChange: propTypes.func.isRequired,\n  madeChanges: propTypes.bool,\n  setConfirmChangesOpen: propTypes.func.isRequired,\n};\n\nServices.defaultProps = {\n  defaults: {\n    useOpenSCAP: false,\n    hasInsights: false,\n    enableCloudConnector: false,\n  },\n};\n\nexport default Services;\n","import React, {\n  Suspense,\n  useEffect,\n  useRef,\n  useState,\n  lazy,\n  Fragment,\n  useContext,\n} from 'react';\nimport {\n  Button,\n  Flex,\n  Level,\n  LevelItem,\n  Stack,\n  StackItem,\n  Text,\n  Title,\n  Spinner,\n  Bullseye,\n  Skeleton,\n  Tabs,\n  Tab,\n  TabTitleText,\n  Label,\n  SplitItem,\n  Split,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport './dashboard.scss';\nimport ConfirmChangesModal from '../../Components/ConfirmChangesModal';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport activeStateReducer from '../../store/currStateReducer';\nimport logReducer from '../../store/logReducer';\nimport connectedSystemsReducer from '../../store/connectedSystems';\nimport {\n  fetchCurrState,\n  saveCurrState,\n  fetchConnectedHosts,\n} from '../../store/actions';\nimport { useHistory, Route } from 'react-router-dom';\nimport pckg from '../../../package.json';\nimport NoSystemsAlert from '../../Components/NoSytemsAlert';\nimport ActivationKeys from '../../Components/ActivationKeys';\nimport Services from '../../Components/Services/Services';\nimport { RegistryContext } from '../../store';\n\nconst { routes: paths } = pckg;\n\nconst ConnectSystemsModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"ConnectSystemsModal\" */ '../../Components/ConnectSystemsModal/ConnectSystemsModal'\n  )\n);\n\nconst ConnectLog = lazy(() =>\n  import(/* webpackChunkName: \"ConnectLog\" */ '../../Components/ConnectLog')\n);\n\nconst SamplePage = () => {\n  const history = useHistory();\n  const { getRegistry } = useContext(RegistryContext);\n  const [activeTabKey, setActiveTabKey] = useState('services');\n  const [confirmChangesOpen, setConfirmChangesOpen] = useState(false);\n  const [isGuideOpen, setIsGuideOpen] = useState(true);\n  const [madeChanges, setMadeChanges] = useState(false);\n  const dataRef = useRef();\n  const dispatch = useDispatch();\n\n  const activeStateLoaded = useSelector(\n    ({ activeStateReducer }) => activeStateReducer?.loaded\n  );\n  const { useOpenSCAP, enableCloudConnector, hasInsights } = useSelector(\n    ({ activeStateReducer }) => ({\n      useOpenSCAP: activeStateReducer?.values?.useOpenSCAP,\n      enableCloudConnector: activeStateReducer?.values?.enableCloudConnector,\n      hasInsights: activeStateReducer?.values?.hasInsights,\n    }),\n    shallowEqual\n  );\n  const { systemsLoaded, systemsCount } = useSelector(\n    ({ connectedSystemsReducer }) => ({\n      systemsLoaded: connectedSystemsReducer?.loaded,\n      systemsCount: connectedSystemsReducer?.total,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    getRegistry().register({\n      activeStateReducer,\n      logReducer,\n      connectedSystemsReducer,\n    });\n    dispatch(fetchCurrState());\n    dispatch(fetchConnectedHosts());\n  }, [getRegistry]);\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('cloud-connector-dashboard');\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Route\n        exact\n        path={paths.connectSystemsModal}\n        render={() => (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <ConnectSystemsModal />\n          </Suspense>\n        )}\n      />\n      <Route\n        exact\n        path={paths.logModal}\n        render={() => (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <ConnectLog />\n          </Suspense>\n        )}\n      />\n      <PageHeader>\n        <PageHeaderTitle\n          title={\n            <Split hasGutter>\n              <SplitItem>Red Hat connector Dashboard</SplitItem>\n              <SplitItem isFilled>\n                <Label color=\"cyan\">Tech preview</Label>\n              </SplitItem>\n              <SplitItem>\n                <Button\n                  variant=\"primary\"\n                  onClick={() => history.push(paths.connectSystemsModal)}\n                >\n                  Connect systems\n                </Button>\n              </SplitItem>\n            </Split>\n          }\n        />\n      </PageHeader>\n      <Main>\n        <Fragment>\n          {systemsLoaded && systemsCount === 0 && isGuideOpen && (\n            <NoSystemsAlert handleClose={() => setIsGuideOpen(false)} />\n          )}\n        </Fragment>\n        <div className=\"dashboard__content\">\n          <Stack className=\"pf-u-p-md\">\n            <StackItem>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h3\" size=\"md\">\n                    Systems connected with Red Hat connector\n                  </Title>\n                  <Flex\n                    alignContent={{ default: 'alignContentCenter' }}\n                    alignItems={{ default: 'alignItemsCenter' }}\n                  >\n                    {systemsLoaded ? (\n                      <Title headingLevel=\"h3\" size=\"2xl\">\n                        {systemsCount}\n                      </Title>\n                    ) : (\n                      <Skeleton width=\"33%\" />\n                    )}\n\n                    {!activeStateLoaded &&\n                      useOpenSCAP !== undefined &&\n                      enableCloudConnector !== undefined && (\n                        <Text\n                          className=\"dashboard__in-progress-text\"\n                          component=\"small\"\n                        >\n                          <InProgressIcon />\n                          &nbsp;Changes being applied\n                        </Text>\n                      )}\n                  </Flex>\n                  <a href=\"./insights/inventory\">View in Inventory</a>\n                </LevelItem>\n              </Level>\n            </StackItem>\n          </Stack>\n          <Tabs\n            activeKey={activeTabKey}\n            onSelect={(_event, activeTabKey) => setActiveTabKey(activeTabKey)}\n          >\n            <Tab\n              title={<TabTitleText>Services</TabTitleText>}\n              eventKey=\"services\"\n            >\n              {activeStateLoaded ||\n              (useOpenSCAP !== undefined &&\n                enableCloudConnector !== undefined) ? (\n                <Services\n                  madeChanges={madeChanges}\n                  setConfirmChangesOpen={setConfirmChangesOpen}\n                  setMadeChanges={setMadeChanges}\n                  defaults={{\n                    useOpenSCAP,\n                    enableCloudConnector,\n                    hasInsights,\n                  }}\n                  onChange={(data) => {\n                    dataRef.current = data;\n                  }}\n                />\n              ) : (\n                <Bullseye>\n                  <Spinner className=\"pf-u-p-lg\" size=\"xl\" />\n                </Bullseye>\n              )}\n            </Tab>\n            <Tab\n              eventKey=\"activation-keys\"\n              title={<TabTitleText>Activation keys</TabTitleText>}\n            >\n              <div className=\"pf-u-m-md\">\n                <ActivationKeys />\n              </div>\n            </Tab>\n          </Tabs>\n        </div>\n      </Main>\n      <ConfirmChangesModal\n        isOpen={confirmChangesOpen}\n        handleCancel={() => setConfirmChangesOpen(false)}\n        systemsCount={systemsCount}\n        data={dataRef.current}\n        handleConfirm={() => {\n          setConfirmChangesOpen(false);\n          (async () => {\n            const saveAction = saveCurrState(dataRef.current);\n            dispatch(saveAction);\n            await saveAction.payload;\n            dispatch(\n              addNotification({\n                variant: 'success',\n                title: 'Changes saved',\n                description:\n                  'Your service enablement changes were applied to connected systems',\n              })\n            );\n            setMadeChanges(false);\n          })();\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default SamplePage;\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst INVENTORY_BASE = '/api/inventory/v1';\n\nexport const getConnectedHosts = () =>\n  instance.get(\n    `${INVENTORY_BASE}/hosts?filter[system_profile][rhc_client_id]=not_nil&fields[system_profile]=rhc_client_id,rhc_config_state&staleness=fresh&staleness=stale&&registered_with=insights`\n  );\n","export const CONNECTOR_API_BASE = '/api/config-manager/v1';\n\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { DefaultApi } from '@redhat-cloud-services/config-manager-client';\n\nexport * from './inventory';\n\nexport const configApi = new DefaultApi(\n  undefined,\n  CONNECTOR_API_BASE,\n  instance\n);\n\nexport const updateCurrState = ({\n  useOpenSCAP,\n  enableCloudConnector,\n  hasInsights,\n}) => {\n  return configApi.updateStates({\n    compliance_openscap: useOpenSCAP ? 'enabled' : 'disabled',\n    insights:\n      useOpenSCAP || enableCloudConnector || hasInsights\n        ? 'enabled'\n        : 'disabled',\n    remediations: enableCloudConnector ? 'enabled' : 'disabled',\n  });\n};\n","// Current state actions\nexport const GET_CURR_STATE = 'GET_CURR_STATE';\nexport const SET_CURR_STATE = 'SET_CURR_STATE';\n\n// Log view actions\nexport const GET_LOG = 'GET_LOG';\n\n// Connected hosts\nexport const GET_CONNECTED_HOSTS = 'GET_CONNECTED_HOSTS';\n","import { configApi, updateCurrState, getConnectedHosts } from '../api';\nimport {\n  GET_CURR_STATE,\n  GET_LOG,\n  SET_CURR_STATE,\n  GET_CONNECTED_HOSTS,\n} from './actionTypes';\n\nexport const fetchCurrState = () => ({\n  type: GET_CURR_STATE,\n  payload: configApi.getCurrentState(),\n});\n\nexport const saveCurrState = (data) => ({\n  type: SET_CURR_STATE,\n  payload: updateCurrState(data),\n});\n\nexport const fetchLog = ({ perPage = 50, page = 1 } = {}) => ({\n  type: GET_LOG,\n  payload: configApi.getStates(perPage, (page - 1) * perPage),\n});\n\nexport const fetchConnectedHosts = () => ({\n  type: GET_CONNECTED_HOSTS,\n  payload: getConnectedHosts(),\n});\n","export const pluralize = (count, str, fallback) =>\n  count > 1 ? fallback || str + 's' : str;\n\nexport const downloadFile = (\n  data,\n  filename = `${new Date().toISOString()}`\n) => {\n  const type = 'data:text/plain;charset=utf-8,';\n  const blob = new Blob([data], { type });\n  const link = document.createElement('a');\n  link.setAttribute('href', URL.createObjectURL(blob));\n  link.setAttribute('download', `${filename}.yml`);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n"],"names":["FormHelperText","isHidden","className","FormGroup","label","Tooltip","position","content","Stack","hasGutter","StackItem","helperText","ClipboardCopy","ConfirmChangesModal","isOpen","handleCancel","handleConfirm","systemsCount","data","Modal","variant","title","onClose","actions","Button","key","type","onClick","TextContent","Text","component","pluralize","configApi","compliance_openscap","useOpenSCAP","insights","hasInsights","remediations","enableCloudConnector","playbook","downloadFile","propTypes","PropTypes","currStatePending","state","loaded","currStateFulfilled","payload","values","applyReducerHash","SET_CURR_STATE","GET_CURR_STATE","error","GET_LOG","results","GET_CONNECTED_HOSTS","hosts","total","count","page","perPage","per_page","NoSystemsAlert","handleClose","Alert","Title","headingLevel","size","actionClose","AlertActionCloseButton","isInline","customIcon","Fragment","target","rel","href","Form","onSubmit","event","preventDefault","Grid","GridItem","sm","md","lg","Bullseye","EmptyState","EmptyStateIcon","icon","LockIcon","paths","pckg","Services","setMadeChanges","defaults","onChange","madeChanges","setConfirmChangesOpen","push","useHistory","systemsLoaded","useSelector","connectedSystemsReducer","shallowEqual","useState","connectToInsights","setConnectToInsights","setUseOpenSCAP","setEnableCloudConnector","useEffect","Level","LevelItem","ouiaId","isDisabled","logModal","Switch","id","isChecked","newHasInsights","prevValue","newUseOpenSCAP","newEnableCloudConnector","defaultProps","ConnectSystemsModal","lazy","ConnectLog","history","getRegistry","useContext","RegistryContext","activeTabKey","setActiveTabKey","confirmChangesOpen","isGuideOpen","setIsGuideOpen","dataRef","useRef","dispatch","useDispatch","activeStateLoaded","activeStateReducer","register","logReducer","fetchCurrState","fetchConnectedHosts","chrome","appAction","Route","exact","path","connectSystemsModal","render","Suspense","fallback","Spinner","PageHeader","PageHeaderTitle","Split","SplitItem","isFilled","Label","color","Main","Flex","alignContent","default","alignItems","Skeleton","width","undefined","Tabs","activeKey","onSelect","_event","Tab","TabTitleText","eventKey","current","saveAction","saveCurrState","addNotification","description","getConnectedHosts","instance","DefaultApi","updateCurrState","updateStates","fetchLog","str","filename","Date","toISOString","blob","Blob","link","document","createElement","setAttribute","URL","createObjectURL","style","visibility","body","appendChild","click","removeChild"],"sourceRoot":""}