{"version":3,"file":"js/612.4ff73581884ed33e7012.js","mappings":"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","sources":["webpack:///./src/hooks/useRbacPermissions.js","webpack:///./src/utils/platformServices.js","webpack:///./src/Components/Authentication/Authentication.js","webpack:///./src/hooks/useUser.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Components/LoadingState/Loading.js","webpack:///./src/store/index.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst getUserRbacPermissions = async () => {\n  return Promise.resolve(\n    window.insights.chrome.getUserPermissions('config-manager')\n  ).then((rawRbacPermissions) => {\n    const permissions = rawRbacPermissions.map(\n      (rawPermission) => rawPermission.permission\n    );\n    const rbacPermissions = {\n      canReadActivationKeys:\n        permissions.includes('config-manager:activation_keys:read') ||\n        permissions.includes('config-manager:activation_keys:*'),\n      canWriteActivationKeys:\n        permissions.includes('config-manager:activation_keys:write') ||\n        permissions.includes('config-manager:activation_keys:*'),\n    };\n\n    return rbacPermissions;\n  });\n};\n\nconst useRbacPermissions = () => {\n  return useQuery('rbac_permissions', () => getUserRbacPermissions());\n};\n\nexport { getUserRbacPermissions, useRbacPermissions as default };\n","const authenticateUser = () => {\n  try {\n    return window.insights.chrome.auth.getUser();\n  } catch (e) {\n    throw new Error(`Error authenticating user: ${e.message}`);\n  }\n};\n\nexport { authenticateUser };\n","import React, { useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { useLocation } from 'react-router-dom';\nimport useUser from '../../hooks/useUser';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nconst Authentication = ({ children }) => {\n  const queryClient = useQueryClient();\n  const location = useLocation();\n\n  const { isLoading, isFetching, isSuccess, isError } = useUser();\n\n  useEffect(() => {\n    /**\n     * On every rerender, based on URL change (location.pathname),\n     * reset the user's status to loading before authenticating again.\n     */\n    queryClient.invalidateQueries('user');\n  }, [location.pathname]);\n\n  isSuccess && window.insights?.chrome?.hideGlobalFilter();\n\n  if (isError === true) {\n    return <Unavailable />;\n  } else if (isLoading === true || isFetching === true) {\n    return <Loading />;\n  } else if (isSuccess === true) {\n    return <>{children}</>;\n  }\n};\n\nexport default Authentication;\n","import { useQuery } from 'react-query';\nimport { getUserRbacPermissions } from '../hooks/useRbacPermissions';\nimport { authenticateUser } from '../utils/platformServices';\n\nconst getUser = () => {\n  return Promise.all([authenticateUser(), getUserRbacPermissions()]).then(\n    ([userStatus, rbacPermissions]) => {\n      const user = {\n        accountNumber: userStatus.identity.account_number,\n        orgId: userStatus?.identity?.internal?.org_id,\n        rbacPermissions: rbacPermissions,\n      };\n      return user;\n    }\n  );\n};\n\nconst useUser = () => {\n  return useQuery('user', () => getUser());\n};\n\nexport { getUser, useUser as default };\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport pckg from '../package.json';\nimport Authentication from './Components/Authentication/Authentication';\nconst { routes: paths } = pckg;\n\nconst Dashboard = lazy(() =>\n  import(/* webpackChunkName: \"Dashboard\" */ './Routes/Dashboard')\n);\n\nconst ActivationKeys = lazy(() => import('./Components/ActivationKeys'));\n\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Authentication>\n      <Switch>\n        <Route path={paths.activationKeys} component={ActivationKeys} />\n        <Route path={paths.connector} component={Dashboard} />\n      </Switch>\n    </Authentication>\n  </Suspense>\n);\n","import React, { useEffect, useContext, useMemo } from 'react';\nimport { Routes } from './Routes';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { RegistryContext } from './store';\nimport { useHistory } from 'react-router-dom';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 3,\n      retryDelay: 10 * 1000,\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    },\n  },\n});\n\nconst App = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const history = useHistory();\n  useEffect(() => {\n    getRegistry().register({ notifications: notificationsReducer });\n  }, [getRegistry]);\n\n  const appNavClick = useMemo(\n    () => ({\n      settings(redirect) {\n        insights?.chrome?.appNavClick({ id: 'settings', redirect });\n      },\n      activationKeys(redirect) {\n        insights?.chrome?.appNavClick({ id: 'activationKeys', redirect });\n      },\n    }),\n    []\n  );\n\n  useEffect(() => {\n    insights.chrome.init();\n    insights.chrome.identifyApp('connector');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event.domEvent) {\n        history.push(`/${event.navId}`);\n        appNavClick[event.navId] !== undefined\n          ? appNavClick[event.navId](true)\n          : appNavClick.settings(true);\n      }\n    });\n    return () => unregister();\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <NotificationsPortal />\n      <Routes />\n    </QueryClientProvider>\n  );\n};\nexport default App;\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst Loading = () => {\n  return (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default Loading;\n","import { createContext } from 'react';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"names":["getUserRbacPermissions","Promise","resolve","window","insights","chrome","getUserPermissions","then","rawRbacPermissions","permissions","map","rawPermission","permission","canReadActivationKeys","includes","canWriteActivationKeys","authenticateUser","auth","getUser","e","Error","message","children","queryClient","useQueryClient","location","useLocation","useQuery","all","userStatus","rbacPermissions","accountNumber","identity","account_number","orgId","internal","org_id","isLoading","isFetching","isSuccess","isError","useEffect","invalidateQueries","pathname","hideGlobalFilter","Unavailable","Loading","paths","pckg","Dashboard","lazy","ActivationKeys","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","activationKeys","component","connector","QueryClient","defaultOptions","queries","retry","retryDelay","staleTime","Infinity","refetchOnWindowFocus","refetchOnMount","getRegistry","useContext","RegistryContext","history","useHistory","register","notifications","notificationsReducer","appNavClick","useMemo","settings","redirect","id","init","identifyApp","unregister","on","event","domEvent","push","navId","undefined","QueryClientProvider","client","createContext","middleware","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}