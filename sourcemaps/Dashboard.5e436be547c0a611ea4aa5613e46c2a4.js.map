{"version":3,"file":"js/Dashboard.b4199e3afc1c563becad.js","mappings":"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","sources":["webpack:///./src/Components/FormGroups/CopyHelperText.js","webpack:///./src/Components/FormGroups/RegisterWithUserName.js","webpack:///./src/Components/FormGroups/RegisterWithActivationKey.js","webpack:///./src/Components/ActivationKeys/index.js","webpack:///./src/Components/ConfirmChangesModal/index.js","webpack:///./src/Components/NoSytemsAlert/index.js","webpack:///./src/Components/Services/Services.js","webpack:///./src/store/connectedSystems.js","webpack:///./src/store/currStateReducer.js","webpack:///./src/store/logReducer.js","webpack:///./src/Routes/Dashboard/index.js","webpack:///./src/api/inventory.js","webpack:///./src/api/index.js","webpack:///./src/store/actionTypes.js","webpack:///./src/store/actions.js","webpack:///./src/utils/helpers.js"],"sourcesContent":["import { FormHelperText } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst CopyHelperText = () => (\n  <FormHelperText isHidden={false} className=\"pf-u-mt-sm\">\n    Click the <CopyIcon /> icon on a row to copy the command\n  </FormHelperText>\n);\n\nexport default CopyHelperText;\n","import {\n  ClipboardCopy,\n  FormGroup,\n  Text,\n  TextContent,\n  Popover,\n} from '@patternfly/react-core';\nimport {\n  OutlinedQuestionCircleIcon,\n  ExternalLinkAltIcon,\n} from '@patternfly/react-icons';\nimport React from 'react';\nimport CopyHelperText from './CopyHelperText';\n\nconst RegisterWithUserName = () => {\n  return (\n    <FormGroup\n      label={\n        <span>\n          Register with a username and password&nbsp;\n          <Popover\n            position=\"right\"\n            bodyContent={\n              <TextContent>\n                <Text>\n                  Recommended for users with accounts with Simple Content Access\n                  (SCA) enabled. If SCA is not enabled for your account,\n                  subscriptions will be auto-attached.&nbsp;\n                  <Text\n                    href=\"https://access.redhat.com/articles/simple-content-access\"\n                    component=\"a\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Learn about Simple Content Access&nbsp;\n                    <ExternalLinkAltIcon />\n                  </Text>\n                </Text>\n                <Text>\n                  Any credentials of a user with a valid subscription can be\n                  used.\n                </Text>\n              </TextContent>\n            }\n          >\n            <OutlinedQuestionCircleIcon />\n          </Popover>\n        </span>\n      }\n      helperText={<CopyHelperText />}\n    >\n      <ClipboardCopy>\n        rhc connect -u &#60;username&#62; -p &#60;password&#62;\n      </ClipboardCopy>\n    </FormGroup>\n  );\n};\n\nexport default RegisterWithUserName;\n","import {\n  ClipboardCopy,\n  FormGroup,\n  Popover,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport CopyHelperText from './CopyHelperText';\nimport {\n  OutlinedQuestionCircleIcon,\n  ExternalLinkAltIcon,\n} from '@patternfly/react-icons';\n\nconst RegisterWithActivationKey = () => {\n  return (\n    <FormGroup\n      label={\n        <span>\n          Register with an activation key&nbsp;\n          <Popover\n            position=\"right\"\n            bodyContent={\n              <TextContent>\n                <Text>\n                  Recommended for most users, and accounts who do not have\n                  Simple Content Access (SCA) enabled. Activation keys allow\n                  systems to be associated with specific subscriptions and\n                  service levels.\n                </Text>\n                <Text className=\"pf-u-mb-0\">\n                  Activation key: Organization administrators can view, create,\n                  and edit activation keys through&nbsp;\n                  <Text\n                    href=\"https://access.redhat.com/management/activation_keys\"\n                    component=\"a\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Red Hat Subscription Management&nbsp;\n                    <ExternalLinkAltIcon />\n                  </Text>\n                  on the Customer Portal.\n                </Text>\n                <Text>\n                  Organization ID: The organization ID is a Candlepin-specific\n                  identifier, and can be accessed through the Customer Portal on\n                  the&nbsp;\n                  <Text\n                    href=\"https://access.redhat.com/management/activation_keys\"\n                    component=\"a\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    activation keys&nbsp;\n                    <ExternalLinkAltIcon />\n                  </Text>\n                  &nbsp;page.\n                </Text>\n              </TextContent>\n            }\n          >\n            <OutlinedQuestionCircleIcon />\n          </Popover>\n        </span>\n      }\n      helperText={<CopyHelperText />}\n    >\n      <ClipboardCopy>\n        rhc connect -a &#60;activation-key&#62; -o&nbsp;\n        &#60;organization-id&#62;\n      </ClipboardCopy>\n    </FormGroup>\n  );\n};\n\nexport default RegisterWithActivationKey;\n","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\n\nconst ActivationKeys = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={LockIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        This feature is not currently supported\n      </Title>\n      <Button\n        component=\"a\"\n        variant=\"link\"\n        href=\"https://access.redhat.com/articles/simple-content-access\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        Customer portal\n      </Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default ActivationKeys;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { configApi } from '../../api';\nimport { Button, Modal, Text, TextContent } from '@patternfly/react-core';\nimport { pluralize, downloadFile } from '../../utils/helpers';\n\nconst ConfirmChangesModal = ({\n  isOpen = false,\n  handleCancel,\n  handleConfirm,\n  systemsCount,\n  data,\n}) => {\n  return (\n    <Modal\n      variant=\"small\"\n      title=\"Confirm changes\"\n      isOpen={isOpen}\n      onClose={handleCancel}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"button\"\n          onClick={handleConfirm}\n        >\n          Confirm changes\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text component=\"p\">\n          Your changes applies to{' '}\n          <b>\n            {systemsCount} connected {pluralize(systemsCount, 'system')}\n          </b>\n          . Selected settings will also be applied to <b>all future systems</b>{' '}\n          that are connect through Red Hat Connect (rhc).\n        </Text>\n        <Text component=\"p\" className=\"pf-u-mb-sm\">\n          Upon confirmation, an Ansible Playbook will be pushed to{' '}\n          {systemsCount} {pluralize(systemsCount, 'system')} to apply changes.\n        </Text>\n      </TextContent>\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          (async () => {\n            const playbook = await configApi.getPlaybookPreview({\n              compliance_openscap: data.useOpenSCAP ? 'enabled' : 'disabled',\n              insights: data.hasInsights ? 'enabled' : 'disabled',\n              remediations: data.enableCloudConnector ? 'enabled' : 'disabled',\n            });\n            downloadFile(playbook);\n          })();\n        }}\n      >\n        View playbook\n      </Button>\n    </Modal>\n  );\n};\n\nConfirmChangesModal.propTypes = {\n  isOpen: PropTypes.bool,\n  handleConfirm: PropTypes.func.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  systemsCount: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    useOpenSCAP: PropTypes.bool,\n    enableCloudConnector: PropTypes.bool,\n    hasInsights: PropTypes.bool,\n  }),\n};\n\nexport default ConfirmChangesModal;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Form,\n  Grid,\n  GridItem,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport { RegisterWithActivationKey, RegisterWithUserName } from '../FormGroups';\n\nconst NoSystemsAlert = ({ handleClose }) => (\n  <Alert\n    title={\n      <Title headingLevel=\"h2\" size=\"xl\">\n        Red Hat connector (RHC)\n      </Title>\n    }\n    actionClose={<AlertActionCloseButton onClick={handleClose} />}\n    isInline\n    customIcon={<Fragment />}\n    className=\"pf-u-mb-lg\"\n  >\n    <TextContent>\n      <Text>\n        Red Hat connector allows you to register with Red Hat Subscription\n        Management (RHSM), connect to Red Hat Insights, and manage your Insights\n        connections with one command.\n      </Text>\n      <Text>\n        Red Hat connector connects RHEL 7.9+ and 8.4+ systems. To register other\n        systems with RHSM or Insights, check out the&nbsp;\n        <a\n          target=\"_blank\"\n          rel=\"noreferer noopener\"\n          href=\"./insights/registration\"\n        >\n          Registration Assistant\n        </a>\n        .\n      </Text>\n      <Form onSubmit={(event) => event.preventDefault()}>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <RegisterWithActivationKey />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            <RegisterWithUserName />\n          </GridItem>\n        </Grid>\n      </Form>\n    </TextContent>\n  </Alert>\n);\n\nNoSystemsAlert.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n};\n\nexport default NoSystemsAlert;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  Button,\n  Level,\n  LevelItem,\n  Stack,\n  StackItem,\n  Switch,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport propTypes from 'prop-types';\n\nimport pckg from '../../../package.json';\nimport '@patternfly/react-styles/css/components/Table/table.css';\n\nconst { routes: paths } = pckg;\n\nconst Services = ({\n  setMadeChanges,\n  defaults,\n  onChange,\n  madeChanges,\n  setConfirmChangesOpen,\n}) => {\n  const { push } = useHistory();\n  const { systemsLoaded } = useSelector(\n    ({ connectedSystemsReducer }) => ({\n      systemsLoaded: connectedSystemsReducer?.loaded,\n    }),\n    shallowEqual\n  );\n  const [connectToInsights, setConnectToInsights] = useState(\n    defaults.hasInsights ||\n      defaults.useOpenSCAP ||\n      defaults.enableCloudConnector\n  );\n  const [useOpenSCAP, setUseOpenSCAP] = useState(defaults.useOpenSCAP);\n  const [enableCloudConnector, setEnableCloudConnector] = useState(\n    defaults.enableCloudConnector\n  );\n\n  useEffect(() => {\n    setMadeChanges(\n      connectToInsights !== defaults.hasInsights ||\n        useOpenSCAP !== defaults.useOpenSCAP ||\n        enableCloudConnector != defaults.enableCloudConnector\n    );\n    onChange({ useOpenSCAP, enableCloudConnector });\n  }, [useOpenSCAP, enableCloudConnector, connectToInsights]);\n\n  return (\n    <Stack hasGutter className=\"pf-u-p-md\">\n      <StackItem>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\" size=\"2xl\">\n              Red Hat Insights\n            </Title>\n          </LevelItem>\n          <LevelItem>\n            <Button\n              ouiaId=\"primary-save-button\"\n              isDisabled={!systemsLoaded || !madeChanges}\n              onClick={() => setConfirmChangesOpen(true)}\n            >\n              Save changes\n            </Button>\n            <Button onClick={() => push(paths.logModal)} variant=\"link\">\n              View log\n            </Button>\n          </LevelItem>\n        </Level>\n        <TextContent className=\"pf-u-mt-md\">\n          <Text component=\"p\">\n            Red Hat Insights is a proactive operational efficiency and security\n            risk management solution in Red Hat Enterprise Linux (RHEL)\n            subscriptions for versions 6.4 and higher, as well as public cloud\n            versions of RHEL. It helps identify, prioritize, and resolve risks\n            to security, compliance, performance, availability, and stability\n            before they become urgent issues. Insights also enables users to\n            monitor for adherence to internal policies and understand\n            configuration changes over time.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Title headingLevel=\"h3\" size=\"xl\">\n          Settings\n        </Title>\n        <Stack hasGutter className=\"pf-u-mt-lg\">\n          <StackItem>\n            <Switch\n              id=\"connect-to-insights\"\n              ouiaId=\"connect-to-insights\"\n              aria-label=\"Connect to Red Hat Insights\"\n              isChecked={connectToInsights}\n              onChange={() => {\n                const newHasInsights = !connectToInsights;\n                setConnectToInsights(() => newHasInsights);\n                if (!newHasInsights) {\n                  setUseOpenSCAP(() => false);\n                  setEnableCloudConnector(() => false);\n                }\n              }}\n              label={\n                <Fragment>\n                  <Title headingLevel=\"h4\" size=\"md\">\n                    Connect to Red Hat Insights\n                  </Title>\n                  <TextContent>\n                    <Text component=\"small\">\n                      Required to use Insights applications. Enables Advisor,\n                      Drift, Patch, Vulnerability and Policies applications.\n                    </Text>\n                  </TextContent>\n                </Fragment>\n              }\n            />\n            <div className=\"pf-u-pl-3xl\">\n              <Stack>\n                <StackItem>\n                  <Switch\n                    className=\"pf-u-mt-md\"\n                    key=\"use-openscap\"\n                    id=\"use-openscap\"\n                    ouiaId=\"use-openscap\"\n                    aria-label=\"Use OpenSCAP for Compliance policies\"\n                    isChecked={useOpenSCAP}\n                    onChange={() => {\n                      setUseOpenSCAP((prevValue) => {\n                        const newUseOpenSCAP = !prevValue;\n                        setConnectToInsights(() => true);\n                        return newUseOpenSCAP;\n                      });\n                    }}\n                    label={\n                      <Fragment>\n                        <Title headingLevel=\"h4\" size=\"md\">\n                          Use OpenSCAP for Compliance policies\n                        </Title>\n                        <TextContent>\n                          <Text component=\"small\">\n                            Required to use Compliance application\n                          </Text>\n                        </TextContent>\n                      </Fragment>\n                    }\n                  />\n                </StackItem>\n                <StackItem>\n                  <Switch\n                    className=\"pf-u-mt-md\"\n                    key=\"enable-cloud-connector\"\n                    id=\"enable-cloud-connector\"\n                    ouiaId=\"enable-cloud-connector\"\n                    aria-label=\"Enable Cloud Connector\"\n                    isChecked={enableCloudConnector}\n                    onChange={() => {\n                      setEnableCloudConnector((prevValue) => {\n                        const newEnableCloudConnector = !prevValue;\n                        if (newEnableCloudConnector) {\n                          setConnectToInsights(() => true);\n                        }\n                        return newEnableCloudConnector;\n                      });\n                    }}\n                    label={\n                      <Fragment>\n                        <Title headingLevel=\"h4\" size=\"md\">\n                          Enable Cloud Connector to fix issues directly from\n                          Insights\n                        </Title>\n                        <TextContent>\n                          <Text component=\"small\">\n                            Cloud Connector allows you to push Remediation\n                            Ansible Playbooks directly from Insights to your\n                            systems.\n                          </Text>\n                        </TextContent>\n                      </Fragment>\n                    }\n                  />\n                </StackItem>\n              </Stack>\n            </div>\n          </StackItem>\n        </Stack>\n      </StackItem>\n    </Stack>\n  );\n};\n\nServices.propTypes = {\n  setMadeChanges: propTypes.func.isRequired,\n  defaults: propTypes.shape({\n    useOpenSCAP: propTypes.bool,\n    hasInsights: propTypes.bool,\n    enableCloudConnector: propTypes.bool,\n  }),\n  onChange: propTypes.func.isRequired,\n  madeChanges: propTypes.bool,\n  setConfirmChangesOpen: propTypes.func.isRequired,\n};\n\nServices.defaultProps = {\n  defaults: {\n    useOpenSCAP: false,\n    hasInsights: false,\n    enableCloudConnector: false,\n  },\n};\n\nexport default Services;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CONNECTED_HOSTS } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst connectedSystemsPending = (state) => ({\n  ...state,\n  loaded: false,\n});\n\nconst connectedSystemsFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  hosts: payload?.results || [],\n  total: payload?.count || 0,\n  page: payload?.page || 0,\n  perPage: payload?.per_page || 0,\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_CONNECTED_HOSTS}_PENDING`]: connectedSystemsPending,\n    [`${GET_CONNECTED_HOSTS}_FULFILLED`]: connectedSystemsFulfilled,\n    [`${GET_CONNECTED_HOSTS}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CURR_STATE, SET_CURR_STATE } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst currStatePending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst currStateFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  values: {\n    useOpenSCAP: payload?.state?.compliance_openscap === 'enabled',\n    enableCloudConnector: payload?.state?.remediations === 'enabled',\n    hasInsights: payload?.state?.insights === 'enabled',\n  },\n});\n\nexport default applyReducerHash(\n  {\n    [`${SET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${SET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${GET_CURR_STATE}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_LOG } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  results: [],\n};\n\nconst logPending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst logFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  ...(payload || {}),\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_LOG}_PENDING`]: logPending,\n    [`${GET_LOG}_FULFILLED`]: logFulfilled,\n    [`${GET_LOG}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import {\n  Bullseye,\n  Button,\n  Spinner,\n  Split,\n  SplitItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, {\n  Fragment,\n  lazy,\n  Suspense,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Route, useHistory } from 'react-router-dom';\nimport pckg from '../../../package.json';\nimport ActivationKeys from '../../Components/ActivationKeys';\nimport ConfirmChangesModal from '../../Components/ConfirmChangesModal';\nimport NoSystemsAlert from '../../Components/NoSytemsAlert';\nimport Services from '../../Components/Services/Services';\nimport { RegistryContext } from '../../store';\nimport {\n  fetchConnectedHosts,\n  fetchCurrState,\n  saveCurrState,\n} from '../../store/actions';\nimport connectedSystemsReducer from '../../store/connectedSystems';\nimport activeStateReducer from '../../store/currStateReducer';\nimport logReducer from '../../store/logReducer';\nimport './dashboard.scss';\n\nconst { routes: paths } = pckg;\n\nconst ConnectSystemsModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"ConnectSystemsModal\" */ '../../Components/ConnectSystemsModal/ConnectSystemsModal'\n  )\n);\n\nconst ConnectLog = lazy(() =>\n  import(/* webpackChunkName: \"ConnectLog\" */ '../../Components/ConnectLog')\n);\n\nconst SamplePage = () => {\n  const history = useHistory();\n  const { getRegistry } = useContext(RegistryContext);\n  const [activeTabKey, setActiveTabKey] = useState('services');\n  const [confirmChangesOpen, setConfirmChangesOpen] = useState(false);\n  const [isGuideOpen, setIsGuideOpen] = useState(true);\n  const [madeChanges, setMadeChanges] = useState(false);\n  const dataRef = useRef();\n  const dispatch = useDispatch();\n\n  const activeStateLoaded = useSelector(\n    ({ activeStateReducer }) => activeStateReducer?.loaded\n  );\n  const { useOpenSCAP, enableCloudConnector, hasInsights } = useSelector(\n    ({ activeStateReducer }) => ({\n      useOpenSCAP: activeStateReducer?.values?.useOpenSCAP,\n      enableCloudConnector: activeStateReducer?.values?.enableCloudConnector,\n      hasInsights: activeStateReducer?.values?.hasInsights,\n    }),\n    shallowEqual\n  );\n  const { systemsLoaded, systemsCount } = useSelector(\n    ({ connectedSystemsReducer }) => ({\n      systemsLoaded: connectedSystemsReducer?.loaded,\n      systemsCount: connectedSystemsReducer?.total,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    getRegistry().register({\n      activeStateReducer,\n      logReducer,\n      connectedSystemsReducer,\n    });\n    dispatch(fetchCurrState());\n    dispatch(fetchConnectedHosts());\n  }, [getRegistry]);\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('cloud-connector-dashboard');\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Route\n        exact\n        path={paths.connectSystemsModal}\n        render={() => (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <ConnectSystemsModal />\n          </Suspense>\n        )}\n      />\n      <Route\n        exact\n        path={paths.logModal}\n        render={() => (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <ConnectLog />\n          </Suspense>\n        )}\n      />\n      <PageHeader>\n        <PageHeaderTitle\n          title={\n            <Split hasGutter>\n              <SplitItem isFilled>Red Hat connector Dashboard</SplitItem>\n              <SplitItem>\n                <Button\n                  variant=\"primary\"\n                  onClick={() => history.push(paths.connectSystemsModal)}\n                >\n                  Connect systems\n                </Button>\n              </SplitItem>\n              <SplitItem>\n                <Button variant=\"link\">\n                  <a href=\"./insights/inventory\">View systems in Inventory</a>\n                </Button>\n              </SplitItem>\n            </Split>\n          }\n        />\n      </PageHeader>\n      <Main>\n        <Fragment>\n          {systemsLoaded && systemsCount === 0 && isGuideOpen && (\n            <NoSystemsAlert handleClose={() => setIsGuideOpen(false)} />\n          )}\n        </Fragment>\n        <div className=\"dashboard__content\">\n          <Tabs\n            activeKey={activeTabKey}\n            onSelect={(_event, activeTabKey) => setActiveTabKey(activeTabKey)}\n          >\n            <Tab\n              title={<TabTitleText>Services</TabTitleText>}\n              eventKey=\"services\"\n            >\n              {activeStateLoaded ||\n              (useOpenSCAP !== undefined &&\n                enableCloudConnector !== undefined) ? (\n                <Services\n                  madeChanges={madeChanges}\n                  setConfirmChangesOpen={setConfirmChangesOpen}\n                  setMadeChanges={setMadeChanges}\n                  defaults={{\n                    useOpenSCAP,\n                    enableCloudConnector,\n                    hasInsights,\n                  }}\n                  onChange={(data) => {\n                    dataRef.current = data;\n                  }}\n                />\n              ) : (\n                <Bullseye>\n                  <Spinner className=\"pf-u-p-lg\" size=\"xl\" />\n                </Bullseye>\n              )}\n            </Tab>\n            <Tab\n              eventKey=\"activation-keys\"\n              title={<TabTitleText>Activation keys</TabTitleText>}\n            >\n              <div className=\"pf-u-m-md\">\n                <ActivationKeys />\n              </div>\n            </Tab>\n          </Tabs>\n        </div>\n      </Main>\n      <ConfirmChangesModal\n        isOpen={confirmChangesOpen}\n        handleCancel={() => setConfirmChangesOpen(false)}\n        systemsCount={systemsCount}\n        data={dataRef.current}\n        handleConfirm={() => {\n          setConfirmChangesOpen(false);\n          (async () => {\n            const saveAction = saveCurrState(dataRef.current);\n            dispatch(saveAction);\n            await saveAction.payload;\n            dispatch(\n              addNotification({\n                variant: 'success',\n                title: 'Changes saved',\n                description:\n                  'Your service enablement changes were applied to connected systems',\n              })\n            );\n            setMadeChanges(false);\n          })();\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default SamplePage;\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst INVENTORY_BASE = '/api/inventory/v1';\n\nexport const getConnectedHosts = () =>\n  instance.get(\n    `${INVENTORY_BASE}/hosts?filter[system_profile][rhc_client_id]=not_nil&fields[system_profile]=rhc_client_id,rhc_config_state&staleness=fresh&staleness=stale&&registered_with=insights`\n  );\n","export const CONNECTOR_API_BASE = '/api/config-manager/v1';\n\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { DefaultApi } from '@redhat-cloud-services/config-manager-client';\n\nexport * from './inventory';\n\nexport const configApi = new DefaultApi(\n  undefined,\n  CONNECTOR_API_BASE,\n  instance\n);\n\nexport const updateCurrState = ({\n  useOpenSCAP,\n  enableCloudConnector,\n  hasInsights,\n}) => {\n  return configApi.updateStates({\n    compliance_openscap: useOpenSCAP ? 'enabled' : 'disabled',\n    insights:\n      useOpenSCAP || enableCloudConnector || hasInsights\n        ? 'enabled'\n        : 'disabled',\n    remediations: enableCloudConnector ? 'enabled' : 'disabled',\n  });\n};\n","// Current state actions\nexport const GET_CURR_STATE = 'GET_CURR_STATE';\nexport const SET_CURR_STATE = 'SET_CURR_STATE';\n\n// Log view actions\nexport const GET_LOG = 'GET_LOG';\n\n// Connected hosts\nexport const GET_CONNECTED_HOSTS = 'GET_CONNECTED_HOSTS';\n","import { configApi, updateCurrState, getConnectedHosts } from '../api';\nimport {\n  GET_CURR_STATE,\n  GET_LOG,\n  SET_CURR_STATE,\n  GET_CONNECTED_HOSTS,\n} from './actionTypes';\n\nexport const fetchCurrState = () => ({\n  type: GET_CURR_STATE,\n  payload: configApi.getCurrentState(),\n});\n\nexport const saveCurrState = (data) => ({\n  type: SET_CURR_STATE,\n  payload: updateCurrState(data),\n});\n\nexport const fetchLog = ({ perPage = 50, page = 1 } = {}) => ({\n  type: GET_LOG,\n  payload: configApi.getStates(perPage, (page - 1) * perPage),\n});\n\nexport const fetchConnectedHosts = () => ({\n  type: GET_CONNECTED_HOSTS,\n  payload: getConnectedHosts(),\n});\n","export const pluralize = (count, str, fallback) =>\n  count > 1 ? fallback || str + 's' : str;\n\nexport const downloadFile = (\n  data,\n  filename = `${new Date().toISOString()}`\n) => {\n  const type = 'data:text/plain;charset=utf-8,';\n  const blob = new Blob([data], { type });\n  const link = document.createElement('a');\n  link.setAttribute('href', URL.createObjectURL(blob));\n  link.setAttribute('download', `${filename}.yml`);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n"],"names":["FormHelperText","isHidden","className","FormGroup","label","Popover","position","bodyContent","TextContent","Text","href","component","target","rel","helperText","ClipboardCopy","Bullseye","EmptyState","EmptyStateIcon","icon","LockIcon","Title","headingLevel","size","Button","variant","ConfirmChangesModal","isOpen","handleCancel","handleConfirm","systemsCount","data","Modal","title","onClose","actions","key","type","onClick","pluralize","configApi","compliance_openscap","useOpenSCAP","insights","hasInsights","remediations","enableCloudConnector","playbook","downloadFile","propTypes","PropTypes","NoSystemsAlert","handleClose","Alert","actionClose","AlertActionCloseButton","isInline","customIcon","Fragment","Form","onSubmit","event","preventDefault","Grid","hasGutter","GridItem","sm","md","lg","paths","pckg","Services","setMadeChanges","defaults","onChange","madeChanges","setConfirmChangesOpen","push","useHistory","systemsLoaded","useSelector","connectedSystemsReducer","loaded","shallowEqual","useState","connectToInsights","setConnectToInsights","setUseOpenSCAP","setEnableCloudConnector","useEffect","Stack","StackItem","Level","LevelItem","ouiaId","isDisabled","logModal","Switch","id","isChecked","newHasInsights","prevValue","newUseOpenSCAP","newEnableCloudConnector","defaultProps","applyReducerHash","GET_CONNECTED_HOSTS","state","payload","hosts","results","total","count","page","perPage","per_page","error","values","currStatePending","currStateFulfilled","SET_CURR_STATE","GET_CURR_STATE","GET_LOG","ConnectSystemsModal","lazy","ConnectLog","history","getRegistry","useContext","RegistryContext","activeTabKey","setActiveTabKey","confirmChangesOpen","isGuideOpen","setIsGuideOpen","dataRef","useRef","dispatch","useDispatch","activeStateLoaded","activeStateReducer","register","logReducer","fetchCurrState","fetchConnectedHosts","chrome","appAction","Route","exact","path","connectSystemsModal","render","Suspense","fallback","Spinner","PageHeader","PageHeaderTitle","Split","SplitItem","isFilled","Main","Tabs","activeKey","onSelect","_event","Tab","TabTitleText","eventKey","undefined","current","saveAction","saveCurrState","addNotification","description","getConnectedHosts","instance","DefaultApi","updateCurrState","updateStates","fetchLog","str","filename","Date","toISOString","blob","Blob","link","document","createElement","setAttribute","URL","createObjectURL","style","visibility","body","appendChild","click","removeChild"],"sourceRoot":""}