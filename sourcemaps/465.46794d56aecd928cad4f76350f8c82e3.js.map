{"version":3,"file":"js/465.b172be70df52111a354b.js","mappings":"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","sources":["webpack:///./src/hooks/useActivationKeys.js","webpack:///./src/Components/ActivationKeysTable/ActivationKeysTable.js","webpack:///./src/Components/ActivationKeys/no-access.js","webpack:///./src/Components/ActivationKeys/CreateActivationKeyButton.js","webpack:///./src/Components/EmptyState/NoActivationKeysFound.js","webpack:///./src/Components/EmptyState/index.js","webpack:///./src/hooks/useSystemPurposeAttributes.js","webpack:///./src/Components/Forms/ActivationKeysFormSelect.js","webpack:///./src/Components/Forms/CreateActivationKeyForm.js","webpack:///./src/hooks/useCreateActivationKey.js","webpack:///./src/Components/Modals/CreateActivationKeyModal.js","webpack:///./src/hooks/useDeleteActivationKey.js","webpack:///./src/Components/Modals/DeleteActivationKeyConfirmationModal.js","webpack:///./src/Components/ActivationKeysDocsPopover/ActivationKeysDocsPopover.js","webpack:///./src/Components/ActivationKeys/ActivationKeys.js","webpack:///./src/Components/ActivationKeys/index.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst fetchActivationKeysData = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKeys = async () => {\n  const keysData = await fetchActivationKeysData();\n  return keysData;\n};\n\nconst useActivationKeys = () => {\n  return useQuery('activation_keys', () => getActivationKeys());\n};\n\nexport { useActivationKeys as default };\n","import React from 'react';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ActionsColumn,\n} from '@patternfly/react-table';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport { useQueryClient } from 'react-query';\nimport { KebabToggle } from '@patternfly/react-core';\n\nconst ActivationKeysTable = (props) => {\n  const { actions } = props;\n  const columnNames = {\n    name: 'Key Name',\n    role: 'Role',\n    serviceLevel: 'SLA',\n    usage: 'Usage',\n  };\n  const { isLoading, error, data } = useActivationKeys();\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isActionsDisabled = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n\n  const customActionsToggle = (props) => (\n    <KebabToggle\n      onToggle={props.onToggle}\n      isDisabled={props.isDisabled}\n      className={props.isDisabled ? 'pf-m-disabled' : ''}\n    >\n      Actions\n    </KebabToggle>\n  );\n\n  const Results = () => {\n    return (\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th width={40}>{columnNames.name}</Th>\n            <Th>{columnNames.role}</Th>\n            <Th>{columnNames.serviceLevel}</Th>\n            <Th>{columnNames.usage}</Th>\n            <Td></Td>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {data.map((datum) => {\n            let rowActions = actions(datum.name);\n            return (\n              <Tr key={datum.name} ouiaSafe={true}>\n                <Td modifier=\"breakWord\" dataLabel={columnNames.name}>\n                  {datum.name}\n                </Td>\n                <Td dataLabel={columnNames.role}>{datum.role}</Td>\n                <Td dataLabel={columnNames.serviceLevel}>\n                  {datum.serviceLevel}\n                </Td>\n                <Td dataLabel={columnNames.usage}>{datum.usage}</Td>\n                <Td isActionCell>\n                  <ActionsColumn\n                    items={rowActions}\n                    isDisabled={isActionsDisabled()}\n                    actionsToggle={customActionsToggle}\n                  />\n                </Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </TableComposable>\n    );\n  };\n\n  if (isLoading && !error) {\n    return <Loading />;\n  } else if (!isLoading && !error) {\n    return <Results />;\n  } else {\n    return <Unavailable />;\n  }\n};\n\nActivationKeysTable.propTypes = {\n  actions: propTypes.func,\n};\n\nexport default ActivationKeysTable;\n","import {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst NoAccessView = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={LockIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Activation keys can only be accessed by organization administrators.\n      </Title>\n      <EmptyStateBody>\n        If you already know your organization ID and activation key, you can\n        register systems with RHC.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoAccessView;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { useQueryClient } from 'react-query';\nimport PropTypes from 'prop-types';\n\nconst CreateActivationKeyButton = (props) => {\n  const { onClick } = props;\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isDisabled = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n  return (\n    <Button variant=\"primary\" onClick={onClick} isDisabled={isDisabled()}>\n      Create activation key\n    </Button>\n  );\n};\n\nCreateActivationKeyButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default CreateActivationKeyButton;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport CreateActivationKeyButton from '../ActivationKeys/CreateActivationKeyButton';\n\nconst NoActivationKeysFound = (props) => {\n  const { handleModalToggle } = props;\n  return (\n    <>\n      <EmptyState>\n        <EmptyStateIcon icon={AddCircleOIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          No activation keys\n        </Title>\n        <EmptyStateBody>\n          You currently have no activation keys to display. Activation keys\n          allow you to register a system with system purpose, role and usage\n          attached.\n        </EmptyStateBody>\n        <CreateActivationKeyButton onClick={handleModalToggle} />\n      </EmptyState>\n    </>\n  );\n};\n\nNoActivationKeysFound.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n};\n\nexport default NoActivationKeysFound;\n","import NoActivationKeysFound from './NoActivationKeysFound';\n\nexport default NoActivationKeysFound;\n","import { useQuery } from 'react-query';\n\nconst fetchSystemPurposeAttributes = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch(\n    '/api/rhsm/v2/organization?include=system_purpose_attributes',\n    {\n      headers: { Authorization: `Bearer ${token}` },\n    }\n  );\n\n  const responseData = await response.json();\n\n  return responseData.body;\n};\n\nconst getSystemPurposeAttributes = async () => {\n  const data = await fetchSystemPurposeAttributes();\n  return data.systemPurposeAttributes;\n};\n\nconst useSystemPurposeAttributes = () => {\n  return useQuery('organization_system_purpose_attributes', () =>\n    getSystemPurposeAttributes()\n  );\n};\n\nexport { useSystemPurposeAttributes as default };\n","import React, { useState } from 'react';\nimport {\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n} from '@patternfly/react-core';\n\nimport PropTypes from 'prop-types';\n\nconst ActivationKeysFormSelect = (props) => {\n  const {\n    label,\n    popover,\n    data,\n    onSelect,\n    helperText,\n    name,\n    placeholderValue,\n  } = props;\n  const [selected, setSelected] = useState('');\n  const options = data.map((role) => {\n    return <FormSelectOption key={role} value={role} label={role} />;\n  });\n  const valueChange = (value) => {\n    setSelected(value);\n    onSelect(value);\n  };\n\n  return (\n    <FormGroup label={label} labelIcon={popover} helperText={helperText}>\n      <FormSelect\n        onChange={valueChange}\n        value={selected}\n        name={name}\n        aria-label={placeholderValue}\n      >\n        <FormSelectOption label={placeholderValue} isPlaceholder={true} />\n        {options}\n      </FormSelect>\n    </FormGroup>\n  );\n};\n\nActivationKeysFormSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  popover: PropTypes.element.isRequired,\n  helperText: PropTypes.string,\n  data: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  placeholderValue: PropTypes.string,\n};\n\nexport default ActivationKeysFormSelect;\n","import React, { useState } from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport useSystemPurposeAttributes from '../../hooks/useSystemPurposeAttributes';\nimport ActivationKeysFormSelect from './ActivationKeysFormSelect';\nimport PropTypes from 'prop-types';\nimport useNotifications from '../../hooks/useNotifications';\n\nconst CreateActivationKeyForm = (props) => {\n  const { handleModalToggle, submitForm, isSuccess, isError } = props;\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const { isLoading, error, data } = useSystemPurposeAttributes();\n  const [name, setName] = useState('');\n  const [role, setRole] = useState('');\n  const [serviceLevel, setServiceLevel] = useState('');\n  const [usage, setUsage] = useState('');\n  const [validated, setValidated] = useState('default');\n  const nameRegex = '^[a-zA-Z0-9-_]*$';\n\n  const validationText =\n    'Provide a name to be used when registering the activation key. Your activation key name must be unique, may contain only numbers, letters, underscores, and hyphens, and less than 256 characters.';\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (validated === 'success') {\n      submitForm(name, role, serviceLevel, usage);\n    } else {\n      setValidated('error');\n    }\n  };\n\n  const validateName = (value) => {\n    if (value.length === 0 || value.length > 255) {\n      setValidated('error');\n    } else if (!value.match(nameRegex)) {\n      setValidated('error');\n    } else {\n      setValidated('success');\n      setName(value);\n    }\n  };\n\n  const createButtonDisabled = () => {\n    return validated === 'error' || name.length === 0 || !name.match(nameRegex);\n  };\n\n  if (isSuccess) {\n    addSuccessNotification('Activation Key was created successfully', {\n      timeout: false,\n    });\n    handleModalToggle();\n  } else if (isError) {\n    addErrorNotification('Activation Key was not created, please try again', {\n      timeout: 8000,\n    });\n    handleModalToggle();\n  }\n\n  return (\n    <Form id=\"create-activation-key-form\" onSubmit={handleSubmit}>\n      <FormGroup label=\"Name\" isRequired helperText={validationText}>\n        <TextInput\n          id=\"activation-key-name\"\n          label=\"Name\"\n          isRequired\n          type=\"text\"\n          validated={validated}\n          onChange={validateName}\n          name=\"name\"\n        />\n      </FormGroup>\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.roles}\n          onSelect={setRole}\n          label=\"Role\"\n          name=\"role\"\n          placeholderValue=\"Select role\"\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Role is used to categorize systems by the workload on the\n                    system\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Only roles available to your account are shown.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required role from the list. The list only contains roles available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.serviceLevel}\n          onSelect={setServiceLevel}\n          label=\"Service Level Agreement (SLA)\"\n          name=\"serviceLevel\"\n          placeholderValue=\"Select a service level agreement\"\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Service Level Agreement (SLA) determines the level of\n                    support for systems registered with this activation key.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required service level from the list. The list only contains service levels available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.usage}\n          onSelect={setUsage}\n          label=\"Usage\"\n          name=\"usage\"\n          placeholderValue=\"Select usage\"\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Usage is used to categorize systems by how they are meant to\n                    be used, and therefore supported.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required usage from the list. The list only contains usages available to the activation key.\"\n        />\n      )}\n      <ActionGroup>\n        <Button\n          key=\"create\"\n          id=\"create-activation-key-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={createButtonDisabled()}\n        >\n          Save\n        </Button>\n\n        <Button\n          key=\"cancel\"\n          id=\"cancel-create-activation-key-button\"\n          variant=\"link\"\n          onClick={handleModalToggle}\n        >\n          Cancel\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\n\nCreateActivationKeyForm.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  isSuccess: PropTypes.bool,\n  isError: PropTypes.bool,\n};\n\nexport default CreateActivationKeyForm;\n","import { useMutation } from 'react-query';\n\nconst activationKeyMutation = async (data) => {\n  const { name, role, serviceLevel, usage } = data;\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: name,\n      role: role,\n      serviceLevel: serviceLevel,\n      usage: usage,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error creating activation key: ${response.statusText}.`\n    );\n  }\n  return response.json();\n};\n\nconst useCreateActivationKey = () => {\n  return useMutation(activationKeyMutation);\n};\n\nexport { useCreateActivationKey as default };\n","import * as React from 'react';\nimport { Modal, ModalVariant } from '@patternfly/react-core';\nimport CreateActivationKeyForm from '../Forms/CreateActivationKeyForm';\nimport useCreateActivationKey from '../../hooks/useCreateActivationKey';\nimport propTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\n\nconst CreateActivationKeyModal = (props) => {\n  const queryClient = useQueryClient();\n  const [created, setCreated] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const { handleModalToggle, isOpen } = props;\n  const { mutate, isLoading } = useCreateActivationKey();\n  const submitForm = (name, role, serviceLevel, usage) => {\n    mutate(\n      { name, role, serviceLevel, usage },\n      {\n        onSuccess: () => {\n          setError(false);\n          setCreated(true);\n          queryClient.invalidateQueries('activation_keys');\n        },\n        onError: () => {\n          setError(true);\n          setCreated(false);\n        },\n      }\n    );\n  };\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title=\"Create new activation key\"\n      description=\"\"\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n    >\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <CreateActivationKeyForm\n          handleModalToggle={handleModalToggle}\n          submitForm={submitForm}\n          isSuccess={created}\n          isError={error}\n        />\n      )}\n    </Modal>\n  );\n};\n\nCreateActivationKeyModal.propTypes = {\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n};\n\nexport default CreateActivationKeyModal;\n","import { useMutation } from 'react-query';\nconst deleteActivationKeyMutation = async (name) => {\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch(`/api/rhsm/v2/activation_keys/${name}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error deleting activation key: ${response.statusText}.`\n    );\n  }\n};\n\nconst useDeleteActivationKey = () => {\n  return useMutation(deleteActivationKeyMutation);\n};\n\nexport { useDeleteActivationKey as default };\n","import * as React from 'react';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport useDeleteActivationKey from '../../hooks/useDeleteActivationKey';\nimport useNotifications from '../../hooks/useNotifications';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\n\nconst DeleteActivationKeyConfirmationModal = (props) => {\n  const { isOpen, handleModalToggle, name } = props;\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const { mutate, isLoading } = useDeleteActivationKey();\n  const queryClient = useQueryClient();\n\n  const deleteActivationKey = (name) => {\n    mutate(name, {\n      onSuccess: (_data, name) => {\n        queryClient.setQueryData('activation_keys', (oldData) =>\n          oldData.filter((entry) => entry.name != name)\n        );\n        addSuccessNotification(`Activation Key ${name} deleted`);\n        handleModalToggle();\n      },\n      onError: () => {\n        addErrorNotification('Something went wrong. Please try again');\n        handleModalToggle();\n      },\n    });\n    mutate;\n  };\n  const actions = [\n    <Button\n      key=\"confirm\"\n      variant=\"danger\"\n      onClick={() => deleteActivationKey(name)}\n      data-testid=\"delete-activation-key-confirmation-modal-confirm-button\"\n    >\n      Delete\n    </Button>,\n    <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n      Cancel\n    </Button>,\n  ];\n\n  const title = (\n    <>\n      <TextContent>\n        <Text component={TextVariants.h2}>\n          <ExclamationTriangleIcon size=\"md\" color=\"#F0AB00\" /> Delete\n          Activation Key?\n        </Text>\n      </TextContent>\n    </>\n  );\n  const content = () => {\n    if (isLoading) {\n      return <Loading />;\n    } else {\n      return (\n        <TextContent>\n          <Text component={TextVariants.p}>\n            <b>{name}</b> will no longer be available for use. This operation\n            cannot be undone.\n          </Text>\n        </TextContent>\n      );\n    }\n  };\n\n  return (\n    <Modal\n      title={title}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n      variant={ModalVariant.small}\n      actions={actions}\n    >\n      {content()}\n    </Modal>\n  );\n};\n\nDeleteActivationKeyConfirmationModal.propTypes = {\n  isOpen: propTypes.bool.isRequired,\n  handleModalToggle: propTypes.func.isRequired,\n  name: propTypes.string.isRequired,\n};\n\nexport default DeleteActivationKeyConfirmationModal;\n","import React from 'react';\nimport {\n  Button,\n  Popover,\n  PopoverPosition,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst ActivationKeysDocsPopover = (props) => {\n  const { orgId } = props;\n  return (\n    <Popover\n      headerContent=\"Activation Keys\"\n      position={PopoverPosition.rightStart}\n      bodyContent={\n        <TextContent>\n          <Text>\n            Activation keys assist you in registering systems. Metadata such as\n            role, system purpose, and usage can be automatically attached to\n            systems via an activation key, and monitored with\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={'https://console.redhat.com/insights/subscriptions/rhel'}\n            >\n              {' '}\n              Subscription Watch.\n            </a>\n          </Text>\n          <Text>\n            To register with an activation key, you will need your organization\n            ID: <b>{orgId}</b>\n          </Text>\n        </TextContent>\n      }\n    >\n      <Button variant=\"plain\" isInline style={{ padding: 0 }}>\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  );\n};\n\nexport default ActivationKeysDocsPopover;\n\nActivationKeysDocsPopover.propTypes = {\n  orgId: propTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  ActionGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ActivationKeysTable from '../ActivationKeysTable';\nimport { useQueryClient } from 'react-query';\nimport NoAccessView from './no-access';\nimport NoActivationKeysFound from '../EmptyState';\nimport CreateActivationKeyModal from '../Modals/CreateActivationKeyModal';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport CreateActivationKeyButton from './CreateActivationKeyButton';\nimport DeleteActivationKeyConfirmationModal from '../Modals/DeleteActivationKeyConfirmationModal';\nimport ActivationKeysDocsPopover from '../ActivationKeysDocsPopover';\nconst ActivationKeys = () => {\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const { isLoading, error, data } = useActivationKeys();\n  const [isOpen, setisOpen] = useState(false);\n  const [currentKeyName, setCurrentKeyName] = useState('');\n  const [\n    isDeleteActivationKeyModalOpen,\n    setIsDeleteActivationKeyModalOpen,\n  ] = useState(false);\n  const handleModalToggle = () => {\n    setisOpen(!isOpen);\n  };\n\n  const actions = (activationKeyName) => {\n    return [\n      {\n        title: 'Delete',\n        onClick: () => handleDeleteActivationKeyModalToggle(activationKeyName),\n      },\n    ];\n  };\n  let pageContent;\n  if (isLoading) {\n    pageContent = <Loading />;\n  } else if (!isLoading && !error && !data.length) {\n    pageContent = (\n      <NoActivationKeysFound handleModalToggle={handleModalToggle} />\n    );\n  } else if (!isLoading && !error && data.length) {\n    pageContent = (\n      <>\n        <ActionGroup>\n          <CreateActivationKeyButton onClick={handleModalToggle} />\n        </ActionGroup>\n        <ActivationKeysTable actions={actions} />\n      </>\n    );\n  }\n  const handleDeleteActivationKeyModalToggle = (name) => {\n    setCurrentKeyName(name);\n    setIsDeleteActivationKeyModalOpen(!isDeleteActivationKeyModalOpen);\n  };\n\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <Split hasGutter className=\"page-title\">\n            <SplitItem isFilled>\n              <Flex>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                  <PageHeaderTitle title=\"Activation Keys\" />\n                </FlexItem>\n                <FlexItem>\n                  <ActivationKeysDocsPopover orgId={user.orgId} />\n                </FlexItem>\n              </Flex>\n            </SplitItem>\n          </Split>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              Organization ID: {user.orgId}\n            </Text>\n          </TextContent>\n        </PageHeader>\n        <Main>\n          <PageSection variant={PageSectionVariants.light}>\n            {pageContent}\n          </PageSection>\n        </Main>\n        <CreateActivationKeyModal\n          isOpen={isOpen}\n          handleModalToggle={handleModalToggle}\n        />\n        <DeleteActivationKeyConfirmationModal\n          handleModalToggle={handleDeleteActivationKeyModalToggle}\n          isOpen={isDeleteActivationKeyModalOpen}\n          name={currentKeyName}\n        />\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKeys);\n","import ActivationKeys from './ActivationKeys';\n\nexport default ActivationKeys;\n"],"names":["fetchActivationKeysData","window","insights","chrome","auth","getToken","token","fetch","headers","Authorization","response","json","activationKeysData","body","getActivationKeys","keysData","useActivationKeys","useQuery","ActivationKeysTable","props","actions","columnNames","isLoading","error","data","user","useQueryClient","getQueryData","customActionsToggle","KebabToggle","onToggle","isDisabled","className","Results","TableComposable","Thead","Tr","ouiaSafe","Th","width","Td","Tbody","map","datum","rowActions","name","key","modifier","dataLabel","role","serviceLevel","usage","isActionCell","ActionsColumn","items","rbacPermissions","canWriteActivationKeys","actionsToggle","Loading","Unavailable","propTypes","Bullseye","EmptyState","EmptyStateIcon","icon","LockIcon","Title","headingLevel","size","EmptyStateBody","CreateActivationKeyButton","onClick","Button","variant","PropTypes","NoActivationKeysFound","handleModalToggle","AddCircleOIcon","fetchSystemPurposeAttributes","responseData","getSystemPurposeAttributes","systemPurposeAttributes","ActivationKeysFormSelect","label","popover","onSelect","helperText","placeholderValue","useState","selected","setSelected","options","FormSelectOption","value","FormGroup","labelIcon","FormSelect","onChange","isPlaceholder","CreateActivationKeyForm","submitForm","isSuccess","isError","useNotifications","addSuccessNotification","addErrorNotification","setName","setRole","setServiceLevel","setUsage","validated","setValidated","nameRegex","timeout","Form","id","onSubmit","event","preventDefault","isRequired","TextInput","type","length","match","roles","Popover","bodyContent","TextContent","Text","component","TextVariants","ActionGroup","activationKeyMutation","method","JSON","stringify","ok","Error","status","statusText","CreateActivationKeyModal","queryClient","React","created","setCreated","setError","isOpen","useMutation","mutate","Modal","ModalVariant","title","description","onClose","onSuccess","invalidateQueries","onError","deleteActivationKeyMutation","DeleteActivationKeyConfirmationModal","_data","setQueryData","oldData","filter","entry","deleteActivationKey","color","ActivationKeysDocsPopover","orgId","headerContent","position","PopoverPosition","target","rel","href","isInline","style","padding","withRouter","pageContent","setisOpen","currentKeyName","setCurrentKeyName","isDeleteActivationKeyModalOpen","setIsDeleteActivationKeyModalOpen","activationKeyName","handleDeleteActivationKeyModalToggle","Page","PageHeader","Split","hasGutter","SplitItem","isFilled","Flex","FlexItem","spacer","default","PageHeaderTitle","Main","PageSection","PageSectionVariants","canReadActivationKeys"],"sourceRoot":""}