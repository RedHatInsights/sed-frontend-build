{"version":3,"file":"js/9726.1667316105666.97b7045a5eba7d9c93bc.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/help-icon.js","webpack:///./src/hooks/useActivationKeys.js","webpack:///./src/Components/ActivationKeysTable/ActivationKeysTable.js","webpack:///./src/Components/ActivationKeys/CreateActivationKeyButton.js","webpack:///./src/Components/EmptyState/NoActivationKeysFound.js","webpack:///./src/Components/EmptyState/index.js","webpack:///./src/hooks/useSystemPurposeAttributes.js","webpack:///./src/Components/Forms/ActivationKeysFormSelect.js","webpack:///./src/Components/Forms/ActivationKeyForm.js","webpack:///./src/hooks/useCreateActivationKey.js","webpack:///./src/Components/Modals/CreateActivationKeyModal.js","webpack:///./src/hooks/useUpdateActivationKey.js","webpack:///./src/Components/Modals/EditActivationKeyModal.js","webpack:///./src/Components/ActivationKeys/ActivationKeys.js","webpack:///./src/Components/ActivationKeys/index.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.HelpIcon = require('../createIcon').createIcon(exports.HelpIconConfig);\nexports[\"default\"] = exports.HelpIcon;","import { useQuery } from 'react-query';\n\nconst fetchActivationKeysData = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKeys = async () => {\n  const keysData = await fetchActivationKeysData();\n  return keysData;\n};\n\nconst useActivationKeys = () => {\n  return useQuery('activation_keys', () => getActivationKeys());\n};\n\nexport { useActivationKeys as default };\n","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ActionsColumn,\n} from '@patternfly/react-table';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport { useQueryClient } from 'react-query';\nimport { KebabToggle } from '@patternfly/react-core';\nimport useFeatureFlag from '../../hooks/useFeatureFlag';\n\nconst customActionsToggle = (props) => (\n  <KebabToggle\n    onToggle={props.onToggle}\n    isDisabled={props.isDisabled}\n    className={props.isDisabled ? 'pf-m-disabled' : ''}\n  >\n    Actions\n  </KebabToggle>\n);\n\nconst ActivationKeysTable = (props) => {\n  const { actions } = props;\n  const columnNames = {\n    name: 'Key Name',\n    role: 'Role',\n    serviceLevel: 'SLA',\n    usage: 'Usage',\n  };\n  const { isLoading, error, data } = useActivationKeys();\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isActionsDisabled = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n  const { url } = useRouteMatch();\n\n  const keyDetailsIsEnabled = useFeatureFlag(\n    'sed-frontend.activationKeysDetailsPage'\n  );\n  const Results = () => {\n    return (\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th width={40}>{columnNames.name}</Th>\n            <Th>{columnNames.role}</Th>\n            <Th>{columnNames.serviceLevel}</Th>\n            <Th>{columnNames.usage}</Th>\n            <Td></Td>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {data.map((datum) => {\n            let rowActions = actions(datum.name);\n            return (\n              <Tr key={datum.name} ouiaSafe={true}>\n                <Td modifier=\"breakWord\" dataLabel={columnNames.name}>\n                  {keyDetailsIsEnabled ? (\n                    <Link to={`${url}/${datum.name}`}> {datum.name}</Link>\n                  ) : (\n                    datum.name\n                  )}\n                </Td>\n                <Td dataLabel={columnNames.role}>{datum.role}</Td>\n                <Td dataLabel={columnNames.serviceLevel}>\n                  {datum.serviceLevel}\n                </Td>\n                <Td dataLabel={columnNames.usage}>{datum.usage}</Td>\n                <Td isActionCell>\n                  <ActionsColumn\n                    items={rowActions}\n                    isDisabled={isActionsDisabled()}\n                    actionsToggle={customActionsToggle}\n                  />\n                </Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </TableComposable>\n    );\n  };\n\n  if (isLoading && !error) {\n    return <Loading />;\n  } else if (!isLoading && !error) {\n    return <Results />;\n  } else {\n    return <Unavailable />;\n  }\n};\n\nActivationKeysTable.propTypes = {\n  actions: propTypes.func,\n};\n\ncustomActionsToggle.propTypes = {\n  onToggle: propTypes.func,\n  isDisabled: propTypes.bool,\n};\n\nexport default ActivationKeysTable;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { useQueryClient } from 'react-query';\nimport PropTypes from 'prop-types';\n\nconst CreateActivationKeyButton = (props) => {\n  const { onClick } = props;\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isDisabled = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n  return (\n    <Button variant=\"primary\" onClick={onClick} isDisabled={isDisabled()}>\n      Create activation key\n    </Button>\n  );\n};\n\nCreateActivationKeyButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default CreateActivationKeyButton;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport CreateActivationKeyButton from '../ActivationKeys/CreateActivationKeyButton';\n\nconst NoActivationKeysFound = (props) => {\n  const { handleModalToggle } = props;\n  return (\n    <>\n      <EmptyState>\n        <EmptyStateIcon icon={AddCircleOIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          No activation keys\n        </Title>\n        <EmptyStateBody>\n          You currently have no activation keys to display. Activation keys\n          allow you to register a system with system purpose, role and usage\n          attached.\n        </EmptyStateBody>\n        <CreateActivationKeyButton onClick={handleModalToggle} />\n      </EmptyState>\n    </>\n  );\n};\n\nNoActivationKeysFound.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n};\n\nexport default NoActivationKeysFound;\n","import NoActivationKeysFound from './NoActivationKeysFound';\n\nexport default NoActivationKeysFound;\n","import { useQuery } from 'react-query';\n\nconst fetchSystemPurposeAttributes = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch(\n    '/api/rhsm/v2/organization?include=system_purpose_attributes',\n    {\n      headers: { Authorization: `Bearer ${token}` },\n    }\n  );\n\n  const responseData = await response.json();\n\n  return responseData.body;\n};\n\nconst getSystemPurposeAttributes = async () => {\n  const data = await fetchSystemPurposeAttributes();\n  return data.systemPurposeAttributes;\n};\n\nconst useSystemPurposeAttributes = () => {\n  return useQuery('organization_system_purpose_attributes', () =>\n    getSystemPurposeAttributes()\n  );\n};\n\nexport { useSystemPurposeAttributes as default };\n","import React, { useState } from 'react';\nimport {\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n} from '@patternfly/react-core';\n\nimport PropTypes from 'prop-types';\n\nconst ActivationKeysFormSelect = (props) => {\n  const {\n    label,\n    popover,\n    data,\n    onSelect,\n    helperText,\n    name,\n    value,\n    placeholderValue,\n    disableDefaultValues,\n  } = props;\n  const [selected, setSelected] = useState('');\n  const options = data.map((role) => {\n    return <FormSelectOption key={role} value={role} label={role} />;\n  });\n  const valueChange = (value) => {\n    setSelected(value);\n    onSelect(value);\n  };\n\n  return (\n    <FormGroup label={label} labelIcon={popover} helperText={helperText}>\n      <FormSelect\n        onChange={valueChange}\n        value={selected || value}\n        name={name}\n        aria-label={placeholderValue}\n      >\n        <FormSelectOption\n          label={placeholderValue}\n          isPlaceholder={true}\n          isDisabled={disableDefaultValues}\n        />\n        {options}\n      </FormSelect>\n    </FormGroup>\n  );\n};\n\nActivationKeysFormSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  popover: PropTypes.element.isRequired,\n  helperText: PropTypes.string,\n  data: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  placeholderValue: PropTypes.string,\n  value: PropTypes.string,\n  disableDefaultValues: PropTypes.bool,\n};\n\nexport default ActivationKeysFormSelect;\n","import React, { useEffect, useState } from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport useSystemPurposeAttributes from '../../hooks/useSystemPurposeAttributes';\nimport ActivationKeysFormSelect from './ActivationKeysFormSelect';\nimport PropTypes from 'prop-types';\nimport useNotifications from '../../hooks/useNotifications';\n\nconst ActivationKeyForm = (props) => {\n  const { handleModalToggle, submitForm, isSuccess, isError, activationKey } =\n    props;\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const { isLoading, error, data } = useSystemPurposeAttributes();\n  const [name, setName] = useState('');\n  const [role, setRole] = useState('');\n  const [serviceLevel, setServiceLevel] = useState('');\n  const [usage, setUsage] = useState('');\n  const [validated, setValidated] = useState('default');\n  const nameRegex = '^[a-zA-Z0-9-_]*$';\n  const validationText =\n    'Provide a name to be used when registering the activation key. Your activation key name must be unique, may contain only numbers, letters, underscores, and hyphens, and less than 256 characters.';\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (validated === 'success' || activationKey) {\n      submitForm(name, role, serviceLevel, usage);\n    } else {\n      setValidated('error');\n    }\n  };\n\n  const validateName = (value) => {\n    if (value.length === 0 || value.length > 255) {\n      setValidated('error');\n    } else if (!value.match(nameRegex)) {\n      setValidated('error');\n    } else {\n      setValidated('success');\n      setName(value);\n    }\n  };\n\n  useEffect(() => {\n    if (activationKey) {\n      setRole(activationKey.role);\n      setUsage(activationKey.usage);\n      setServiceLevel(activationKey.serviceLevel);\n    }\n  }, [activationKey]);\n\n  const createButtonDisabled = () => {\n    if (activationKey) {\n      return (\n        activationKey.role === role &&\n        activationKey.serviceLevel === serviceLevel &&\n        activationKey.usage === usage\n      );\n    } else {\n      return (\n        validated === 'error' || name.length === 0 || !name.match(nameRegex)\n      );\n    }\n  };\n\n  if (isSuccess) {\n    const successMessage = activationKey\n      ? `Activation key ${activationKey.name} updated successfully.`\n      : 'Activation key created successfully.';\n    addSuccessNotification(successMessage, {\n      timeout: false,\n    });\n    handleModalToggle();\n  } else if (isError) {\n    const errorMessage = activationKey\n      ? `Error updating activation key ${activationKey.name}.`\n      : 'Activation Key was not created, please try again.';\n    addErrorNotification(errorMessage, {\n      timeout: 8000,\n    });\n    handleModalToggle();\n  }\n\n  return (\n    <Form id=\"activation-key-form\" onSubmit={handleSubmit}>\n      {!activationKey && (\n        <FormGroup label=\"Name\" isRequired helperText={validationText}>\n          <TextInput\n            id=\"activation-key-name\"\n            label=\"Name\"\n            isRequired\n            type=\"text\"\n            validated={validated}\n            onChange={validateName}\n            name=\"name\"\n          />\n        </FormGroup>\n      )}\n      {activationKey && (\n        <FormGroup label=\"Name\">\n          {' '}\n          <TextContent>{activationKey.name}</TextContent>\n        </FormGroup>\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.roles}\n          value={role}\n          onSelect={setRole}\n          label=\"Role\"\n          name=\"role\"\n          placeholderValue=\"Select role\"\n          disableDefaultValues={activationKey ? true : false}\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Role is used to categorize systems by the workload on the\n                    system\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Only roles available to your account are shown.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required role from the list. The list only contains roles available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.serviceLevel}\n          value={serviceLevel}\n          onSelect={setServiceLevel}\n          label=\"Service Level Agreement (SLA)\"\n          name=\"serviceLevel\"\n          placeholderValue=\"Select a service level agreement\"\n          disableDefaultValues={activationKey ? true : false}\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Service Level Agreement (SLA) determines the level of\n                    support for systems registered with this activation key.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required service level from the list. The list only contains service levels available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.usage}\n          value={usage}\n          onSelect={setUsage}\n          label=\"Usage\"\n          name=\"usage\"\n          placeholderValue=\"Select usage\"\n          disableDefaultValues={activationKey ? true : false}\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Usage is used to categorize systems by how they are meant to\n                    be used, and therefore supported.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required usage from the list. The list only contains usages available to the activation key.\"\n        />\n      )}\n      <ActionGroup>\n        <Button\n          key=\"create\"\n          id=\"submit-activation-key-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={createButtonDisabled()}\n          data-testid=\"activation-key-submit-button\"\n        >\n          {activationKey ? 'Save changes' : 'Create'}\n        </Button>\n\n        <Button\n          key=\"cancel\"\n          id=\"cancel-activation-key-button\"\n          variant=\"link\"\n          onClick={handleModalToggle}\n        >\n          Cancel\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\n\nActivationKeyForm.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  isSuccess: PropTypes.bool,\n  isError: PropTypes.bool,\n  activationKey: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n};\n\nexport default ActivationKeyForm;\n","import { useMutation } from 'react-query';\n\nconst activationKeyMutation = async (data) => {\n  const { name, role, serviceLevel, usage } = data;\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: name,\n      role: role,\n      serviceLevel: serviceLevel,\n      usage: usage,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error creating activation key: ${response.statusText}.`\n    );\n  }\n  return response.json();\n};\n\nconst useCreateActivationKey = () => {\n  return useMutation(activationKeyMutation);\n};\n\nexport { useCreateActivationKey as default };\n","import * as React from 'react';\nimport { Modal, ModalVariant } from '@patternfly/react-core';\nimport ActivationKeyForm from '../Forms/ActivationKeyForm';\nimport useCreateActivationKey from '../../hooks/useCreateActivationKey';\nimport propTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\n\nconst CreateActivationKeyModal = (props) => {\n  const queryClient = useQueryClient();\n  const [created, setCreated] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const { handleModalToggle, isOpen } = props;\n  const { mutate, isLoading } = useCreateActivationKey();\n  const submitForm = (name, role, serviceLevel, usage) => {\n    mutate(\n      { name, role, serviceLevel, usage },\n      {\n        onSuccess: () => {\n          setError(false);\n          setCreated(true);\n          queryClient.invalidateQueries('activation_keys');\n        },\n        onError: () => {\n          setError(true);\n          setCreated(false);\n        },\n      }\n    );\n  };\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title=\"Create new activation key\"\n      description=\"\"\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n    >\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <ActivationKeyForm\n          handleModalToggle={handleModalToggle}\n          submitForm={submitForm}\n          isSuccess={created}\n          isError={error}\n        />\n      )}\n    </Modal>\n  );\n};\n\nCreateActivationKeyModal.propTypes = {\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  activationKeyName: propTypes.string,\n};\n\nexport default CreateActivationKeyModal;\n","import { useMutation } from 'react-query';\n\nconst activationKeyMutation = async (data) => {\n  const { activationKeyName, role, serviceLevel, usage } = data;\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch(\n    `/api/rhsm/v2/activation_keys/${activationKeyName}`,\n    {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        role: role,\n        serviceLevel: serviceLevel,\n        usage: usage,\n      }),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error updating activation key: ${response.statusText}.`\n    );\n  }\n  return response.json();\n};\n\nconst useUpdateActivationKey = () => {\n  return useMutation(activationKeyMutation);\n};\n\nexport { useUpdateActivationKey as default };\n","import * as React from 'react';\nimport { Modal, ModalVariant } from '@patternfly/react-core';\nimport ActivationKeyForm from '../Forms/ActivationKeyForm';\nimport useUpdateActivationKey from '../../hooks/useUpdateActivationKey';\nimport useActivationKey from '../../hooks/useActivationKey';\nimport propTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\n\nconst EditActivationKeyModal = (props) => {\n  const { activationKeyName } = props;\n  const queryClient = useQueryClient();\n  const [updated, setUpdated] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const { handleModalToggle, isOpen } = props;\n  const { mutate, isLoading } = useUpdateActivationKey();\n  const {\n    isLoading: isKeyLoading,\n    error: keyError,\n    data: activationKey,\n  } = useActivationKey(activationKeyName);\n  const submitForm = (name, role, serviceLevel, usage) => {\n    mutate(\n      { activationKeyName, role, serviceLevel, usage },\n      {\n        onSuccess: () => {\n          setError(false);\n          setUpdated(true);\n          queryClient.invalidateQueries('activation_keys');\n          queryClient.resetQueries(`activation_key_${activationKeyName}`);\n        },\n        onError: () => {\n          setError(true);\n          setUpdated(false);\n        },\n      }\n    );\n  };\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title=\"Edit activation key\"\n      description=\"\"\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n    >\n      {(isLoading || isKeyLoading) && !keyError ? (\n        <Loading />\n      ) : (\n        <ActivationKeyForm\n          activationKey={activationKey}\n          handleModalToggle={handleModalToggle}\n          submitForm={submitForm}\n          isSuccess={updated}\n          isError={error}\n        />\n      )}\n    </Modal>\n  );\n};\n\nEditActivationKeyModal.propTypes = {\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  activationKeyName: propTypes.string,\n};\n\nexport default EditActivationKeyModal;\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  ActionGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ActivationKeysTable from '../ActivationKeysTable';\nimport { useQueryClient } from 'react-query';\nimport NoAccessView from './no-access';\nimport NoActivationKeysFound from '../EmptyState';\nimport CreateActivationKeyModal from '../Modals/CreateActivationKeyModal';\nimport EditActivationKeyModal from '../Modals/EditActivationKeyModal';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport CreateActivationKeyButton from './CreateActivationKeyButton';\nimport DeleteActivationKeyConfirmationModal from '../Modals/DeleteActivationKeyConfirmationModal';\nimport ActivationKeysDocsPopover from '../ActivationKeysDocsPopover';\nconst ActivationKeys = () => {\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const { isLoading, error, data } = useActivationKeys();\n  const [isOpen, setisOpen] = useState(false);\n  const [currentKeyName, setCurrentKeyName] = useState('');\n\n  const [isDeleteActivationKeyModalOpen, setIsDeleteActivationKeyModalOpen] =\n    useState(false);\n  const [isEditActivationKeyModalOpen, setIsEditActivationKeyModalOpen] =\n    useState(false);\n  const handleModalToggle = () => {\n    setisOpen(!isOpen);\n  };\n\n  const popoverContent = (\n    <TextContent className=\"pf-u-font-size-sm\">\n      <Text>\n        Activation keys assist you in registering systems. Metadata such as\n        role, system purpose, and usage can be automatically attached to systems\n        via an activation key, and monitored with &nbsp;\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={'https://console.redhat.com/insights/subscriptions/rhel'}\n        >\n          Subscription Watch.\n        </a>\n      </Text>\n      <Text>\n        To register with an activation key, you will need your organization ID:{' '}\n        <b>{user.orgId}</b>\n      </Text>\n    </TextContent>\n  );\n\n  const actions = (activationKeyName) => {\n    return [\n      {\n        title: 'Edit',\n        onClick: () => handleEditActivationKeyModalToggle(activationKeyName),\n      },\n      {\n        title: 'Delete',\n        onClick: () => handleDeleteActivationKeyModalToggle(activationKeyName),\n      },\n    ];\n  };\n  let pageContent;\n  if (isLoading) {\n    pageContent = <Loading />;\n  } else if (!isLoading && !error && !data.length) {\n    pageContent = (\n      <NoActivationKeysFound handleModalToggle={handleModalToggle} />\n    );\n  } else if (!isLoading && !error && data.length) {\n    pageContent = (\n      <>\n        <ActionGroup>\n          <CreateActivationKeyButton onClick={handleModalToggle} />\n        </ActionGroup>\n        <ActivationKeysTable actions={actions} />\n      </>\n    );\n  }\n\n  const setKeyName = (modalOpen, name) => {\n    let currentName = modalOpen ? '' : name;\n    setCurrentKeyName(currentName);\n  };\n\n  const handleDeleteActivationKeyModalToggle = (name) => {\n    setKeyName(isDeleteActivationKeyModalOpen, name);\n    setIsDeleteActivationKeyModalOpen(!isDeleteActivationKeyModalOpen);\n  };\n\n  const handleEditActivationKeyModalToggle = (name) => {\n    setKeyName(isEditActivationKeyModalOpen, name);\n    setIsEditActivationKeyModalOpen(!isEditActivationKeyModalOpen);\n  };\n\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <Split hasGutter className=\"page-title\">\n            <SplitItem isFilled>\n              <Flex>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                  <PageHeaderTitle title=\"Activation Keys\" />\n                </FlexItem>\n                <FlexItem>\n                  <ActivationKeysDocsPopover\n                    popoverContent={popoverContent}\n                    title=\"Activation Keys\"\n                    position=\"right\"\n                  />\n                </FlexItem>\n              </Flex>\n            </SplitItem>\n          </Split>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              Organization ID: {user.orgId}\n            </Text>\n          </TextContent>\n        </PageHeader>\n        <Main>\n          <PageSection variant={PageSectionVariants.light}>\n            {pageContent}\n          </PageSection>\n        </Main>\n        <CreateActivationKeyModal\n          isOpen={isOpen}\n          handleModalToggle={handleModalToggle}\n        />\n        <EditActivationKeyModal\n          isOpen={isEditActivationKeyModalOpen}\n          handleModalToggle={handleEditActivationKeyModalToggle}\n          activationKeyName={currentKeyName}\n        />\n        <DeleteActivationKeyConfirmationModal\n          handleModalToggle={handleDeleteActivationKeyModalToggle}\n          isOpen={isDeleteActivationKeyModalOpen}\n          name={currentKeyName}\n        />\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKeys);\n","import ActivationKeys from './ActivationKeys';\n\nexport default ActivationKeys;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","fetchActivationKeysData","window","insights","chrome","auth","getToken","token","fetch","headers","Authorization","response","json","activationKeysData","body","getActivationKeys","keysData","useActivationKeys","useQuery","customActionsToggle","props","KebabToggle","onToggle","isDisabled","className","ActivationKeysTable","actions","columnNames","isLoading","error","data","user","useQueryClient","getQueryData","url","useRouteMatch","keyDetailsIsEnabled","useFeatureFlag","Results","TableComposable","Thead","Tr","ouiaSafe","Th","Td","Tbody","map","datum","rowActions","key","modifier","dataLabel","Link","to","role","serviceLevel","usage","isActionCell","ActionsColumn","items","rbacPermissions","canWriteActivationKeys","actionsToggle","Loading","Unavailable","propTypes","CreateActivationKeyButton","onClick","Button","variant","PropTypes","NoActivationKeysFound","handleModalToggle","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","headingLevel","size","EmptyStateBody","fetchSystemPurposeAttributes","responseData","getSystemPurposeAttributes","systemPurposeAttributes","ActivationKeysFormSelect","label","popover","onSelect","helperText","value","placeholderValue","disableDefaultValues","useState","selected","setSelected","options","FormSelectOption","FormGroup","labelIcon","FormSelect","onChange","isPlaceholder","ActivationKeyForm","submitForm","isSuccess","isError","activationKey","useNotifications","addSuccessNotification","addErrorNotification","setName","setRole","setServiceLevel","setUsage","validated","setValidated","nameRegex","useEffect","timeout","Form","id","onSubmit","event","preventDefault","isRequired","TextInput","type","length","match","TextContent","roles","Popover","bodyContent","Text","component","TextVariants","ActionGroup","activationKeyMutation","method","JSON","stringify","ok","Error","status","statusText","CreateActivationKeyModal","queryClient","React","created","setCreated","setError","isOpen","useMutation","mutate","Modal","ModalVariant","title","description","onClose","onSuccess","invalidateQueries","onError","activationKeyName","EditActivationKeyModal","updated","setUpdated","useActivationKey","isKeyLoading","keyError","resetQueries","withRouter","pageContent","setisOpen","currentKeyName","setCurrentKeyName","isDeleteActivationKeyModalOpen","setIsDeleteActivationKeyModalOpen","isEditActivationKeyModalOpen","setIsEditActivationKeyModalOpen","popoverContent","target","rel","href","orgId","handleEditActivationKeyModalToggle","handleDeleteActivationKeyModalToggle","setKeyName","modalOpen","Page","PageHeader","Split","hasGutter","SplitItem","isFilled","Flex","FlexItem","spacer","default","PageHeaderTitle","ActivationKeysDocsPopover","position","Main","PageSection","PageSectionVariants","DeleteActivationKeyConfirmationModal","canReadActivationKeys"],"sourceRoot":""}