{"version":3,"file":"js/ConnectLog.1686730154048.82f8aefdab2f46af986e.js","mappings":"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","sources":["webpack:///./src/Components/ConnectLog/LogNestedtable.js","webpack:///./src/Components/ConnectLog/LogsTable.js","webpack:///./src/Components/ConnectLog/SystemsTable.js","webpack:///./src/Components/ConnectLog/index.js"],"sourcesContent":["import React from 'react';\nimport {\n  Stack,\n  StackItem,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nconst columns = [\n  { title: 'Service' },\n  {\n    title: 'State',\n  },\n];\n\nconst rowMapper = {\n  compliance: 'Use OpenSCAP for Compliance policies',\n  remediations: 'Enable Cloud Connector to fix issues directly from Insights',\n};\n\nconst LogNestedTable = ({ services, isInsights }) => {\n  return (\n    <Stack>\n      <StackItem>\n        <TextContent>\n          <Text component={TextVariants.h3}>State pushed to systems</Text>\n        </TextContent>\n      </StackItem>\n      <Table\n        aria-label=\"Active services Table\"\n        className=\"sed-c-services__table\"\n        cells={columns}\n        rows={[\n          {\n            noPadding: true,\n            cells: [\n              'Connected to Red Hat Insighsts',\n              isInsights ? 'on' : 'off',\n            ],\n          },\n          ...Object.entries(services).map(([key, value]) => [\n            rowMapper[key],\n            value === 'enabled' ? 'on' : 'off',\n          ]),\n        ]}\n        variant=\"compact\"\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nLogNestedTable.propTypes = {\n  services: PropTypes.shape({\n    compliance: PropTypes.bool,\n    remediations: PropTypes.bool,\n  }).isRequired,\n  isInsights: PropTypes.bool.isRequired,\n};\n\nexport default LogNestedTable;\n","import React, { Fragment, useEffect, useState, useCallback } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n  expandable,\n  cellWidth,\n} from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport {\n  Pagination,\n  Skeleton,\n  PaginationVariant,\n  Button,\n} from '@patternfly/react-core';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport flatMap from 'lodash/flatMap';\nimport LogNestedTable from './LogNestedtable';\nimport { downloadFile } from '../../utils/helpers';\nimport { useActions } from '../../store/actions';\nimport { useConfigApi } from '../../api';\n\nconst columns = [\n  {\n    title: 'Initiated date/time',\n    cellFormatters: [expandable],\n  },\n  'Initiator',\n  {\n    title: 'Playbook',\n    transforms: [cellWidth(20)],\n  },\n];\n\nconst rowsMapper = (results, opened, onClick) =>\n  flatMap(\n    results.map(\n      (\n        {\n          account_id,\n          created_at: createdAt,\n          id,\n          compliance,\n          remediations,\n          insights,\n        },\n        key\n      ) => [\n        {\n          id,\n          isOpen: opened.includes(id),\n          cells: [\n            <Fragment key=\"date\">\n              <DateFormat\n                date={new Date(createdAt)}\n                extraTitle=\"Created at: \"\n              />\n            </Fragment>,\n            account_id,\n            <Fragment key={`download file-${id}`}>\n              <Button variant=\"link\" isInline onClick={() => onClick(id)}>\n                Download\n              </Button>\n            </Fragment>,\n          ],\n        },\n        {\n          parent: key * 2,\n          cells: [\n            <Fragment key=\"nested-table\">\n              <LogNestedTable\n                services={{\n                  compliance,\n                  remediations,\n                }}\n                isInsights={insights}\n              />\n            </Fragment>,\n          ],\n        },\n      ]\n    )\n  );\n\nconst LogsTable = () => {\n  const [opened, setOpened] = useState([]);\n  const dispatch = useDispatch();\n  const { fetchLog } = useActions();\n  const configApi = useConfigApi();\n\n  const logLoaded = useSelector(\n    ({ logReducer }) => logReducer?.loaded || false\n  );\n  const rows = useSelector(({ logReducer }) => logReducer?.results || []);\n  const pagination = useSelector(\n    ({ logReducer }) => ({\n      itemCount: logReducer?.total,\n      perPage: logReducer?.limit,\n      page:\n        Math.floor((logReducer?.offset || 0) / (logReducer?.limit || 0)) + 1,\n    }),\n    shallowEqual\n  );\n  useEffect(() => {\n    dispatch(fetchLog());\n  }, []);\n  const onCollapse = (_e, _key, isOpen, { id }) => {\n    setOpened(() =>\n      isOpen ? [...opened, id] : opened.filter((openId) => openId !== id)\n    );\n  };\n\n  const setPage = useCallback(\n    (_e, pageNumber) =>\n      dispatch(fetchLog({ page: pageNumber, perPage: pagination.perPage })),\n    [dispatch, pagination.perPage]\n  );\n\n  const setPerPage = useCallback(\n    (_e, perPage) => dispatch(fetchLog({ page: 1, perPage })),\n    [dispatch]\n  );\n\n  const onClick = (id) => {\n    (async () => {\n      const data = await configApi.getPlaybook(id);\n      downloadFile(data);\n    })();\n  };\n\n  return (\n    <Fragment>\n      <PrimaryToolbar\n        pagination={\n          logLoaded ? (\n            {\n              ...pagination,\n              onSetPage: setPage,\n              onPerPageSelect: setPerPage,\n            }\n          ) : (\n            <Skeleton width=\"33%\" />\n          )\n        }\n      />\n      {logLoaded ? (\n        <Table\n          aria-label=\"Logs table\"\n          variant={TableVariant.compact}\n          rows={rowsMapper(rows, opened, onClick)}\n          cells={columns}\n          onCollapse={onCollapse}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <SkeletonTable colSize={3} rowSize={10} />\n      )}\n      <TableToolbar isFooter>\n        {logLoaded ? (\n          <Pagination\n            {...pagination}\n            variant={PaginationVariant.bottom}\n            onSetPage={setPage}\n            onPerPageSelect={setPerPage}\n          />\n        ) : (\n          <Skeleton width=\"33%\" />\n        )}\n      </TableToolbar>\n    </Fragment>\n  );\n};\n\nLogsTable.propTypes = {\n  isActive: PropTypes.bool,\n};\n\nLogsTable.defaultProps = {\n  isActive: false,\n};\n\nexport default LogsTable;\n","import React from 'react';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\n\nconst SystemsTable = () => {\n  return (\n    <InventoryTable\n      variant=\"compact\"\n      showTags\n      hasCheckbox={false}\n      columns={(defaultColumns) => defaultColumns}\n      getEntities={async (_i, config, tags, defaultGetEntities) => {\n        return await defaultGetEntities(undefined, config, tags);\n      }}\n      onRowClick={(_e, id) =>\n        (window.location.href = `./insights/inventory/${id}`)\n      }\n      customFilters={{\n        filters: [\n          {\n            rhcdFilter: ['not_nil'],\n          },\n        ],\n      }}\n      onLoad={({ mergeWithEntities }) => {\n        register?.({\n          ...mergeWithEntities(),\n        });\n      }}\n    />\n  );\n};\n\nexport default SystemsTable;\n","import React, { useEffect, useState } from 'react';\nimport { Modal, Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport LogsTable from './LogsTable';\nimport SystemsTable from './SystemsTable';\nimport { useHistory } from 'react-router-dom';\nimport pckg from '../../../package.json';\nimport { useDispatch } from 'react-redux';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nconst { routes: paths } = pckg;\n\nconst tabMapper = ['runs', 'systems'];\n\nconst ConnectLog = () => {\n  const [activeTabKey, setActiveTabKey] = useState(0);\n  const dispatch = useDispatch();\n  const { push, location } = useHistory();\n  useEffect(() => {\n    dispatch(clearNotifications());\n    const searchParams = new URLSearchParams(location.search);\n    const activeTab = tabMapper.findIndex(\n      (item) => item === searchParams.get('active_tab')\n    );\n    if (activeTab !== -1) {\n      setActiveTabKey(activeTab);\n    } else {\n      push({\n        pathname: location.pathname,\n        search: new URLSearchParams({\n          active_tab: tabMapper[0],\n        }).toString(),\n      });\n    }\n  }, []);\n  return (\n    <Modal\n      title=\"Red Hat connect log\"\n      variant=\"medium\"\n      isOpen={true}\n      onClose={() => push(paths.connector)}\n    >\n      <Tabs\n        activeKey={activeTabKey}\n        onSelect={(_e, tabKey) => {\n          push({\n            pathname: location.pathname,\n            search: new URLSearchParams({\n              active_tab: tabMapper[tabKey],\n            }).toString(),\n          });\n          setActiveTabKey(tabKey);\n        }}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Runs</TabTitleText>}>\n          <LogsTable />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Systems</TabTitleText>}>\n          <SystemsTable />\n        </Tab>\n      </Tabs>\n    </Modal>\n  );\n};\n\nexport default ConnectLog;\n"],"names":["columns","title","rowMapper","compliance","remediations","LogNestedTable","services","isInsights","Stack","StackItem","TextContent","Text","component","TextVariants","Table","className","cells","rows","noPadding","Object","entries","map","key","value","variant","TableHeader","TableBody","propTypes","PropTypes","isRequired","i","cellFormatters","expandable","transforms","cellWidth","rowsMapper","results","opened","onClick","flatMap","account_id","createdAt","created_at","id","insights","isOpen","includes","Fragment","DateFormat","date","Date","extraTitle","Button","isInline","parent","LogsTable","useState","setOpened","dispatch","useDispatch","fetchLog","useActions","configApi","useConfigApi","logLoaded","useSelector","logReducer","loaded","pagination","itemCount","total","perPage","limit","page","Math","floor","offset","shallowEqual","useEffect","setPage","useCallback","_e","pageNumber","setPerPage","PrimaryToolbar","onSetPage","onPerPageSelect","Skeleton","width","TableVariant","getPlaybook","data","downloadFile","onCollapse","_key","filter","openId","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","PaginationVariant","isActive","defaultProps","InventoryTable","showTags","hasCheckbox","defaultColumns","getEntities","_i","config","tags","defaultGetEntities","undefined","onRowClick","window","location","href","customFilters","filters","rhcdFilter","onLoad","mergeWithEntities","register","paths","pckg","tabMapper","activeTabKey","setActiveTabKey","useHistory","push","clearNotifications","searchParams","URLSearchParams","search","activeTab","findIndex","item","get","pathname","active_tab","toString","Modal","onClose","connector","Tabs","activeKey","onSelect","tabKey","Tab","eventKey","TabTitleText"],"sourceRoot":""}