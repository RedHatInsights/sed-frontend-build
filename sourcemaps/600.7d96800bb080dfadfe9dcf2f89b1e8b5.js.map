{"version":3,"file":"js/600.14785022b214fcc34372.js","mappings":"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","sources":["webpack:///./src/hooks/useActivationKeys.js","webpack:///./src/Components/ActivationKeysTable/ActivationKeysTable.js","webpack:///./src/Components/ActivationKeys/no-access.js","webpack:///./src/hooks/useSystemPuproseAttributes.js","webpack:///./src/Components/Forms/ActivationKeysFormSelect.js","webpack:///./src/Components/Forms/CreateActivationKeyForm.js","webpack:///./src/hooks/useCreateActivationKey.js","webpack:///./src/Components/Modals/CreateActivationKeyModal.js","webpack:///./src/Components/ActivationKeys/index.js","webpack:///./src/Components/ActivationKeys/ActivationKeys.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst fetchActivationKeysData = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKeys = async () => {\n  const keysData = await fetchActivationKeysData();\n  return keysData;\n};\n\nconst useActivationKeys = () => {\n  return useQuery('activation_keys', () => getActivationKeys());\n};\n\nexport { useActivationKeys as default };\n","import React from 'react';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from '@patternfly/react-table';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\n\nconst ActivationKeysTable = () => {\n  const columnNames = {\n    name: 'Key Name',\n    role: 'Role',\n    serviceLevel: 'SLA',\n    usage: 'Usage',\n  };\n  const { isLoading, error, data } = useActivationKeys();\n\n  const Results = () => {\n    return (\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th>{columnNames.name}</Th>\n            <Th>{columnNames.role}</Th>\n            <Th>{columnNames.serviceLevel}</Th>\n            <Th>{columnNames.usage}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {data.map((datum) => (\n            <Tr key={datum.name} ouiaSafe={true}>\n              <Td dataLabel={columnNames.name}>{datum.name}</Td>\n              <Td dataLabel={columnNames.role}>{datum.role}</Td>\n              <Td dataLabel={columnNames.serviceLevel}>{datum.serviceLevel}</Td>\n              <Td dataLabel={columnNames.usage}>{datum.usage}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    );\n  };\n\n  if (isLoading && !error) {\n    return <Loading />;\n  } else if (!isLoading && !error) {\n    return <Results />;\n  } else {\n    return <Unavailable />;\n  }\n};\n\nexport default ActivationKeysTable;\n","import {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst NoAccessView = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={LockIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Activation keys can only be accessed by organization administrators.\n      </Title>\n      <EmptyStateBody>\n        If you already know your organization ID and activation key, you can\n        register systems with RHC.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoAccessView;\n","import { useQuery } from 'react-query';\n\nconst fetchSystemPurposeAttributes = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch(\n    '/api/rhsm/v2/organization?include=system_purpose_attributes',\n    {\n      headers: { Authorization: `Bearer ${token}` },\n    }\n  );\n\n  const responseData = await response.json();\n\n  return responseData.body;\n};\n\nconst getSystemPurposeAttributes = async () => {\n  const data = await fetchSystemPurposeAttributes();\n  return data.systemPurposeAttributes;\n};\n\nconst useSystemPurposeAttributes = () => {\n  return useQuery('organization_system_puprose_attributes', () =>\n    getSystemPurposeAttributes()\n  );\n};\n\nexport { useSystemPurposeAttributes as default };\n","import React, { useState } from 'react';\nimport {\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n} from '@patternfly/react-core';\n\nimport PropTypes from 'prop-types';\n\nconst ActivationKeysFormSelect = (props) => {\n  const {\n    label,\n    popover,\n    data,\n    onSelect,\n    helperText,\n    name,\n    placeholderValue,\n  } = props;\n  const [selected, setSelected] = useState('');\n  const options = data.map((role) => {\n    return <FormSelectOption key={role} value={role} label={role} />;\n  });\n  const valueChange = (value) => {\n    setSelected(value);\n    onSelect(value);\n  };\n\n  return (\n    <FormGroup label={label} labelIcon={popover} helperText={helperText}>\n      <FormSelect\n        onChange={valueChange}\n        value={selected}\n        name={name}\n        aria-label={placeholderValue}\n      >\n        <FormSelectOption label={placeholderValue} isPlaceholder={true} />\n        {options}\n      </FormSelect>\n    </FormGroup>\n  );\n};\n\nActivationKeysFormSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  popover: PropTypes.element.isRequired,\n  helperText: PropTypes.string,\n  data: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  placeholderValue: PropTypes.string,\n};\n\nexport default ActivationKeysFormSelect;\n","import React, { useState } from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport useSystemPuproseAttributes from '../../hooks/useSystemPuproseAttributes';\nimport ActivationKeysFormSelect from './ActivationKeysFormSelect';\nimport PropTypes from 'prop-types';\nimport useNotifications from '../../hooks/useNotifications';\n\nconst CreateActivationKeyForm = (props) => {\n  const { handleModalToggle, submitForm, isSuccess, isError } = props;\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const { isLoading, error, data } = useSystemPuproseAttributes();\n  const [name, setName] = useState('');\n  const [role, setRole] = useState('');\n  const [serviceLevel, setServiceLevel] = useState('');\n  const [usage, setUsage] = useState('');\n  const [validated, setValidated] = useState('default');\n  const nameRegex = '^[a-z][a-z0-9-]*$';\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (validated === 'success') {\n      submitForm(name, role, serviceLevel, usage);\n    } else {\n      setValidated('error');\n    }\n  };\n\n  const validateName = (value) => {\n    if (value.length === 0) {\n      setValidated('error');\n    } else if (!value.match(nameRegex)) {\n      setValidated('error');\n    } else {\n      setValidated('success');\n      setName(value);\n    }\n  };\n\n  const createButtonDisabled = () => {\n    return validated === 'error' || name.length === 0 || !name.match(nameRegex);\n  };\n\n  if (isSuccess) {\n    addSuccessNotification('Activation Key was created successfully', {\n      timeout: false,\n    });\n    handleModalToggle();\n  } else if (isError) {\n    addErrorNotification('Activation Key was not created, please try again', {\n      timeout: 8000,\n    });\n    handleModalToggle();\n  }\n\n  return (\n    <Form id=\"create-activation-key-form\" onSubmit={handleSubmit}>\n      <FormGroup\n        label=\"Name\"\n        isRequired\n        helperText=\"Enter the name of the activation key. Must start with a letter and end with a letter or number. Valid characters include lowercase letters from a to z, numbers from 0 to 9, and hyphens ( - ).\"\n      >\n        <TextInput\n          id=\"activation-key-name\"\n          label=\"Name\"\n          isRequired\n          type=\"text\"\n          validated={validated}\n          onChange={validateName}\n          name=\"name\"\n        />\n      </FormGroup>\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.roles}\n          onSelect={setRole}\n          label=\"Role\"\n          name=\"role\"\n          placeholderValue=\"Select role\"\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Role is used to categorize systems by the workload on the\n                    system\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Only roles available to your account are shown.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required role from the list. The list only contains roles available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.serviceLevel}\n          onSelect={setServiceLevel}\n          label=\"Service Level Agreement (SLA)\"\n          name=\"serviceLevel\"\n          placeholderValue=\"Select a service level agreement\"\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Service Level Agreement (SLA) determines the level of\n                    support for systems registered with this activation key.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required service level from the list. The list only contains service levels available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.usage}\n          onSelect={setUsage}\n          label=\"Usage\"\n          name=\"usage\"\n          placeholderValue=\"Select usage\"\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Usage is used to categorize systems by how they are meant to\n                    be used, and therefore supported.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required usage from the list. The list only contains usages available to the activation key.\"\n        />\n      )}\n      <ActionGroup>\n        <Button\n          key=\"create\"\n          id=\"create-activation-key-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={createButtonDisabled()}\n        >\n          Save\n        </Button>\n\n        <Button\n          key=\"cancel\"\n          id=\"cancel-create-activation-key-button\"\n          variant=\"link\"\n          onClick={handleModalToggle}\n        >\n          Cancel\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\n\nCreateActivationKeyForm.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  isSuccess: PropTypes.bool,\n  isError: PropTypes.bool,\n};\n\nexport default CreateActivationKeyForm;\n","import { useMutation, useQueryClient } from 'react-query';\n\nconst activationKeyMutation = async (data) => {\n  const { name, role, serviceLevel, usage } = data;\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: name,\n      role: role,\n      serviceLevel: serviceLevel,\n      usage: usage,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error creating activation key: ${response.statusText}.`\n    );\n  }\n  return response.json();\n};\n\nconst useCreateActivationKey = () => {\n  const queryClient = useQueryClient();\n  return useMutation(activationKeyMutation, {\n    onSuccess: () => {\n      queryClient.resetQueries('activation_keys');\n    },\n  });\n};\n\nexport { useCreateActivationKey as default };\n","import * as React from 'react';\nimport { Modal, ModalVariant } from '@patternfly/react-core';\nimport CreateActivationKeyForm from '../Forms/CreateActivationKeyForm';\nimport useCreateActivationKey from '../../hooks/useCreateActivationKey';\nimport propTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\n\nconst CreateActivationKeyModal = (props) => {\n  const { handleModalToggle, isOpen } = props;\n  const { mutate, isSuccess, isError, isLoading } = useCreateActivationKey();\n  const submitForm = (name, role, serviceLevel, usage) => {\n    mutate({ name, role, serviceLevel, usage });\n  };\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title=\"Create new activation key\"\n      description=\"\"\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n    >\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <CreateActivationKeyForm\n          handleModalToggle={handleModalToggle}\n          submitForm={submitForm}\n          isSuccess={isSuccess}\n          isError={isError}\n        />\n      )}\n    </Modal>\n  );\n};\n\nCreateActivationKeyModal.propTypes = {\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n};\n\nexport default CreateActivationKeyModal;\n","import ActivationKeys from './ActivationKeys';\n\nexport default ActivationKeys;\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  ActionGroup,\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ActivationKeysTable from '../ActivationKeysTable';\nimport { useQueryClient } from 'react-query';\nimport NoAccessView from './no-access';\nimport CreateActivationKeyModal from '../Modals/CreateActivationKeyModal';\nconst ActivationKeys = () => {\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const [isOpen, setisOpen] = useState(false);\n  const handleModalToggle = () => {\n    setisOpen(!isOpen);\n  };\n  const canWriteActivaionKeys = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <PageHeaderTitle title=\"Activation Keys\" />\n          <TextContent>\n            <Text component={TextVariants.p}>\n              Organization ID: {user.orgId}\n            </Text>\n          </TextContent>\n        </PageHeader>\n        <Main>\n          <PageSection variant={PageSectionVariants.light}>\n            <ActionGroup>\n              <Button\n                variant=\"primary\"\n                onClick={handleModalToggle}\n                isDisabled={canWriteActivaionKeys()}\n              >\n                Create activation key\n              </Button>\n            </ActionGroup>\n            <ActivationKeysTable />\n          </PageSection>\n        </Main>\n        <CreateActivationKeyModal\n          isOpen={isOpen}\n          handleModalToggle={handleModalToggle}\n        />\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKeys);\n"],"names":["fetchActivationKeysData","window","insights","chrome","auth","getToken","token","fetch","headers","Authorization","response","json","activationKeysData","body","getActivationKeys","keysData","columnNames","useQuery","isLoading","error","data","Results","TableComposable","Thead","Tr","ouiaSafe","Th","Tbody","map","datum","key","name","Td","dataLabel","role","serviceLevel","usage","Loading","Unavailable","Bullseye","EmptyState","EmptyStateIcon","icon","LockIcon","Title","headingLevel","size","EmptyStateBody","fetchSystemPurposeAttributes","responseData","getSystemPurposeAttributes","systemPurposeAttributes","ActivationKeysFormSelect","props","label","popover","onSelect","helperText","placeholderValue","useState","selected","setSelected","options","FormSelectOption","value","FormGroup","labelIcon","FormSelect","onChange","isPlaceholder","propTypes","PropTypes","CreateActivationKeyForm","handleModalToggle","submitForm","isSuccess","isError","useNotifications","addSuccessNotification","addErrorNotification","setName","setRole","setServiceLevel","setUsage","validated","setValidated","nameRegex","timeout","Form","id","onSubmit","event","preventDefault","isRequired","TextInput","type","length","match","roles","Popover","bodyContent","TextContent","Text","component","TextVariants","ActionGroup","Button","variant","isDisabled","onClick","activationKeyMutation","method","JSON","stringify","ok","Error","status","statusText","CreateActivationKeyModal","queryClient","isOpen","useQueryClient","useMutation","onSuccess","resetQueries","mutate","Modal","ModalVariant","title","description","onClose","withRouter","user","getQueryData","setisOpen","Page","PageHeader","PageHeaderTitle","orgId","Main","PageSection","PageSectionVariants","rbacPermissions","canWriteActivationKeys","canReadActivationKeys"],"sourceRoot":""}