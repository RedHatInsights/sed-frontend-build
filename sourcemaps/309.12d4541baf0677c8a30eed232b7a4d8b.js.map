{"version":3,"file":"js/309.1678366264767.a5a90579136ee31a69a1.js","mappings":"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","sources":["webpack:///./src/hooks/useActivationKeys.js","webpack:///./src/Components/ActivationKeysTable/ActivationKeysTable.js","webpack:///./src/Components/ActivationKeys/CreateActivationKeyButton.js","webpack:///./src/Components/EmptyState/NoActivationKeysFound.js","webpack:///./src/Components/EmptyState/index.js","webpack:///./src/hooks/useCreateActivationKey.js","webpack:///./src/Components/Modals/CreateActivationKeyWizard.js","webpack:///./src/Components/Modals/CreateActivationKeyModal.js","webpack:///./src/Components/ActivationKeys/ActivationKeys.js","webpack:///./src/Components/ActivationKeys/index.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst fetchActivationKeysData = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKeys = async () => {\n  const keysData = await fetchActivationKeysData();\n  return keysData;\n};\n\nconst useActivationKeys = () => {\n  return useQuery('activation_keys', () => getActivationKeys());\n};\n\nexport { useActivationKeys as default };\n","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ActionsColumn,\n} from '@patternfly/react-table';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport { useQueryClient } from 'react-query';\nimport { KebabToggle } from '@patternfly/react-core';\nimport useFeatureFlag from '../../hooks/useFeatureFlag';\n\nconst customActionsToggle = (props) => (\n  <KebabToggle\n    onToggle={props.onToggle}\n    isDisabled={props.isDisabled}\n    className={props.isDisabled ? 'pf-m-disabled' : ''}\n  >\n    Actions\n  </KebabToggle>\n);\n\nconst ActivationKeysTable = (props) => {\n  const { actions } = props;\n  const columnNames = {\n    name: 'Key Name',\n    role: 'Role',\n    serviceLevel: 'SLA',\n    usage: 'Usage',\n  };\n  const { isLoading, error, data } = useActivationKeys();\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isActionsDisabled = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n  const { url } = useRouteMatch();\n\n  const keyDetailsIsEnabled = useFeatureFlag(\n    'sed-frontend.activationKeysDetailsPage'\n  );\n  const Results = () => {\n    return (\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th width={40}>{columnNames.name}</Th>\n            <Th>{columnNames.role}</Th>\n            <Th>{columnNames.serviceLevel}</Th>\n            <Th>{columnNames.usage}</Th>\n            <Td></Td>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {data.map((datum) => {\n            let rowActions = actions(datum.name);\n            return (\n              <Tr key={datum.name} ouiaSafe={true}>\n                <Td modifier=\"breakWord\" dataLabel={columnNames.name}>\n                  {keyDetailsIsEnabled ? (\n                    <Link to={`${url}/${datum.name}`}> {datum.name}</Link>\n                  ) : (\n                    datum.name\n                  )}\n                </Td>\n                <Td dataLabel={columnNames.role}>{datum.role}</Td>\n                <Td dataLabel={columnNames.serviceLevel}>\n                  {datum.serviceLevel}\n                </Td>\n                <Td dataLabel={columnNames.usage}>{datum.usage}</Td>\n                <Td isActionCell>\n                  <ActionsColumn\n                    items={rowActions}\n                    isDisabled={isActionsDisabled()}\n                    actionsToggle={customActionsToggle}\n                  />\n                </Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </TableComposable>\n    );\n  };\n\n  if (isLoading && !error) {\n    return <Loading />;\n  } else if (!isLoading && !error) {\n    return <Results />;\n  } else {\n    return <Unavailable />;\n  }\n};\n\nActivationKeysTable.propTypes = {\n  actions: propTypes.func,\n};\n\ncustomActionsToggle.propTypes = {\n  onToggle: propTypes.func,\n  isDisabled: propTypes.bool,\n};\n\nexport default ActivationKeysTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { WriteOnlyButton } from '../WriteOnlyButton';\n\nconst CreateActivationKeyButton = ({ onClick }) => {\n  return (\n    <WriteOnlyButton variant=\"primary\" onClick={onClick}>\n      Create activation key\n    </WriteOnlyButton>\n  );\n};\n\nCreateActivationKeyButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default CreateActivationKeyButton;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport CreateActivationKeyButton from '../ActivationKeys/CreateActivationKeyButton';\n\nconst NoActivationKeysFound = (props) => {\n  const { handleModalToggle } = props;\n  return (\n    <>\n      <EmptyState>\n        <EmptyStateIcon icon={AddCircleOIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          No activation keys\n        </Title>\n        <EmptyStateBody>\n          You currently have no activation keys to display. Activation keys\n          allow you to register a system with system purpose, role and usage\n          attached.\n        </EmptyStateBody>\n        <CreateActivationKeyButton onClick={handleModalToggle} />\n      </EmptyState>\n    </>\n  );\n};\n\nNoActivationKeysFound.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n};\n\nexport default NoActivationKeysFound;\n","import NoActivationKeysFound from './NoActivationKeysFound';\n\nexport default NoActivationKeysFound;\n","import { useMutation } from 'react-query';\n\nconst activationKeyMutation = async (data) => {\n  const { name, role, serviceLevel, usage } = data;\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: name,\n      role: role,\n      serviceLevel: serviceLevel,\n      usage: usage,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error creating activation key: ${response.statusText}.`\n    );\n  }\n  return response.json();\n};\n\nconst useCreateActivationKey = () => {\n  return useMutation(activationKeyMutation);\n};\n\nexport { useCreateActivationKey as default };\n","import React, { useState } from 'react';\nimport {\n  Title,\n  Text,\n  TextInput,\n  TextVariants,\n  Wizard,\n  FormGroup,\n  FormSelectOption,\n  FormSelect,\n  Radio,\n  Modal,\n  ModalVariant,\n  Button,\n  Form,\n} from '@patternfly/react-core';\nimport {\n  DescriptionList,\n  DescriptionListTerm,\n  DescriptionListGroup,\n  DescriptionListDescription,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useCreateActivationKey from '../../hooks/useCreateActivationKey';\nimport useSystemPurposeAttributes from '../../hooks/useSystemPurposeAttributes';\nimport useNotifications from '../../hooks/useNotifications';\nimport { useQueryClient } from 'react-query';\nimport Loading from '../LoadingState/Loading';\n\nconst SetNamePage = ({ name, setName }) => {\n  const helperText =\n    'Your activation key name must be unique and must contain only numbers, letters, underscores, and hyphens.';\n\n  return (\n    <>\n      <Title headingLevel=\"h2\" className=\"pf-u-mb-sm\">\n        Name key\n      </Title>\n      <Text component={TextVariants.p} className=\"pf-u-mb-xl\">\n        This name cannot be modified after the activation key is created.\n      </Text>\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          helperText={helperText}\n          fieldId=\"activation-key-name\"\n        >\n          <TextInput\n            id=\"activation-key-name\"\n            isRequired\n            type=\"text\"\n            value={name}\n            onChange={setName}\n          />\n        </FormGroup>\n      </Form>\n    </>\n  );\n};\n\nSetNamePage.propTypes = {\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired,\n};\n\nconst SetWorkloadPage = ({ workloadOptions, workload, setWorkload }) => {\n  return (\n    <>\n      <Title headingLevel=\"h2\" className=\"pf-u-mb-sm\">\n        Select Workload\n      </Title>\n      <Text component={TextVariants.p} className=\"pf-u-mb-xl\">\n        Choose a workload option to associate an appropriate selection of\n        repositories to the activation key. Repositories can be edited on the\n        activation key detail page.{' '}\n      </Text>\n      {workloadOptions.map((wl) => {\n        return (\n          <Radio\n            label={wl}\n            onChange={() => setWorkload(wl)}\n            isChecked={wl == workload}\n            className=\"pf-u-mb-md\"\n            name={wl}\n            id={wl}\n            isDisabled={wl == 'Extended support'}\n            key={wl}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nSetWorkloadPage.propTypes = {\n  workloadOptions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  workload: PropTypes.string.isRequired,\n  setWorkload: PropTypes.func.isRequired,\n};\n\nconst SetSystemPurposePage = ({\n  role,\n  setRole,\n  sla,\n  setSla,\n  usage,\n  setUsage,\n  data,\n  isLoading,\n  isError,\n}) => {\n  const Options = ({ options }) => (\n    <>\n      {options.map((option) => (\n        <FormSelectOption key={option} value={option} label={option} />\n      ))}\n    </>\n  );\n  Options.propTypes = {\n    options: PropTypes.array.isRequired,\n  };\n  const Placeholder = () => (\n    <FormSelectOption label=\"Not defined\" isPlaceholder />\n  );\n  return isLoading ? (\n    <Loading />\n  ) : (\n    !isError && (\n      <>\n        <Title headingLevel=\"h2\" className=\"pf-u-mb-sm\">\n          Select system purpose\n        </Title>\n        <Text component={TextVariants.p} className=\"pf-u-mb-xl\">\n          System purpose values are used by the subscriptions service to help\n          filter and identify hosts. Setting values for these attributes is an\n          optional step, but doing so ensures that subscriptions reporting\n          accurately reflects the system. Only those values available to your\n          account are shown.\n        </Text>\n        <Form>\n          <FormGroup\n            label=\"Role\"\n            className=\"pf-u-mb-sm\"\n            fieldId=\"activation-key-role\"\n          >\n            <FormSelect\n              onChange={setRole}\n              value={role}\n              id=\"activation-key-role\"\n            >\n              <Options options={data.roles} />\n              <Placeholder />\n            </FormSelect>\n          </FormGroup>\n          <FormGroup\n            label=\"Service level agreement (SLA)\"\n            className=\"pf-u-mb-sm\"\n            fieldId=\"activation-key-sla\"\n          >\n            <FormSelect onChange={setSla} value={sla} id=\"activation-key-sla\">\n              <Options options={data.serviceLevel} />\n              <Placeholder />\n            </FormSelect>\n          </FormGroup>\n          <FormGroup\n            label=\"Usage\"\n            className=\"pf-u-mb-sm\"\n            fieldId=\"activation-key-usage\"\n          >\n            <FormSelect\n              onChange={setUsage}\n              value={usage}\n              id=\"activation-key-usage\"\n            >\n              <Options options={data.usage} />\n              <Placeholder />\n            </FormSelect>\n          </FormGroup>\n        </Form>\n      </>\n    )\n  );\n};\n\nSetSystemPurposePage.propTypes = {\n  role: PropTypes.string.isRequired,\n  setRole: PropTypes.func.isRequired,\n  sla: PropTypes.string.isRequired,\n  setSla: PropTypes.func.isRequired,\n  usage: PropTypes.string.isRequired,\n  setUsage: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  isError: PropTypes.bool.isRequired,\n};\n\nconst ReviewPage = ({ name, workload, role, sla, usage, isLoading }) => {\n  return isLoading ? (\n    <Loading />\n  ) : (\n    <>\n      <Title headingLevel=\"h2\" className=\"pf-u-mb-sm\">\n        Review\n      </Title>\n      <Text component={TextVariants.p} className=\"pf-u-mb-xl\">\n        Review the following information and click <b>Create</b> to create the\n        activation key.\n      </Text>\n      <DescriptionList\n        isHorizontal\n        horizontalTermWidthModifier={{\n          default: '21ch',\n        }}\n      >\n        <DescriptionListGroup>\n          <DescriptionListTerm>Name</DescriptionListTerm>\n          <DescriptionListDescription>{name}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Workload</DescriptionListTerm>\n          <DescriptionListDescription>{workload}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Role</DescriptionListTerm>\n          <DescriptionListDescription>\n            {role || 'Not defined'}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            Service level agreement (SLA)\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {sla || 'Not defined'}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Usage</DescriptionListTerm>\n          <DescriptionListDescription>\n            {usage || 'Not defined'}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    </>\n  );\n};\n\nReviewPage.propTypes = {\n  name: PropTypes.string.isRequired,\n  workload: PropTypes.string.isRequired,\n  role: PropTypes.string.isRequired,\n  sla: PropTypes.string.isRequired,\n  usage: PropTypes.string.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nconst workloadOptions = ['Latest release', 'Extended support'];\n\nconst confirmCloseTitle = 'Exit activation key creation?';\nconst confirmCloseBody = <p>All inputs will be discarded.</p>;\nconst ConfirmCloseFooter = ({ onClose, returnToWizard }) => (\n  <>\n    <Button variant=\"primary\" onClick={onClose}>\n      Exit\n    </Button>\n    <Button variant=\"link\" onClick={returnToWizard}>\n      Stay\n    </Button>\n  </>\n);\n\nConfirmCloseFooter.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnToWizard: PropTypes.func.isRequired,\n};\n\nconst CreateActivationKeyWizard = ({ onClose, isOpen }) => {\n  const queryClient = useQueryClient();\n  const { mutate, isLoading: createActivationKeyIsLoading } =\n    useCreateActivationKey();\n  const {\n    isLoading: attributesAreLoading,\n    error,\n    data,\n  } = useSystemPurposeAttributes();\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const [name, setName] = useState('');\n  const [workload, setWorkload] = useState(workloadOptions[0]);\n  const [role, setRole] = useState('');\n  const [sla, setSla] = useState('');\n  const [usage, setUsage] = useState('');\n  const [isConfirmClose, setIsConfirmClose] = useState(false);\n  const [shouldConfirmClose, setShouldConfirmClose] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const confirmClose = (onClose) => {\n    if (shouldConfirmClose) {\n      setIsConfirmClose(true);\n    } else {\n      onClose();\n    }\n  };\n\n  const returnToWizard = () => {\n    setIsConfirmClose(false);\n  };\n\n  const steps = [\n    {\n      id: 0,\n      name: 'Name',\n      component: <SetNamePage name={name} setName={setName} />,\n    },\n    {\n      id: 1,\n      name: 'Workload',\n      component: (\n        <SetWorkloadPage\n          workloadOptions={workloadOptions}\n          workload={workload}\n          setWorkload={setWorkload}\n        />\n      ),\n    },\n    {\n      id: 2,\n      name: 'System purpose',\n      component: (\n        <SetSystemPurposePage\n          role={role}\n          setRole={setRole}\n          data={data}\n          sla={sla}\n          setSla={setSla}\n          usage={usage}\n          setUsage={setUsage}\n          isLoading={attributesAreLoading}\n          isError={error}\n        />\n      ),\n    },\n    {\n      id: 3,\n      name: 'Review',\n      component: (\n        <ReviewPage\n          name={name}\n          workload={workload}\n          role={role}\n          sla={sla}\n          usage={usage}\n          isLoading={createActivationKeyIsLoading}\n        />\n      ),\n      nextButtonText: 'Create',\n    },\n  ];\n\n  return (\n    <Modal\n      variant={isConfirmClose ? ModalVariant.small : ModalVariant.large}\n      isOpen={isOpen}\n      showClose={isConfirmClose}\n      title={isConfirmClose ? confirmCloseTitle : undefined}\n      titleIconVariant={isConfirmClose ? 'warning' : undefined}\n      footer={\n        isConfirmClose ? (\n          <ConfirmCloseFooter\n            onClose={onClose}\n            returnToWizard={returnToWizard}\n          />\n        ) : undefined\n      }\n      hasNoBodyWrapper={!isConfirmClose}\n      aria-label=\"Create activation key wizard\"\n      onClose={isConfirmClose ? returnToWizard : undefined}\n    >\n      {!isConfirmClose && (\n        <Wizard\n          title=\"Create activation key\"\n          steps={steps}\n          height={400}\n          navAriaLabel=\"Create activation key steps\"\n          mainAriaLabel=\"Create activation key content\"\n          onCurrentStepChanged={(step) => {\n            if (step.id > 0) setShouldConfirmClose(true);\n            setCurrentStep(step.id);\n          }}\n          startAtStep={currentStep + 1}\n          onSave={() => {\n            mutate(\n              { name, role, serviceLevel: sla, usage },\n              {\n                onSuccess: () => {\n                  queryClient.invalidateQueries('activation_keys');\n                  addSuccessNotification(`Activation key \"${name}\" created`);\n                  onClose();\n                },\n                onError: () => {\n                  addErrorNotification('Something went wrong', {\n                    description:\n                      'Your changes could not be saved. Please try again.',\n                  });\n                  onClose();\n                },\n              }\n            );\n          }}\n          onClose={() => confirmClose(onClose)}\n        />\n      )}\n      {isConfirmClose && confirmCloseBody}\n    </Modal>\n  );\n};\n\nCreateActivationKeyWizard.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n};\n\nexport default CreateActivationKeyWizard;\n","import * as React from 'react';\nimport { Modal, ModalVariant } from '@patternfly/react-core';\nimport ActivationKeyForm from '../Forms/ActivationKeyForm';\nimport useCreateActivationKey from '../../hooks/useCreateActivationKey';\nimport propTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\nimport useFeatureFlag from '../../hooks/useFeatureFlag';\nimport CreateActivationKeyWizard from './CreateActivationKeyWizard';\n\nconst CreateActivationKeyModal = (props) => {\n  const queryClient = useQueryClient();\n  const [created, setCreated] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const { handleModalToggle, isOpen } = props;\n  const { mutate, isLoading } = useCreateActivationKey();\n  const showNewWizard = useFeatureFlag(\n    'sed-frontend.activationKeysDetailsPage'\n  );\n  const submitForm = (formData) => {\n    const { name, role, serviceLevel, usage } = formData;\n    mutate(\n      { name, role, serviceLevel, usage },\n      {\n        onSuccess: () => {\n          setError(false);\n          setCreated(true);\n          queryClient.invalidateQueries('activation_keys');\n        },\n        onError: () => {\n          setError(true);\n          setCreated(false);\n        },\n      }\n    );\n  };\n  const CreateActivationKeyWizardModal = () => (\n    <CreateActivationKeyWizard onClose={handleModalToggle} isOpen={isOpen} />\n  );\n  const LegacyModel = () => (\n    <Modal\n      variant={ModalVariant.large}\n      title=\"Create new activation key\"\n      description=\"\"\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n    >\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <ActivationKeyForm\n          handleModalToggle={handleModalToggle}\n          submitForm={submitForm}\n          isSuccess={created}\n          isError={error}\n        />\n      )}\n    </Modal>\n  );\n  return showNewWizard ? <CreateActivationKeyWizardModal /> : <LegacyModel />;\n};\n\nCreateActivationKeyModal.propTypes = {\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  activationKeyName: propTypes.string,\n};\n\nexport default CreateActivationKeyModal;\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  ActionGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ActivationKeysTable from '../ActivationKeysTable';\nimport { useQueryClient } from 'react-query';\nimport NoAccessView from './no-access';\nimport NoActivationKeysFound from '../EmptyState';\nimport CreateActivationKeyModal from '../Modals/CreateActivationKeyModal';\nimport EditActivationKeyModal from '../Modals/EditActivationKeyModal';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport CreateActivationKeyButton from './CreateActivationKeyButton';\nimport DeleteActivationKeyConfirmationModal from '../Modals/DeleteActivationKeyConfirmationModal';\nimport ActivationKeysDocsPopover from '../ActivationKeysDocsPopover';\nconst ActivationKeys = () => {\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const { isLoading, error, data } = useActivationKeys();\n  const [isOpen, setisOpen] = useState(false);\n  const [currentKeyName, setCurrentKeyName] = useState('');\n\n  const [isDeleteActivationKeyModalOpen, setIsDeleteActivationKeyModalOpen] =\n    useState(false);\n  const [isEditActivationKeyModalOpen, setIsEditActivationKeyModalOpen] =\n    useState(false);\n  const handleModalToggle = () => {\n    setisOpen(!isOpen);\n  };\n\n  const popoverContent = (\n    <TextContent className=\"pf-u-font-size-sm\">\n      <Text>\n        Activation keys assist you in registering systems. Metadata such as\n        role, system purpose, and usage can be automatically attached to systems\n        via an activation key, and monitored with &nbsp;\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={'https://console.redhat.com/insights/subscriptions/rhel'}\n        >\n          Subscription Watch.\n        </a>\n      </Text>\n      <Text>\n        To register with an activation key, you will need your organization ID:{' '}\n        <b>{user.orgId}</b>\n      </Text>\n    </TextContent>\n  );\n\n  const actions = (activationKeyName) => {\n    return [\n      {\n        title: 'Edit',\n        onClick: () => handleEditActivationKeyModalToggle(activationKeyName),\n      },\n      {\n        title: 'Delete',\n        onClick: () => handleDeleteActivationKeyModalToggle(activationKeyName),\n      },\n    ];\n  };\n  let pageContent;\n  if (isLoading) {\n    pageContent = <Loading />;\n  } else if (!isLoading && !error && !data.length) {\n    pageContent = (\n      <NoActivationKeysFound handleModalToggle={handleModalToggle} />\n    );\n  } else if (!isLoading && !error && data.length) {\n    pageContent = (\n      <>\n        <ActionGroup>\n          <CreateActivationKeyButton onClick={handleModalToggle} />\n        </ActionGroup>\n        <ActivationKeysTable actions={actions} />\n      </>\n    );\n  }\n\n  const setKeyName = (modalOpen, name) => {\n    let currentName = modalOpen ? '' : name;\n    setCurrentKeyName(currentName);\n  };\n\n  const handleDeleteActivationKeyModalToggle = (name) => {\n    setKeyName(isDeleteActivationKeyModalOpen, name);\n    setIsDeleteActivationKeyModalOpen(!isDeleteActivationKeyModalOpen);\n  };\n\n  const handleEditActivationKeyModalToggle = (name) => {\n    setKeyName(isEditActivationKeyModalOpen, name);\n    setIsEditActivationKeyModalOpen(!isEditActivationKeyModalOpen);\n  };\n\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <Split hasGutter className=\"page-title\">\n            <SplitItem isFilled>\n              <Flex>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                  <PageHeaderTitle title=\"Activation Keys\" />\n                </FlexItem>\n                <FlexItem>\n                  <ActivationKeysDocsPopover\n                    popoverContent={popoverContent}\n                    title=\"Activation Keys\"\n                    position=\"right\"\n                  />\n                </FlexItem>\n              </Flex>\n            </SplitItem>\n          </Split>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              Organization ID: {user.orgId}\n            </Text>\n          </TextContent>\n        </PageHeader>\n        <Main>\n          <PageSection variant={PageSectionVariants.light}>\n            {pageContent}\n          </PageSection>\n        </Main>\n        <CreateActivationKeyModal\n          isOpen={isOpen}\n          handleModalToggle={handleModalToggle}\n        />\n        <EditActivationKeyModal\n          title=\"Edit activation key\"\n          isOpen={isEditActivationKeyModalOpen}\n          handleModalToggle={handleEditActivationKeyModalToggle}\n          activationKeyName={currentKeyName}\n          modalSize=\"large\"\n        />\n        <DeleteActivationKeyConfirmationModal\n          handleModalToggle={handleDeleteActivationKeyModalToggle}\n          isOpen={isDeleteActivationKeyModalOpen}\n          name={currentKeyName}\n        />\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKeys);\n","import ActivationKeys from './ActivationKeys';\n\nexport default ActivationKeys;\n"],"names":["fetchActivationKeysData","window","insights","chrome","auth","getToken","token","fetch","headers","Authorization","response","json","activationKeysData","body","getActivationKeys","keysData","useActivationKeys","useQuery","customActionsToggle","props","KebabToggle","onToggle","isDisabled","className","ActivationKeysTable","actions","columnNames","isLoading","error","data","user","useQueryClient","getQueryData","url","useRouteMatch","keyDetailsIsEnabled","useFeatureFlag","Results","TableComposable","Thead","Tr","ouiaSafe","Th","width","Td","Tbody","map","datum","rowActions","name","key","modifier","dataLabel","Link","to","role","serviceLevel","usage","isActionCell","ActionsColumn","items","rbacPermissions","canWriteActivationKeys","actionsToggle","Loading","Unavailable","propTypes","CreateActivationKeyButton","onClick","WriteOnlyButton","W","variant","PropTypes","NoActivationKeysFound","handleModalToggle","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","headingLevel","size","EmptyStateBody","activationKeyMutation","method","JSON","stringify","ok","Error","status","statusText","useCreateActivationKey","useMutation","SetNamePage","setName","Text","component","TextVariants","Form","onSubmit","e","preventDefault","FormGroup","label","isRequired","helperText","fieldId","TextInput","id","type","value","onChange","SetWorkloadPage","workloadOptions","workload","setWorkload","wl","Radio","isChecked","SetSystemPurposePage","setRole","sla","setSla","setUsage","isError","Options","options","option","FormSelectOption","Placeholder","isPlaceholder","FormSelect","roles","ReviewPage","DescriptionList","isHorizontal","horizontalTermWidthModifier","default","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","confirmCloseBody","ConfirmCloseFooter","onClose","returnToWizard","Button","CreateActivationKeyWizard","isOpen","queryClient","mutate","createActivationKeyIsLoading","useSystemPurposeAttributes","attributesAreLoading","useNotifications","addSuccessNotification","addErrorNotification","useState","isConfirmClose","setIsConfirmClose","shouldConfirmClose","setShouldConfirmClose","currentStep","setCurrentStep","steps","nextButtonText","Modal","ModalVariant","showClose","title","undefined","titleIconVariant","footer","hasNoBodyWrapper","Wizard","height","navAriaLabel","mainAriaLabel","onCurrentStepChanged","step","startAtStep","onSave","onSuccess","invalidateQueries","onError","description","CreateActivationKeyModal","React","created","setCreated","setError","showNewWizard","submitForm","formData","CreateActivationKeyWizardModal","LegacyModel","ActivationKeyForm","isSuccess","activationKeyName","withRouter","pageContent","setisOpen","currentKeyName","setCurrentKeyName","isDeleteActivationKeyModalOpen","setIsDeleteActivationKeyModalOpen","isEditActivationKeyModalOpen","setIsEditActivationKeyModalOpen","popoverContent","TextContent","target","rel","href","orgId","length","ActionGroup","handleEditActivationKeyModalToggle","handleDeleteActivationKeyModalToggle","setKeyName","modalOpen","Page","PageHeader","Split","hasGutter","SplitItem","isFilled","Flex","FlexItem","spacer","PageHeaderTitle","ActivationKeysDocsPopover","position","Main","PageSection","PageSectionVariants","EditActivationKeyModal","modalSize","DeleteActivationKeyConfirmationModal","canReadActivationKeys"],"sourceRoot":""}