{"version":3,"file":"js/ConnectLog.011f5a01be487509cf75.js","mappings":"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","sources":["webpack:///./src/Components/ConnectLog/LogNestedtable.js","webpack:///./src/Components/ConnectLog/LogsTable.js","webpack:///./src/Components/ConnectLog/SystemsTable.js","webpack:///./src/Components/ConnectLog/index.js"],"sourcesContent":["import React from 'react';\nimport {\n  Stack,\n  StackItem,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nconst columns = [\n  { title: 'Service' },\n  {\n    title: 'State',\n  },\n];\n\nconst rowMapper = {\n  useOpenSCAP: 'Use OpenSCAP for Compliance policies',\n  enableCloudConnector:\n    'Enable Cloud Connector to fix issues directly from Insights',\n};\n\nconst LogNestedTable = ({ services, isInsights }) => {\n  return (\n    <Stack>\n      <StackItem>\n        <TextContent>\n          <Text component={TextVariants.h3}>State pushed to systems</Text>\n        </TextContent>\n      </StackItem>\n      <Table\n        aria-label=\"Active services Table\"\n        className=\"sed-c-services__table\"\n        cells={columns}\n        rows={[\n          {\n            noPadding: true,\n            cells: [\n              'Connected to Red Hat Insighsts',\n              isInsights ? 'on' : 'off',\n            ],\n          },\n          ...Object.entries(services).map(([key, value]) => [\n            rowMapper[key],\n            value === 'enabled' ? 'on' : 'off',\n          ]),\n        ]}\n        variant=\"compact\"\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nLogNestedTable.propTypes = {\n  services: PropTypes.shape({\n    useOpenSCAP: PropTypes.bool,\n    enableCloudConnector: PropTypes.bool,\n  }).isRequired,\n  isInsights: PropTypes.bool.isRequired,\n};\n\nexport default LogNestedTable;\n","import React, { Fragment, useEffect, useState, useCallback } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n  expandable,\n  cellWidth,\n} from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport {\n  Pagination,\n  Skeleton,\n  PaginationVariant,\n  Button,\n} from '@patternfly/react-core';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { fetchLog } from '../../store/actions';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport flatMap from 'lodash/flatMap';\nimport LogNestedTable from './LogNestedtable';\nimport { downloadFile } from '../../utils/helpers';\nimport { configApi } from '../../api';\n\nconst columns = [\n  {\n    title: 'Initiated date/time',\n    cellFormatters: [expandable],\n  },\n  'Initiator',\n  {\n    title: 'Playbook',\n    transforms: [cellWidth(20)],\n  },\n];\n\nconst rowsMapper = (results, opened) =>\n  flatMap(\n    results.map(({ account, created_at: createdAt, id, state }, key) => [\n      {\n        id,\n        isOpen: opened.includes(id),\n        cells: [\n          <Fragment key=\"date\">\n            <DateFormat date={new Date(createdAt)} extraTitle=\"Created at: \" />\n          </Fragment>,\n          account,\n          <Fragment key={`download file-${id}`}>\n            <Button\n              variant=\"link\"\n              isInline\n              onClick={() => {\n                (async () => {\n                  const data = await configApi.getPlaybookById(id);\n                  downloadFile(data);\n                })();\n              }}\n            >\n              Download\n            </Button>\n          </Fragment>,\n        ],\n      },\n      {\n        parent: key * 2,\n        cells: [\n          <Fragment key=\"nested-table\">\n            <LogNestedTable\n              services={{\n                useOpenSCAP: state.compliance_openscap,\n                enableCloudConnector: state.remediations,\n              }}\n              isInsights={state.insights}\n            />\n          </Fragment>,\n        ],\n      },\n    ])\n  );\n\nconst LogsTable = () => {\n  const [opened, setOpened] = useState([]);\n  const dispatch = useDispatch();\n  const logLoaded = useSelector(\n    ({ logReducer }) => logReducer?.loaded || false\n  );\n  const rows = useSelector(({ logReducer }) => logReducer?.results || []);\n  const pagination = useSelector(\n    ({ logReducer }) => ({\n      itemCount: logReducer?.total,\n      perPage: logReducer?.limit,\n      page:\n        Math.floor((logReducer?.offset || 0) / (logReducer?.limit || 0)) + 1,\n    }),\n    shallowEqual\n  );\n  useEffect(() => {\n    dispatch(fetchLog());\n  }, []);\n  const onCollapse = (_e, _key, isOpen, { id }) => {\n    setOpened(() =>\n      isOpen ? [...opened, id] : opened.filter((openId) => openId !== id)\n    );\n  };\n\n  const setPage = useCallback(\n    (_e, pageNumber) =>\n      dispatch(fetchLog({ page: pageNumber, perPage: pagination.perPage })),\n    [dispatch, pagination.perPage]\n  );\n\n  const setPerPage = useCallback(\n    (_e, perPage) => dispatch(fetchLog({ page: 1, perPage })),\n    [dispatch]\n  );\n\n  return (\n    <Fragment>\n      <PrimaryToolbar\n        pagination={\n          logLoaded ? (\n            {\n              ...pagination,\n              onSetPage: setPage,\n              onPerPageSelect: setPerPage,\n            }\n          ) : (\n            <Skeleton width=\"33%\" />\n          )\n        }\n      />\n      {logLoaded ? (\n        <Table\n          aria-label=\"Logs table\"\n          variant={TableVariant.compact}\n          rows={rowsMapper(rows, opened)}\n          cells={columns}\n          onCollapse={onCollapse}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <SkeletonTable colSize={3} rowSize={10} />\n      )}\n      <TableToolbar isFooter>\n        {logLoaded ? (\n          <Pagination\n            {...pagination}\n            variant={PaginationVariant.bottom}\n            onSetPage={setPage}\n            onPerPageSelect={setPerPage}\n          />\n        ) : (\n          <Skeleton width=\"33%\" />\n        )}\n      </TableToolbar>\n    </Fragment>\n  );\n};\n\nLogsTable.propTypes = {\n  isActive: PropTypes.bool,\n};\n\nLogsTable.defaultProps = {\n  isActive: false,\n};\n\nexport default LogsTable;\n","import React, { useContext, useRef } from 'react';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { RegistryContext } from '../../store';\n\nconst SystemsTable = () => {\n  const getEntitiesRef = useRef(() => undefined);\n  const { getRegistry } = useContext(RegistryContext);\n  return (\n    <InventoryTable\n      variant=\"compact\"\n      showTags\n      tableProps={{\n        canSelectAll: false,\n      }}\n      getEntities={async (_i, config) => {\n        config.filter = {\n          system_profile: {\n            rhc_client_id: 'not_nil',\n          },\n        };\n        const data = await getEntitiesRef.current(undefined, config, true);\n        return data;\n      }}\n      onRowClick={(_e, id) =>\n        (window.location.href = `./insights/inventory/${id}`)\n      }\n      onLoad={({ mergeWithEntities, api }) => {\n        getEntitiesRef.current = api?.getEntities;\n        getRegistry()?.register?.({\n          ...mergeWithEntities(),\n        });\n      }}\n    />\n  );\n};\n\nexport default SystemsTable;\n","import React, { useEffect, useState } from 'react';\nimport { Modal, Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport LogsTable from './LogsTable';\nimport SystemsTable from './SystemsTable';\nimport { useHistory } from 'react-router-dom';\nimport pckg from '../../../package.json';\nimport { useDispatch } from 'react-redux';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nconst { routes: paths } = pckg;\n\nconst tabMapper = ['runs', 'systems'];\n\nconst ConnectLog = () => {\n  const [activeTabKey, setActiveTabKey] = useState(0);\n  const dispatch = useDispatch();\n  const { push, location } = useHistory();\n  useEffect(() => {\n    dispatch(clearNotifications());\n    const searchParams = new URLSearchParams(location.search);\n    const activeTab = tabMapper.findIndex(\n      (item) => item === searchParams.get('active_tab')\n    );\n    if (activeTab !== -1) {\n      setActiveTabKey(activeTab);\n    } else {\n      push({\n        pathname: location.pathname,\n        search: new URLSearchParams({\n          active_tab: tabMapper[0],\n        }).toString(),\n      });\n    }\n  }, []);\n  return (\n    <Modal\n      title=\"Red Hat connect log\"\n      variant=\"medium\"\n      isOpen={true}\n      onClose={() => push(paths.connector)}\n    >\n      <Tabs\n        activeKey={activeTabKey}\n        onSelect={(_e, tabKey) => {\n          push({\n            pathname: location.pathname,\n            search: new URLSearchParams({\n              active_tab: tabMapper[tabKey],\n            }).toString(),\n          });\n          setActiveTabKey(tabKey);\n        }}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Runs</TabTitleText>}>\n          <LogsTable />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Systems</TabTitleText>}>\n          <SystemsTable />\n        </Tab>\n      </Tabs>\n    </Modal>\n  );\n};\n\nexport default ConnectLog;\n"],"names":["columns","title","rowMapper","useOpenSCAP","enableCloudConnector","LogNestedTable","services","isInsights","Stack","StackItem","TextContent","Text","component","TextVariants","Table","className","cells","rows","noPadding","Object","entries","map","key","value","variant","TableHeader","TableBody","propTypes","PropTypes","isRequired","cellFormatters","expandable","transforms","cellWidth","rowsMapper","results","opened","flatMap","account","createdAt","created_at","id","state","isOpen","includes","Fragment","DateFormat","date","Date","extraTitle","Button","isInline","onClick","configApi","data","downloadFile","parent","compliance_openscap","remediations","insights","LogsTable","useState","setOpened","dispatch","useDispatch","logLoaded","useSelector","logReducer","loaded","pagination","itemCount","total","perPage","limit","page","Math","floor","offset","shallowEqual","useEffect","fetchLog","setPage","useCallback","_e","pageNumber","setPerPage","PrimaryToolbar","onSetPage","onPerPageSelect","Skeleton","width","TableVariant","onCollapse","_key","filter","openId","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","PaginationVariant","isActive","defaultProps","getEntitiesRef","useRef","getRegistry","useContext","RegistryContext","InventoryTable","showTags","tableProps","canSelectAll","getEntities","_i","config","system_profile","rhc_client_id","current","undefined","onRowClick","window","location","href","onLoad","mergeWithEntities","api","register","paths","pckg","tabMapper","activeTabKey","setActiveTabKey","useHistory","push","clearNotifications","searchParams","URLSearchParams","search","activeTab","findIndex","item","get","pathname","active_tab","toString","Modal","onClose","connector","Tabs","activeKey","onSelect","tabKey","Tab","eventKey","TabTitleText"],"sourceRoot":""}