{"version":3,"file":"js/35.1678116595740.47e483e42734f1a00154.js","mappings":"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","sources":["webpack:///./src/hooks/useRbacPermissions.js","webpack:///./src/utils/platformServices.js","webpack:///./src/Components/Authentication/Authentication.js","webpack:///./src/hooks/useUser.js","webpack:///./src/Components/shared/breadcrumbs.js","webpack:///./src/Components/AdditionalRepositoriesTable/NoAdditionalRepositories.js","webpack:///./src/Components/AdditionalRepositoriesTable/AdditionalRepositoriesTable.js","webpack:///./src/hooks/useAvailableRepositories.js","webpack:///./src/Components/ActivationKey/AddAdditionalRepositoriesButton.js","webpack:///./src/hooks/useAddAdditionalRepositories.js","webpack:///./src/Components/AddAdditionalRepositoriesTable/AddAdditionalRepositoriesToolbar.js","webpack:///./src/Components/AddAdditionalRepositoriesTable/AddAdditionalRepositoriesTable.js","webpack:///./src/Components/Modals/AddAdditionalRepositoriesModal.js","webpack:///./src/Components/ActivationKey/AdditionalRepositoriesCard.js","webpack:///./src/Components/ActivationKey/EditButton.js","webpack:///./src/Components/NoAccessPopover/NoAccessPopover.js","webpack:///./src/Components/NoAccessPopover/index.js","webpack:///./src/Components/ActivationKey/SystemPurposeCard.js","webpack:///./src/Components/ActivationKey/WorkloadCard.js","webpack:///./src/Components/ActivationKey/DeleteButton.js","webpack:///./src/Components/ActivationKey/ActivationKey.js","webpack:///./src/Routes.js","webpack:///./src/Components/Notifications/Notifications.js","webpack:///./src/App.js","webpack:///./src/Components/ActivationKeys/no-access.js","webpack:///./src/Components/ActivationKeysDocsPopover/ActivationKeysDocsPopover.js","webpack:///./src/Components/Forms/ActivationKeyForm.js","webpack:///./src/Components/Forms/ActivationKeysFormSelect.js","webpack:///./src/Components/LoadingState/Loading.js","webpack:///./src/hooks/useDeleteActivationKey.js","webpack:///./src/Components/Modals/DeleteActivationKeyConfirmationModal.js","webpack:///./src/hooks/useUpdateActivationKey.js","webpack:///./src/Components/Forms/SystemPurposeForm.js","webpack:///./src/Components/Modals/EditActivationKeyModal.js","webpack:///./src/Components/WriteOnlyButton/WriteOnlyButton.js","webpack:///./src/contexts/NotificationProvider.js","webpack:///./src/hooks/useActivationKey.js","webpack:///./src/hooks/useFeatureFlag.js","webpack:///./src/hooks/useNotifications.js","webpack:///./src/hooks/useSystemPurposeAttributes.js","webpack:///./src/store/index.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst getUserRbacPermissions = async () => {\n  return Promise.resolve(\n    window.insights.chrome.getUserPermissions('config-manager')\n  ).then((rawRbacPermissions) => {\n    const permissions = rawRbacPermissions.map(\n      (rawPermission) => rawPermission.permission\n    );\n    const rbacPermissions = {\n      canReadActivationKeys:\n        permissions.includes('config-manager:activation_keys:read') ||\n        permissions.includes('config-manager:activation_keys:*'),\n      canWriteActivationKeys:\n        permissions.includes('config-manager:activation_keys:write') ||\n        permissions.includes('config-manager:activation_keys:*'),\n    };\n\n    return rbacPermissions;\n  });\n};\n\nconst useRbacPermissions = () => {\n  return useQuery('rbac_permissions', () => getUserRbacPermissions());\n};\n\nexport { getUserRbacPermissions, useRbacPermissions as default };\n","const authenticateUser = () => {\n  try {\n    return window.insights.chrome.auth.getUser();\n  } catch (e) {\n    throw new Error(`Error authenticating user: ${e.message}`);\n  }\n};\n\nexport { authenticateUser };\n","import React, { useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { useLocation } from 'react-router-dom';\nimport useUser from '../../hooks/useUser';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nconst Authentication = ({ children }) => {\n  const queryClient = useQueryClient();\n  const location = useLocation();\n\n  const { isLoading, isFetching, isSuccess, isError } = useUser();\n\n  useEffect(() => {\n    isSuccess && window.insights?.chrome?.hideGlobalFilter();\n  }, [isSuccess]);\n\n  useEffect(() => {\n    /**\n     * On every rerender, based on URL change (location.pathname),\n     * reset the user's status to loading before authenticating again.\n     */\n    queryClient.invalidateQueries('user');\n  }, [location.pathname]);\n\n  if (isError === true) {\n    return <Unavailable />;\n  } else if (isLoading === true || isFetching === true) {\n    return <Loading />;\n  } else if (isSuccess === true) {\n    return <>{children}</>;\n  }\n};\n\nAuthentication.propTypes = {\n  children: propTypes.object,\n};\n\nexport default Authentication;\n","import { useQuery } from 'react-query';\nimport { getUserRbacPermissions } from '../hooks/useRbacPermissions';\nimport { authenticateUser } from '../utils/platformServices';\n\nconst getUser = () => {\n  return Promise.all([authenticateUser(), getUserRbacPermissions()]).then(\n    ([userStatus, rbacPermissions]) => {\n      const user = {\n        accountNumber: userStatus.identity.account_number,\n        orgId: userStatus?.identity?.internal?.org_id,\n        rbacPermissions: rbacPermissions,\n      };\n      return user;\n    }\n  );\n};\n\nconst useUser = () => {\n  return useQuery('user', () => getUser());\n};\n\nexport { getUser, useUser as default };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nconst Breadcrumbs = (breadcrumbs) => {\n  return breadcrumbs ? (\n    <Breadcrumb>\n      {Object.values(breadcrumbs).map((item) =>\n        item.title ? (\n          <BreadcrumbItem key={item.title} isActive={item.isActive}>\n            {(item.to && (\n              <NavLink exact to={item.to}>\n                {item.title}\n              </NavLink>\n            )) ||\n              item.title}\n          </BreadcrumbItem>\n        ) : (\n          '/'\n        )\n      )}\n    </Breadcrumb>\n  ) : null;\n};\n\nBreadcrumbs.propTypes = {\n  breadcrumbs: PropTypes.object,\n};\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\n\nconst NoAdditionalRepositories = () => {\n  return (\n    <>\n      <EmptyState>\n        <EmptyStateIcon icon={AddCircleOIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          No additional repositories\n        </Title>\n        <EmptyStateBody>\n          You currently have no additional repositories to display.\n        </EmptyStateBody>\n      </EmptyState>\n    </>\n  );\n};\n\nexport default NoAdditionalRepositories;\n","import React from 'react';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from '@patternfly/react-table';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport NoAdditionalRepositories from './NoAdditionalRepositories';\n\nconst AdditionalRepositoriesTable = (props) => {\n  const { repositories } = props;\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(10);\n  const [activeSortIndex, setActiveSortIndex] = React.useState(null);\n  const [activeSortDirection, setActiveSortDirection] = React.useState(null);\n  const columnNames = {\n    repositoryLabel: 'Label',\n    repositoryName: 'Name',\n  };\n\n  const getSortableRowValues = (repo) => {\n    const { repositoryLabel } = repo;\n    return [repositoryLabel];\n  };\n\n  const getSortParams = (columnIndex) => ({\n    sortBy: {\n      index: activeSortIndex,\n      direction: activeSortDirection,\n      defaultDirection: 'asc',\n    },\n    onSort: (_event, index, direction) => {\n      setActiveSortIndex(index);\n      setActiveSortDirection(direction);\n    },\n    columnIndex,\n  });\n\n  const sortRepos = (repositories, sortIndex) => {\n    const sortedRepos = repositories?.sort((a, b) => {\n      const aValue = getSortableRowValues(a)[sortIndex] || '';\n      const bValue = getSortableRowValues(b)[sortIndex] || '';\n      let result = 0;\n      if (aValue < bValue) {\n        result = -1;\n      } else if (aValue > bValue) {\n        result = 1;\n      }\n      return activeSortDirection == 'asc' ? result : -1 * result;\n    });\n    return sortedRepos;\n  };\n\n  const getPage = (repo) => {\n    const first = (page - 1) * perPage;\n    const last = first + perPage;\n    return repo?.slice(first, last);\n  };\n\n  const handleSetPage = (_event, page) => {\n    setPage(page);\n  };\n\n  const handlePerPageSelect = (_event, perPage) => {\n    setPerPage(perPage);\n    setPage(1);\n  };\n\n  const countProducts = () => {\n    const filtedRepo = sortedRepositories;\n    return filtedRepo?.length;\n  };\n\n  const PaginationTop = () => (\n    <Pagination\n      itemCount={countProducts(repositories)}\n      perPage={perPage}\n      page={page}\n      onSetPage={handleSetPage}\n      onPerPageSelect={handlePerPageSelect}\n      variant={PaginationVariant.top}\n      isCompact\n    />\n  );\n\n  const PaginationBottom = () => (\n    <Pagination\n      itemCount={countProducts(repositories)}\n      perPage={perPage}\n      page={page}\n      onSetPage={handleSetPage}\n      onPerPageSelect={handlePerPageSelect}\n      variant={PaginationVariant.bottom}\n    />\n  );\n\n  const sortedRepositories = sortRepos(repositories, activeSortIndex);\n  const paginatedRepos = getPage(sortedRepositories);\n\n  return (\n    <React.Fragment>\n      <PaginationTop />\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th width={40}>{columnNames.repositoryName}</Th>\n            <Th sort={getSortParams(0)}>{columnNames.repositoryLabel}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {paginatedRepos?.map((repository, rowIndex) => {\n            return (\n              <Tr key={rowIndex} ouiaSafe={true}>\n                <Td dataLabel={columnNames.repositoryName}>\n                  {repository.repositoryName}\n                </Td>\n                <Td dataLabel={columnNames.repositoryLabel}>\n                  {repository.repositoryLabel}\n                </Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </TableComposable>\n      {repositories.length === 0 && <NoAdditionalRepositories />}\n      <PaginationBottom />\n    </React.Fragment>\n  );\n};\n\nAdditionalRepositoriesTable.propTypes = {\n  repositories: propTypes.array,\n};\n\nexport default AdditionalRepositoriesTable;\n","import { useQuery } from 'react-query';\n\nconst fetchAdditionalRepositories = async (keyName) => {\n  if (!keyName) {\n    return false;\n  }\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch(\n    `/api/rhsm/v2/activation_keys/${keyName}/available_repositories?default=Disabled`,\n    {\n      headers: { Authorization: `Bearer ${token}` },\n    }\n  );\n\n  const repositoriesData = await response.json();\n\n  return repositoriesData.body;\n};\n\nconst getAvailableRepositories = async (keyName) => {\n  const repositories = await fetchAdditionalRepositories(keyName);\n  return repositories;\n};\n\nconst useAvailableRepositories = (keyName) => {\n  return useQuery(`activation_key_${keyName}_available_repositories`, () =>\n    getAvailableRepositories(keyName)\n  );\n};\n\nexport { useAvailableRepositories as default };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { WriteOnlyButton } from '../WriteOnlyButton';\n\nconst AddAdditionalRepositoriesButton = ({ onClick }) => {\n  return (\n    <React.Fragment>\n      <WriteOnlyButton\n        onClick={onClick}\n        variant=\"secondary\"\n        style={{ margin: 15, marginLeft: 0 }}\n      >\n        Add repositories\n      </WriteOnlyButton>\n    </React.Fragment>\n  );\n};\n\nAddAdditionalRepositoriesButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default AddAdditionalRepositoriesButton;\n","import { useMutation } from 'react-query';\n\nconst additionalRepositoriesMutation = async (data) => {\n  const { keyName, selectedRepositories } = data;\n\n  const additionalRepositoryLabels = selectedRepositories.map(\n    (repository) => repository.repositoryLabel\n  );\n\n  if (!keyName) {\n    throw new Error(\n      `Activation Key name must be provided to add additional repositiories.`\n    );\n  }\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch(\n    `/api/rhsm/v2/activation_keys/${keyName}/additional_repositories`,\n    {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(\n        additionalRepositoryLabels.map((label) => ({\n          repositoryLabel: label,\n        }))\n      ),\n    }\n  );\n\n  if (Math.floor(response.status / 100) !== 2) {\n    throw new Error();\n  }\n\n  return response.json();\n};\n\nconst useAddAdditionalRepositories = () => {\n  return useMutation(additionalRepositoriesMutation);\n};\n\nexport { useAddAdditionalRepositories as default };\n","import React, { useState } from 'react';\nimport {\n  SearchInput,\n  Select,\n  SelectOption,\n  ToggleGroupItem,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\n\nconst AddAdditionalRepositoriesToolbar = ({\n  friendlyNameMap,\n  filter,\n  setFilter,\n  filterBy,\n  setFilterBy,\n  selectedOnlyToggleIsDisabled,\n  searchIsDisabled,\n  pagination,\n  onlyShowSelectedRepositories,\n  setOnlyShowSelectedRepositories,\n}) => {\n  const [isSelectFilterByExpanded, setIsSelectFilterByExpanded] =\n    useState(false);\n\n  return (\n    <Toolbar id=\"add-additional-repositories-toolbar\">\n      <ToolbarContent>\n        <ToolbarGroup>\n          <ToolbarItem spacer={{ default: 'spacerNone' }}>\n            <Select\n              isOpen={isSelectFilterByExpanded}\n              onToggle={(isSelectFilterByExpanded) =>\n                setIsSelectFilterByExpanded(isSelectFilterByExpanded)\n              }\n              toggleIcon={<FilterIcon />}\n              placeholderText={friendlyNameMap[filterBy]}\n              onSelect={(_, value) => {\n                setFilterBy(value);\n                setIsSelectFilterByExpanded(false);\n              }}\n            >\n              <SelectOption value=\"repositoryName\">\n                {friendlyNameMap.repositoryName}\n              </SelectOption>\n              <SelectOption value=\"repositoryLabel\">\n                {friendlyNameMap.repositoryLabel}\n              </SelectOption>\n            </Select>\n          </ToolbarItem>\n          <ToolbarItem>\n            <SearchInput\n              placeholder={`Filter by ${friendlyNameMap[filterBy]}`}\n              value={filter}\n              onChange={setFilter}\n              isDisabled={searchIsDisabled}\n              onClear={() => setFilter('')}\n              style={{ width: '400px' }}\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <ToggleGroup>\n              <ToggleGroupItem\n                text=\"All\"\n                isSelected={!onlyShowSelectedRepositories}\n                onChange={(selected) => {\n                  if (selected) {\n                    setOnlyShowSelectedRepositories(false);\n                  }\n                }}\n              />\n              <ToggleGroupItem\n                text=\"Selected\"\n                isSelected={onlyShowSelectedRepositories}\n                onChange={(selected) => {\n                  if (selected) {\n                    setOnlyShowSelectedRepositories(true);\n                  }\n                }}\n                isDisabled={selectedOnlyToggleIsDisabled}\n              />\n            </ToggleGroup>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          {pagination}\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nAddAdditionalRepositoriesToolbar.propTypes = {\n  friendlyNameMap: propTypes.object.isRequired,\n  filter: propTypes.string.isRequired,\n  setFilter: propTypes.func.isRequired,\n  filterBy: propTypes.string.isRequired,\n  setFilterBy: propTypes.func.isRequired,\n  selectedOnlyToggleIsDisabled: propTypes.bool.isRequired,\n  searchIsDisabled: propTypes.bool.isRequired,\n  pagination: propTypes.object.isRequired,\n  onlyShowSelectedRepositories: propTypes.bool.isRequired,\n  setOnlyShowSelectedRepositories: propTypes.func.isRequired,\n};\n\nexport default AddAdditionalRepositoriesToolbar;\n","import {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStatePrimary,\n  Pagination,\n  Title,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from '@patternfly/react-table';\nimport React, { useEffect, useState } from 'react';\nimport Loading from '../LoadingState/Loading';\nimport AddAdditionalRepositoriesToolbar from './AddAdditionalRepositoriesToolbar';\nimport propTypes from 'prop-types';\n\nconst AddAdditionalRepositoriesTable = (props) => {\n  const {\n    repositories,\n    isLoading,\n    selectedRepositories,\n    setSelectedRepositories,\n  } = props;\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  const [filter, setFilter] = useState('');\n  const [consideredRepositories, setConsideredRepositories] =\n    useState(repositories);\n  const [filteredRepositories, setFilteredRepositories] =\n    useState(repositories);\n  const [paginatedRepositories, setPaginatedRepositories] =\n    useState(repositories);\n  const [filterBy, setFilterBy] = useState('repositoryName');\n  const [onlyShowSelectedRepositories, setOnlyShowSelectedRepositories] =\n    useState(false);\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(10);\n  const [activeSortIndex, setActiveSortIndex] = useState(0);\n  const [activeSortDirection, setActiveSortDirection] = useState('asc');\n\n  const friendlyNameMap = {\n    repositoryName: 'Name',\n    repositoryLabel: 'Label',\n  };\n\n  useEffect(() => {\n    setConsideredRepositories(\n      onlyShowSelectedRepositories ? selectedRepositories : repositories\n    );\n  }, [onlyShowSelectedRepositories]);\n\n  useEffect(() => {\n    setFilteredRepositories(\n      sortRepositories(\n        consideredRepositories.filter((repository) => {\n          return repository[filterBy]\n            .toLowerCase()\n            .includes(filter.toLowerCase());\n        })\n      )\n    );\n  }, [\n    filter,\n    filterBy,\n    consideredRepositories,\n    activeSortIndex,\n    activeSortDirection,\n  ]);\n\n  useEffect(() => {\n    const first = (page - 1) * perPage;\n    const last = first + perPage;\n    setPaginatedRepositories(filteredRepositories.slice(first, last));\n  }, [page, perPage, filteredRepositories]);\n\n  useEffect(() => {\n    setPage(1);\n  }, [filteredRepositories]);\n\n  const getSortableRowValues = (repo) => {\n    const { repositoryName, repositoryLabel } = repo;\n    return [repositoryName, repositoryLabel];\n  };\n\n  const getSortParams = (columnIndex) => ({\n    sortBy: {\n      index: activeSortIndex,\n      direction: activeSortDirection,\n      defaultDirection: 'asc',\n    },\n    onSort: (_event, index, direction) => {\n      setActiveSortIndex(index);\n      setActiveSortDirection(direction);\n    },\n    columnIndex,\n  });\n\n  const sortRepositories = (repositories) => {\n    return repositories.sort((a, b) => {\n      const aValue = getSortableRowValues(a)[activeSortIndex] || '';\n      const bValue = getSortableRowValues(b)[activeSortIndex] || '';\n      let result = 0;\n\n      if (aValue < bValue) {\n        result = -1;\n      } else if (aValue > bValue) {\n        result = 1;\n      }\n\n      return activeSortDirection == 'asc' ? result : -1 * result;\n    });\n  };\n\n  const pagination = (\n    <Pagination\n      itemCount={filteredRepositories.length}\n      perPage={perPage}\n      page={page}\n      onSetPage={(_, newPage) => setPage(newPage)}\n      onPerPageSelect={(_, newPerPage, newPage) => {\n        setPerPage(newPerPage);\n        setPage(newPage);\n      }}\n      isCompact\n    />\n  );\n\n  const emptyState = (\n    <EmptyState>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\">No results found</Title>\n      <EmptyStateBody>\n        No results match the filter criteria. Clear all filters and try again.\n      </EmptyStateBody>\n      <EmptyStatePrimary>\n        <Button variant=\"link\" onClick={() => setFilter('')}>\n          Clear all filters\n        </Button>\n      </EmptyStatePrimary>\n    </EmptyState>\n  );\n\n  return (\n    <>\n      <AddAdditionalRepositoriesToolbar\n        friendlyNameMap={friendlyNameMap}\n        filter={filter}\n        setFilter={setFilter}\n        filterBy={filterBy}\n        setFilterBy={setFilterBy}\n        selectedOnlyToggleIsDisabled={\n          !onlyShowSelectedRepositories && selectedRepositories.length === 0\n        }\n        searchIsDisabled={repositories.length === 0}\n        pagination={pagination}\n        onlyShowSelectedRepositories={onlyShowSelectedRepositories}\n        setOnlyShowSelectedRepositories={setOnlyShowSelectedRepositories}\n      />\n      <TableComposable variant=\"compact\">\n        <Thead>\n          <Tr>\n            <Th />\n            <Th sort={getSortParams(0)}>{friendlyNameMap.repositoryName}</Th>\n            <Th sort={getSortParams(1)}>{friendlyNameMap.repositoryLabel}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {paginatedRepositories.map((repository, rowIndex) => (\n            <Tr key={repository.repositoryLabel}>\n              <Td\n                select={{\n                  rowIndex,\n                  isSelected: selectedRepositories.includes(repository),\n                  onSelect: (_, isSelecting) => {\n                    if (isSelecting) {\n                      setSelectedRepositories([\n                        ...selectedRepositories,\n                        repository,\n                      ]);\n                    } else {\n                      setSelectedRepositories(\n                        selectedRepositories.filter(\n                          (selectedRepository) =>\n                            selectedRepository.repositoryLabel !==\n                            repository.repositoryLabel\n                        )\n                      );\n                    }\n                  },\n                }}\n              />\n              <Td>{repository.repositoryName}</Td>\n              <Td>{repository.repositoryLabel}</Td>\n            </Tr>\n          ))}\n          {paginatedRepositories.length === 0 && (\n            <Tr>\n              <Td colSpan={8}>\n                <Bullseye>{emptyState}</Bullseye>\n              </Td>\n            </Tr>\n          )}\n        </Tbody>\n      </TableComposable>\n      {pagination}\n    </>\n  );\n};\n\nAddAdditionalRepositoriesTable.propTypes = {\n  repositories: propTypes.array.isRequired,\n  isLoading: propTypes.bool.isRequired,\n  error: propTypes.bool.isRequired,\n  selectedRepositories: propTypes.array.isRequired,\n  setSelectedRepositories: propTypes.func.isRequired,\n};\n\nexport default AddAdditionalRepositoriesTable;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Modal,\n  ModalVariant,\n  ActionGroup,\n  Button,\n} from '@patternfly/react-core';\nimport { useQueryClient } from 'react-query';\nimport useAddAdditionalRepositories from '../../hooks/useAddAdditionalRepositories';\nimport useNotifications from '../../hooks/useNotifications';\nimport AddAdditionalRepositoriesTable from '../AddAdditionalRepositoriesTable';\n\nconst AddAdditionalRepositoriesModal = (props) => {\n  const {\n    keyName,\n    handleModalToggle,\n    isOpen,\n    repositories,\n    isLoading: additionalRepositoriesAreLoading,\n    error: additionalRepositoriesError,\n  } = props;\n\n  const queryClient = useQueryClient();\n\n  const [selectedRepositories, setSelectedRepositories] = useState([]);\n\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n\n  const { mutate } = useAddAdditionalRepositories();\n\n  const submitForm = () => {\n    mutate(\n      { selectedRepositories, keyName },\n      {\n        onSuccess: () => {\n          queryClient.resetQueries(`activation_key_${keyName}`);\n          queryClient.resetQueries(\n            `activation_key_${keyName}_available_repositories`\n          );\n          addSuccessNotification(\n            `Repositories have been added for '${keyName}'`\n          );\n        },\n        onError: () => {\n          addErrorNotification('Something went wrong', {\n            description:\n              'Your repositories could not be added. Please try again.',\n          });\n        },\n      }\n    );\n  };\n\n  const editAdditionalRepositoriesDescription =\n    'The core repositories for your operating system version, for example BaseOS and AppStream, are always enabled and do not need to be explicitly added to the activation key.';\n\n  const editChangesButtons = (\n    <ActionGroup>\n      <Button\n        key=\"Save changes\"\n        variant=\"primary\"\n        onClick={() => {\n          submitForm();\n          handleModalToggle();\n        }}\n        isDisabled={selectedRepositories.length === 0}\n      >\n        Save changes\n      </Button>\n      <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n        Cancel\n      </Button>\n    </ActionGroup>\n  );\n\n  return (\n    <React.Fragment>\n      <Modal\n        variant={ModalVariant.large}\n        title=\"Add repositories\"\n        description={editAdditionalRepositoriesDescription}\n        isOpen={isOpen}\n        onClose={handleModalToggle}\n        footer={editChangesButtons}\n      >\n        <AddAdditionalRepositoriesTable\n          repositories={repositories}\n          isLoading={additionalRepositoriesAreLoading}\n          error={additionalRepositoriesError}\n          selectedRepositories={selectedRepositories}\n          setSelectedRepositories={setSelectedRepositories}\n        />\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nAddAdditionalRepositoriesModal.propTypes = {\n  keyName: propTypes.string,\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  repositories: propTypes.array,\n  isLoading: propTypes.func,\n  error: propTypes.func,\n};\n\nexport default AddAdditionalRepositoriesModal;\n","import React from 'react';\nimport { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Title,\n} from '@patternfly/react-core';\nimport AdditionalRepositoriesTable from '../AdditionalRepositoriesTable';\nimport useAvailableRepositories from '../../hooks/useAvailableRepositories';\nimport AddAdditionalRepositoriesButton from '../ActivationKey/AddAdditionalRepositoriesButton';\nimport AddAdditionalRepositoriesModal from '../Modals/AddAdditionalRepositoriesModal';\n\nconst AdditionalRepositoriesCard = (props) => {\n  const { activationKey } = props;\n  const {\n    data: availableRepositories,\n    isLoading,\n    error,\n  } = useAvailableRepositories(activationKey.name);\n\n  const [\n    isEditAdditionalRepositoriesModalOpen,\n    setisEditAdditionalRepositoriesModalOpen,\n  ] = useState(false);\n\n  const handleEditAdditionalRepositoriesToggle = () => {\n    setisEditAdditionalRepositoriesModalOpen(\n      !isEditAdditionalRepositoriesModalOpen\n    );\n  };\n\n  const ButtonWrapper = () => {\n    return (\n      <AddAdditionalRepositoriesButton\n        onClick={handleEditAdditionalRepositoriesToggle}\n      />\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          <Title headingLevel=\"h2\"> Additional repositories</Title>\n        </CardTitle>\n      </CardHeader>\n      <CardBody>\n        <TextContent>\n          <Text component={TextVariants.p}>\n            The core repositories for your operating system version, for example\n            BaseOS and AppStream, are always enabled and do not need to be\n            explicitly added to the activation key.\n          </Text>\n          <ButtonWrapper />\n          <AddAdditionalRepositoriesModal\n            isOpen={isEditAdditionalRepositoriesModalOpen}\n            handleModalToggle={handleEditAdditionalRepositoriesToggle}\n            keyName={activationKey.name}\n            repositories={availableRepositories}\n            isLoading={isLoading}\n            error={error}\n          />\n        </TextContent>\n        <AdditionalRepositoriesTable\n          repositories={activationKey.additionalRepositories}\n        />\n      </CardBody>\n    </Card>\n  );\n};\n\nAdditionalRepositoriesCard.propTypes = {\n  activationKey: propTypes.object,\n  isLoading: propTypes.func,\n  error: propTypes.func,\n};\n\nexport default AdditionalRepositoriesCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { WriteOnlyButton } from '../WriteOnlyButton';\n\nconst EditButton = ({ onClick }) => {\n  return (\n    <React.Fragment>\n      <WriteOnlyButton onClick={onClick} variant=\"secondary\">\n        Edit\n      </WriteOnlyButton>\n    </React.Fragment>\n  );\n};\n\nEditButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default EditButton;\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst NoAccessPopover = ({ content: Button }) => {\n  return (\n    <React.Fragment>\n      <Tooltip\n        content={<div>For editing access, contact your administrator.</div>}\n      >\n        <div>\n          <Button />\n        </div>\n      </Tooltip>\n    </React.Fragment>\n  );\n};\n\nexport default NoAccessPopover;\n\nNoAccessPopover.propTypes = {\n  content: propTypes.elementType,\n};\n","import NoAccessPopover from './NoAccessPopover';\n\nexport default NoAccessPopover;\n","import React from 'react';\nimport {\n  TextContent,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  TextList,\n  Text,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Title,\n  CardActions,\n} from '@patternfly/react-core';\nimport EditButton from './EditButton';\nimport propTypes from 'prop-types';\nimport ActivationKeysDocsPopover from '../ActivationKeysDocsPopover';\nimport NoAccessPopover from '../NoAccessPopover';\nimport { useQueryClient } from 'react-query';\n\nconst SystemPurposeCard = (props) => {\n  const { activationKey, actionHandler } = props;\n  const notDefinedText = 'Not defined';\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n\n  const ButtonWrapper = () => {\n    return <EditButton onClick={actionHandler} />;\n  };\n\n  const docsPopoverContent = (\n    <TextContent>\n      <Text>\n        System purpose values are used by the subscriptions service to help\n        filter and identify hosts. Setting values for these attributes is\n        optional, but doing so ensures that subscriptions reporting accurately\n        reflects the system.\n      </Text>\n    </TextContent>\n  );\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          <Title headingLevel=\"h2\">\n            System Purpose{' '}\n            <ActivationKeysDocsPopover\n              popoverContent={docsPopoverContent}\n              position=\"top\"\n            />{' '}\n          </Title>\n        </CardTitle>\n        <CardActions>\n          {user.rbacPermissions.canWriteActivationKeys ? (\n            <ButtonWrapper />\n          ) : (\n            <NoAccessPopover content={ButtonWrapper} />\n          )}\n        </CardActions>\n      </CardHeader>\n      <CardBody>\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            <TextListItem component={TextListItemVariants.dt}>\n              Role\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {activationKey && activationKey.role\n                ? activationKey.role\n                : notDefinedText}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dt}>SLA</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {activationKey && activationKey.serviceLevel\n                ? activationKey.serviceLevel\n                : notDefinedText}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              Usage\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {activationKey && activationKey.usage\n                ? activationKey.usage\n                : notDefinedText}\n            </TextListItem>\n          </TextList>\n        </TextContent>\n      </CardBody>\n    </Card>\n  );\n};\n\nSystemPurposeCard.propTypes = {\n  activationKey: propTypes.object,\n  actionHandler: propTypes.func,\n};\n\nexport default SystemPurposeCard;\n","import React from 'react';\nimport {\n  TextContent,\n  Text,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport ActivationKeysDocsPopover from '../ActivationKeysDocsPopover';\n\nconst WorkloadCard = (props) => {\n  const { activationKey } = props;\n  const notDefinedText = 'Not defined';\n  const docsPopoverContent = (\n    <TextContent>\n      <Text>\n        A release version enables you to configure your system to use a specific\n        minor release of Red Hat Enterprise Linux. Setting a release version is\n        useful if you are using an extended release of software, such as\n        Extended Update Support. Most users will not set a release version.\n      </Text>\n    </TextContent>\n  );\n  return (\n    <Card style={{ minHeight: '100%' }}>\n      <CardHeader>\n        <CardTitle>\n          <Title headingLevel=\"h2\">\n            Workload{' '}\n            <ActivationKeysDocsPopover\n              popoverContent={docsPopoverContent}\n              position=\"top\"\n            />\n          </Title>\n        </CardTitle>\n      </CardHeader>\n      <CardBody>\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            <TextListItem component={TextListItemVariants.dt}>\n              Release version\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {activationKey && activationKey.releaseVersion\n                ? activationKey.releaseVersion\n                : notDefinedText}\n            </TextListItem>\n          </TextList>\n        </TextContent>\n      </CardBody>\n    </Card>\n  );\n};\n\nWorkloadCard.propTypes = {\n  activationKey: propTypes.object,\n};\n\nexport default WorkloadCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { WriteOnlyButton } from '../WriteOnlyButton';\n\nconst DeleteButton = ({ onClick }) => {\n  return (\n    <React.Fragment>\n      <WriteOnlyButton onClick={onClick} variant=\"secondary\">\n        Delete\n      </WriteOnlyButton>\n    </React.Fragment>\n  );\n};\n\nDeleteButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default DeleteButton;\n","import React, { useState } from 'react';\nimport { withRouter, useParams, useHistory } from 'react-router-dom';\nimport pckg from '../../../package.json';\nimport Breadcrumbs from '../shared/breadcrumbs';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Grid,\n  GridItem,\n  Gallery,\n  GalleryItem,\n  Level,\n  LevelItem,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport AdditionalRepositoriesCard from './AdditionalRepositoriesCard';\nimport useActivationKey from '../../hooks/useActivationKey';\nimport Loading from '../LoadingState/Loading';\nimport SystemPurposeCard from './SystemPurposeCard';\nimport WorkloadCard from './WorkloadCard';\nimport NoAccessView from '../ActivationKeys/no-access';\nimport DeleteButton from './DeleteButton';\nimport DeleteActivationKeyConfirmationModal from '../Modals/DeleteActivationKeyConfirmationModal';\nimport EditActivationKeyModal from '../Modals/EditActivationKeyModal';\nimport NoAccessPopover from '../NoAccessPopover';\nimport { useQueryClient } from 'react-query';\n\nconst ActivationKey = () => {\n  const history = useHistory();\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const { id } = useParams();\n  const { routes: paths } = pckg;\n  const breadcrumbs = [\n    { title: 'Activation Keys', to: paths.activationKeys },\n    { title: id, isActive: true },\n  ];\n  const {\n    isLoading: isKeyLoading,\n    error: keyError,\n    data: activationKey,\n  } = useActivationKey(id);\n\n  const description =\n    'View and edit details and repositories for this activation key.';\n  const [isDeleteActivationKeyModalOpen, setIsDeleteActivationKeyModalOpen] =\n    useState(false);\n  const [isEditActivationKeyModalOpen, setIsEditActivationKeyModalOpen] =\n    useState(false);\n  const handleDeleteActivationKeyModalToggle = (keyDeleted) => {\n    setIsDeleteActivationKeyModalOpen(!isDeleteActivationKeyModalOpen);\n    if (keyDeleted === true) {\n      history.push('/activation-keys');\n    }\n  };\n\n  const handleEditActivationKeyModalToggle = () => {\n    setIsEditActivationKeyModalOpen(!isEditActivationKeyModalOpen);\n  };\n\n  const ButtonWrapper = () => {\n    return (\n      <DeleteButton\n        onClick={handleDeleteActivationKeyModalToggle}\n      ></DeleteButton>\n    );\n  };\n\n  const editModalDescription =\n    'System purpose values are used by the subscriptions service to help filter and identify hosts. Setting values for these attributes is optional, but doing so ensures that subscriptions reporting accurately reflects the system. Only those values available to your account are shown.';\n\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <Level>\n            <LevelItem>\n              <Breadcrumbs {...breadcrumbs} />\n              <PageHeaderTitle title={id} />\n              <TextContent>\n                <Text component={TextVariants.p}>{description}</Text>\n              </TextContent>\n            </LevelItem>\n            <LevelItem>\n              {user.rbacPermissions.canWriteActivationKeys ? (\n                <ButtonWrapper />\n              ) : (\n                <NoAccessPopover content={ButtonWrapper} />\n              )}\n            </LevelItem>\n          </Level>\n        </PageHeader>\n        {isKeyLoading && !keyError ? (\n          <Loading />\n        ) : (\n          <React.Fragment>\n            <Main>\n              <Grid hasGutter>\n                <GridItem span={12}>\n                  <Gallery\n                    hasGutter\n                    minWidths={{\n                      default: '40%',\n                    }}\n                  >\n                    <GalleryItem>\n                      <SystemPurposeCard\n                        activationKey={activationKey}\n                        actionHandler={handleEditActivationKeyModalToggle}\n                      />\n                    </GalleryItem>\n                    <GalleryItem>\n                      <WorkloadCard activationKey={activationKey} />\n                    </GalleryItem>\n                  </Gallery>\n                </GridItem>\n                <GridItem span={12}>\n                  <AdditionalRepositoriesCard\n                    activationKey={activationKey}\n                    actionHandler={handleEditActivationKeyModalToggle}\n                  />\n                </GridItem>\n              </Grid>\n            </Main>\n            <DeleteActivationKeyConfirmationModal\n              handleModalToggle={handleDeleteActivationKeyModalToggle}\n              isOpen={isDeleteActivationKeyModalOpen}\n              name={id}\n            />\n            <EditActivationKeyModal\n              title=\"Edit system purpose\"\n              description={editModalDescription}\n              isOpen={isEditActivationKeyModalOpen}\n              handleModalToggle={handleEditActivationKeyModalToggle}\n              activationKeyName={id}\n              systemPurposeOnly={true}\n              modalSize=\"small\"\n            />\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKey);\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport pckg from '../package.json';\nimport Authentication from './Components/Authentication/Authentication';\nimport ActivationKey from './Components/ActivationKey/ActivationKey';\nimport useFeatureFlag from './hooks/useFeatureFlag';\nconst { routes: paths } = pckg;\n\nconst Dashboard = lazy(() =>\n  import(/* webpackChunkName: \"Dashboard\" */ './Routes/Dashboard')\n);\n\nconst ActivationKeys = lazy(() => import('./Components/ActivationKeys'));\n\nexport const Routes = () => {\n  const keyDetailsIsEnabled = useFeatureFlag(\n    'sed-frontend.activationKeysDetailsPage'\n  );\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      <Authentication>\n        <Switch>\n          {keyDetailsIsEnabled && (\n            <Route path={paths.activationKey} component={ActivationKey} />\n          )}\n          <Route path={paths.activationKeys} component={ActivationKeys} />\n\n          <Route path={paths.connector} component={Dashboard} />\n        </Switch>\n      </Authentication>\n    </Suspense>\n  );\n};\n","import React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertGroup,\n} from '@patternfly/react-core';\nimport useNotifications from '../../hooks/useNotifications';\n\nconst Notifications = () => {\n  const { notifications, removeNotification } = useNotifications();\n\n  return (\n    <AlertGroup isToast>\n      {notifications.map((notification, i) => (\n        <Alert\n          isLiveRegion\n          timeout={notification.timeout}\n          title={notification.message}\n          variant={notification.variant}\n          key={notification.key}\n          actionClose={\n            <AlertActionCloseButton\n              data-testid={`notification-close-btn-${i}`}\n              title={notification.message}\n              variantLabel={`${notification.variant} alert`}\n              onClose={() => {\n                removeNotification(notification.key);\n                if (notification?.downloadHref) {\n                  window.URL.revokeObjectURL(notification.downloadHref);\n                }\n              }}\n            />\n          }\n        >\n          {notification.description && <p>{notification.description}</p>}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n};\n\nexport default Notifications;\n","import React, { useEffect, useContext, useMemo } from 'react';\nimport { Routes } from './Routes';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { RegistryContext } from './store';\nimport { useHistory } from 'react-router-dom';\nimport NotificationProvider from './contexts/NotificationProvider';\nimport Notifications from './Components/Notifications';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 3,\n      retryDelay: 10 * 1000,\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    },\n  },\n});\n\nconst App = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const history = useHistory();\n  useEffect(() => {\n    getRegistry().register({ notifications: notificationsReducer });\n  }, [getRegistry]);\n\n  const appNavClick = useMemo(\n    () => ({\n      settings(redirect) {\n        insights?.chrome?.appNavClick({ id: 'settings', redirect });\n      },\n      activationKeys(redirect) {\n        insights?.chrome?.appNavClick({ id: 'activationKeys', redirect });\n      },\n    }),\n    []\n  );\n\n  useEffect(() => {\n    insights.chrome.init();\n    insights.chrome.identifyApp('connector');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event.domEvent) {\n        history.push(`/${event.navId}`);\n        appNavClick[event.navId] !== undefined\n          ? appNavClick[event.navId](true)\n          : appNavClick.settings(true);\n      }\n    });\n    return () => unregister();\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <NotificationsPortal />\n      <NotificationProvider>\n        <Notifications />\n        <Routes />\n      </NotificationProvider>\n    </QueryClientProvider>\n  );\n};\nexport default App;\n","import {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst NoAccessView = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={LockIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Activation keys can only be accessed by organization administrators.\n      </Title>\n      <EmptyStateBody>\n        If you already know your organization ID and activation key, you can\n        register systems with RHC.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoAccessView;\n","import React from 'react';\nimport { Button, Popover, PopoverPosition } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst ActivationKeysDocsPopover = (props) => {\n  const { title, popoverContent, position } = props;\n  const positions = {\n    right: PopoverPosition.rightStart,\n    left: PopoverPosition.leftStart,\n    top: PopoverPosition.top,\n    bottom: PopoverPosition.bottom,\n  };\n  return (\n    <Popover\n      headerContent={title}\n      position={positions[position]}\n      className=\"connector pf-u-color-100\"\n      bodyContent={popoverContent}\n    >\n      <Button variant=\"plain\" isInline style={{ padding: 0 }}>\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  );\n};\n\nexport default ActivationKeysDocsPopover;\n\nActivationKeysDocsPopover.propTypes = {\n  popoverContent: propTypes.object,\n  title: propTypes.string,\n  position: propTypes.string,\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport useSystemPurposeAttributes from '../../hooks/useSystemPurposeAttributes';\nimport ActivationKeysFormSelect from './ActivationKeysFormSelect';\nimport PropTypes from 'prop-types';\nimport useNotifications from '../../hooks/useNotifications';\n\nconst ActivationKeyForm = (props) => {\n  const { handleModalToggle, submitForm, isSuccess, isError, activationKey } =\n    props;\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const { isLoading, error, data } = useSystemPurposeAttributes();\n  const [name, setName] = useState('');\n  const [role, setRole] = useState('');\n  const [serviceLevel, setServiceLevel] = useState('');\n  const [usage, setUsage] = useState('');\n  const [validated, setValidated] = useState('default');\n  const nameRegex = '^[a-zA-Z0-9-_]*$';\n  const validationText =\n    'Provide a name to be used when registering the activation key. Your activation key name must be unique, may contain only numbers, letters, underscores, and hyphens, and less than 256 characters.';\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (validated === 'success' || activationKey) {\n      submitForm({\n        name: name,\n        role: role,\n        serviceLevel: serviceLevel,\n        usage: usage,\n      });\n    } else {\n      setValidated('error');\n    }\n  };\n\n  const validateName = (value) => {\n    if (value.length === 0 || value.length > 255) {\n      setValidated('error');\n    } else if (!value.match(nameRegex)) {\n      setValidated('error');\n    } else {\n      setValidated('success');\n      setName(value);\n    }\n  };\n\n  useEffect(() => {\n    if (activationKey) {\n      setRole(activationKey.role);\n      setUsage(activationKey.usage);\n      setServiceLevel(activationKey.serviceLevel);\n    }\n  }, [activationKey]);\n\n  const createButtonDisabled = () => {\n    if (activationKey) {\n      return (\n        activationKey.role === role &&\n        activationKey.serviceLevel === serviceLevel &&\n        activationKey.usage === usage\n      );\n    } else {\n      return (\n        validated === 'error' || name.length === 0 || !name.match(nameRegex)\n      );\n    }\n  };\n\n  if (isSuccess) {\n    const successMessage = activationKey\n      ? `Activation key ${activationKey.name} updated successfully.`\n      : 'Activation key created successfully.';\n    addSuccessNotification(successMessage, {\n      timeout: false,\n    });\n    handleModalToggle();\n  } else if (isError) {\n    const errorMessage = activationKey\n      ? `Error updating activation key ${activationKey.name}.`\n      : 'Activation Key was not created, please try again.';\n    addErrorNotification(errorMessage, {\n      timeout: 8000,\n    });\n    handleModalToggle();\n  }\n\n  return (\n    <Form id=\"activation-key-form\" onSubmit={handleSubmit}>\n      {!activationKey && (\n        <FormGroup label=\"Name\" isRequired helperText={validationText}>\n          <TextInput\n            id=\"activation-key-name\"\n            label=\"Name\"\n            isRequired\n            type=\"text\"\n            validated={validated}\n            onChange={validateName}\n            name=\"name\"\n          />\n        </FormGroup>\n      )}\n      {activationKey && (\n        <FormGroup label=\"Name\">\n          {' '}\n          <TextContent>{activationKey.name}</TextContent>\n        </FormGroup>\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.roles}\n          value={role}\n          onSelect={setRole}\n          label=\"Role\"\n          name=\"role\"\n          placeholderValue=\"Select role\"\n          disableDefaultValues={activationKey ? true : false}\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Role is used to categorize systems by the workload on the\n                    system\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Only roles available to your account are shown.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required role from the list. The list only contains roles available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.serviceLevel}\n          value={serviceLevel}\n          onSelect={setServiceLevel}\n          label=\"Service Level Agreement (SLA)\"\n          name=\"serviceLevel\"\n          placeholderValue=\"Select a service level agreement\"\n          disableDefaultValues={activationKey ? true : false}\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Service Level Agreement (SLA) determines the level of\n                    support for systems registered with this activation key.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required service level from the list. The list only contains service levels available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.usage}\n          value={usage}\n          onSelect={setUsage}\n          label=\"Usage\"\n          name=\"usage\"\n          placeholderValue=\"Select usage\"\n          disableDefaultValues={activationKey ? true : false}\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Usage is used to categorize systems by how they are meant to\n                    be used, and therefore supported.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required usage from the list. The list only contains usages available to the activation key.\"\n        />\n      )}\n      <ActionGroup>\n        <Button\n          key=\"create\"\n          id=\"submit-activation-key-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={createButtonDisabled()}\n          data-testid=\"activation-key-submit-button\"\n        >\n          {activationKey ? 'Save changes' : 'Create'}\n        </Button>\n\n        <Button\n          key=\"cancel\"\n          id=\"cancel-activation-key-button\"\n          variant=\"link\"\n          onClick={handleModalToggle}\n        >\n          Cancel\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\n\nActivationKeyForm.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  isSuccess: PropTypes.bool,\n  isError: PropTypes.bool,\n  activationKey: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n};\n\nexport default ActivationKeyForm;\n","import React, { useState } from 'react';\nimport {\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n} from '@patternfly/react-core';\n\nimport PropTypes from 'prop-types';\n\nconst ActivationKeysFormSelect = (props) => {\n  const {\n    label,\n    popover,\n    data,\n    onSelect,\n    helperText,\n    name,\n    value,\n    placeholderValue,\n    disableDefaultValues,\n  } = props;\n  const [selected, setSelected] = useState('');\n  const options = data.map((role) => {\n    return <FormSelectOption key={role} value={role} label={role} />;\n  });\n  const valueChange = (value) => {\n    setSelected(value);\n    onSelect(value);\n  };\n\n  return (\n    <FormGroup label={label} labelIcon={popover} helperText={helperText}>\n      <FormSelect\n        onChange={valueChange}\n        value={selected || value}\n        name={name}\n        aria-label={placeholderValue}\n      >\n        {options}\n        <FormSelectOption\n          label={placeholderValue}\n          isPlaceholder={true}\n          isDisabled={disableDefaultValues}\n        />\n      </FormSelect>\n    </FormGroup>\n  );\n};\n\nActivationKeysFormSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  popover: PropTypes.element,\n  helperText: PropTypes.string,\n  data: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  placeholderValue: PropTypes.string,\n  value: PropTypes.string,\n  disableDefaultValues: PropTypes.bool,\n};\n\nexport default ActivationKeysFormSelect;\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst Loading = () => {\n  return (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default Loading;\n","import { useMutation } from 'react-query';\nconst deleteActivationKeyMutation = async (name) => {\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch(`/api/rhsm/v2/activation_keys/${name}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error deleting activation key: ${response.statusText}.`\n    );\n  }\n};\n\nconst useDeleteActivationKey = () => {\n  return useMutation(deleteActivationKeyMutation);\n};\n\nexport { useDeleteActivationKey as default };\n","import * as React from 'react';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport useDeleteActivationKey from '../../hooks/useDeleteActivationKey';\nimport useNotifications from '../../hooks/useNotifications';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\n\nconst DeleteActivationKeyConfirmationModal = (props) => {\n  const { isOpen, handleModalToggle, name } = props;\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const { mutate, isLoading } = useDeleteActivationKey();\n  const queryClient = useQueryClient();\n\n  const deleteActivationKey = (name) => {\n    mutate(name, {\n      onSuccess: (_data, name) => {\n        queryClient.setQueryData('activation_keys', (oldData) =>\n          oldData.filter((entry) => entry.name != name)\n        );\n        addSuccessNotification(`Activation key ${name} deleted`);\n        handleModalToggle(true);\n      },\n      onError: () => {\n        addErrorNotification('Something went wrong. Please try again');\n        handleModalToggle();\n      },\n    });\n    mutate;\n  };\n  const actions = [\n    <Button\n      key=\"confirm\"\n      variant=\"danger\"\n      onClick={() => deleteActivationKey(name)}\n      data-testid=\"delete-activation-key-confirmation-modal-confirm-button\"\n    >\n      Delete\n    </Button>,\n    <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n      Cancel\n    </Button>,\n  ];\n\n  const title = (\n    <>\n      <TextContent>\n        <Text component={TextVariants.h2}>\n          <ExclamationTriangleIcon size=\"md\" color=\"#F0AB00\" /> Delete\n          activation key?\n        </Text>\n      </TextContent>\n    </>\n  );\n  const content = () => {\n    if (isLoading) {\n      return <Loading />;\n    } else {\n      return (\n        <TextContent>\n          <Text component={TextVariants.p}>\n            <b>{name}</b> will no longer be available for use. This operation\n            cannot be undone.\n          </Text>\n        </TextContent>\n      );\n    }\n  };\n\n  return (\n    <Modal\n      title={title}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n      variant={ModalVariant.small}\n      actions={actions}\n    >\n      {content()}\n    </Modal>\n  );\n};\n\nDeleteActivationKeyConfirmationModal.propTypes = {\n  isOpen: propTypes.bool.isRequired,\n  handleModalToggle: propTypes.func.isRequired,\n  name: propTypes.string.Required,\n};\n\nexport default DeleteActivationKeyConfirmationModal;\n","import { useMutation } from 'react-query';\n\nconst activationKeyMutation = async (data) => {\n  const { activationKeyName, role, serviceLevel, usage } = data;\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch(\n    `/api/rhsm/v2/activation_keys/${activationKeyName}`,\n    {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        role: role,\n        serviceLevel: serviceLevel,\n        usage: usage,\n      }),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error updating activation key: ${response.statusText}.`\n    );\n  }\n  return response.json();\n};\n\nconst useUpdateActivationKey = () => {\n  return useMutation(activationKeyMutation);\n};\n\nexport { useUpdateActivationKey as default };\n","import React, { useEffect, useState } from 'react';\nimport { ActionGroup, Button, Form } from '@patternfly/react-core';\nimport useSystemPurposeAttributes from '../../hooks/useSystemPurposeAttributes';\nimport ActivationKeysFormSelect from './ActivationKeysFormSelect';\nimport PropTypes from 'prop-types';\nimport useNotifications from '../../hooks/useNotifications';\n\nconst SystemPurposeForm = (props) => {\n  const { handleModalToggle, submitForm, isSuccess, isError, activationKey } =\n    props;\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const { isLoading, error, data } = useSystemPurposeAttributes();\n  const [role, setRole] = useState('');\n  const [serviceLevel, setServiceLevel] = useState('');\n  const [usage, setUsage] = useState('');\n  const [validated, setValidated] = useState('default');\n  const placeholderValue = 'Not defined';\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (validated === 'success' || activationKey) {\n      submitForm({ role: role, serviceLevel: serviceLevel, usage: usage });\n    } else {\n      setValidated('error');\n    }\n  };\n\n  useEffect(() => {\n    if (activationKey) {\n      setRole(activationKey.role);\n      setUsage(activationKey.usage);\n      setServiceLevel(activationKey.serviceLevel);\n    }\n  }, [activationKey]);\n\n  const createButtonDisabled = () => {\n    return (\n      activationKey.role === role &&\n      activationKey.serviceLevel === serviceLevel &&\n      activationKey.usage === usage\n    );\n  };\n\n  if (isSuccess) {\n    const successMessage = `Changes saved for activation key \"${activationKey.name}\"`;\n    addSuccessNotification(successMessage, {\n      timeout: false,\n    });\n    handleModalToggle();\n  } else if (isError) {\n    const errorMessage = activationKey\n      ? `Error updating activation key ${activationKey.name}.`\n      : 'Activation Key was not created, please try again.';\n    addErrorNotification(errorMessage, {\n      timeout: 8000,\n    });\n    handleModalToggle();\n  }\n\n  return (\n    <Form id=\"activation-key-form\" onSubmit={handleSubmit}>\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.roles}\n          value={role}\n          onSelect={setRole}\n          label=\"Role\"\n          name=\"role\"\n          placeholderValue={placeholderValue}\n          disableDefaultValues={false}\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.serviceLevel}\n          value={serviceLevel}\n          onSelect={setServiceLevel}\n          label=\"Service Level Agreement (SLA)\"\n          name=\"serviceLevel\"\n          placeholderValue={placeholderValue}\n          disableDefaultValues={false}\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.usage}\n          value={usage}\n          onSelect={setUsage}\n          label=\"Usage\"\n          name=\"usage\"\n          placeholderValue={placeholderValue}\n          disableDefaultValues={false}\n        />\n      )}\n      <ActionGroup>\n        <Button\n          key=\"create\"\n          id=\"submit-activation-key-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={createButtonDisabled()}\n          data-testid=\"activation-key-submit-button\"\n        >\n          {activationKey ? 'Save changes' : 'Create'}\n        </Button>\n\n        <Button\n          key=\"cancel\"\n          id=\"cancel-activation-key-button\"\n          variant=\"link\"\n          onClick={handleModalToggle}\n        >\n          Cancel\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\n\nSystemPurposeForm.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  isSuccess: PropTypes.bool,\n  isError: PropTypes.bool,\n  activationKey: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n};\n\nexport default SystemPurposeForm;\n","import * as React from 'react';\nimport { Modal, ModalVariant } from '@patternfly/react-core';\nimport ActivationKeyForm from '../Forms/ActivationKeyForm';\nimport useUpdateActivationKey from '../../hooks/useUpdateActivationKey';\nimport useActivationKey from '../../hooks/useActivationKey';\nimport propTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\nimport SystemPurposeForm from '../Forms/SystemPurposeForm';\n\nconst EditActivationKeyModal = (props) => {\n  const {\n    activationKeyName,\n    title,\n    description,\n    systemPurposeOnly,\n    modalSize,\n  } = props;\n  const queryClient = useQueryClient();\n  const [updated, setUpdated] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const { handleModalToggle, isOpen } = props;\n  const { mutate, isLoading } = useUpdateActivationKey();\n  const {\n    isLoading: isKeyLoading,\n    error: keyError,\n    data: activationKey,\n  } = useActivationKey(activationKeyName);\n  const modalSizes = {\n    small: ModalVariant.small,\n    large: ModalVariant.large,\n  };\n  const submitForm = (formData) => {\n    const { role, serviceLevel, usage } = formData;\n    mutate(\n      { activationKeyName, role, serviceLevel, usage },\n      {\n        onSuccess: () => {\n          setError(false);\n          setUpdated(true);\n          queryClient.invalidateQueries('activation_keys');\n          queryClient.resetQueries(`activation_key_${activationKeyName}`);\n        },\n        onError: () => {\n          setError(true);\n          setUpdated(false);\n        },\n      }\n    );\n  };\n\n  const FormWrapper = () => {\n    return systemPurposeOnly ? (\n      <SystemPurposeForm\n        activationKey={activationKey}\n        handleModalToggle={handleModalToggle}\n        submitForm={submitForm}\n        isSuccess={updated}\n        isError={error}\n      />\n    ) : (\n      <ActivationKeyForm\n        activationKey={activationKey}\n        handleModalToggle={handleModalToggle}\n        submitForm={submitForm}\n        isSuccess={updated}\n        isError={error}\n      />\n    );\n  };\n  return (\n    <Modal\n      variant={modalSizes[modalSize]}\n      title={title}\n      description={description}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n    >\n      {(isLoading || isKeyLoading) && !keyError ? <Loading /> : <FormWrapper />}\n    </Modal>\n  );\n};\n\nEditActivationKeyModal.propTypes = {\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  activationKeyName: propTypes.string,\n  systemPurposeOnly: propTypes.bool,\n  description: propTypes.string,\n  title: propTypes.string,\n  modalSize: propTypes.string,\n};\n\nexport default EditActivationKeyModal;\n","import { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { useQueryClient } from 'react-query';\nimport PropTypes from 'prop-types';\n\nconst WriteOnlyButton = (props) => {\n  const { children, ...buttonProps } = props;\n\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isDisabled = !user.rbacPermissions.canWriteActivationKeys;\n\n  return (\n    <Button isDisabled={isDisabled} {...buttonProps}>\n      {children}\n    </Button>\n  );\n};\n\nWriteOnlyButton.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default WriteOnlyButton;\n","import React, { useState } from 'react';\nimport { AlertActionLink } from '@patternfly/react-core';\nimport { v4 as uuid } from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst NotificationContext = React.createContext({\n  notifications: [],\n  addNotification: () => null,\n  removeNotification: () => null,\n});\n\nconst NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n\n  const buildNotificationProps = (variant, message, options) => {\n    const notificationKey = uuid();\n    const notificationProps = {\n      variant: variant,\n      message: message,\n      key: notificationKey,\n      timeout: options?.hasTimeout ?? true,\n      description: options?.description,\n    };\n\n    if (options && options.alertLinkText && options.alertLinkHref) {\n      const linkAttributes = options.alertLinkIsDownload\n        ? { download: '' }\n        : {};\n      const alertLink = (\n        <>\n          <AlertActionLink>\n            <a href={options.alertLinkHref} {...linkAttributes}>\n              {options.alertLinkText}\n            </a>\n          </AlertActionLink>\n        </>\n      );\n      notificationProps.actionLinks = alertLink;\n    }\n\n    if (options && options.alertLinkIsDownload && options.alertLinkHref) {\n      notificationProps.downloadHref = options.alertLinkHref;\n    }\n\n    return notificationProps;\n  };\n\n  const addNotification = (variant, message, options) => {\n    const newNotificationProps = buildNotificationProps(\n      variant,\n      message,\n      options\n    );\n\n    let newNotifications = [...notifications, { ...newNotificationProps }];\n\n    if (options && options.keyOfAlertToReplace) {\n      newNotifications = newNotifications.filter(\n        (notification) => notification.key !== options.keyOfAlertToReplace\n      );\n    }\n\n    setNotifications(newNotifications);\n    return newNotificationProps.key;\n  };\n\n  const removeNotification = (key) => {\n    setNotifications(\n      notifications.filter((notification) => notification.key !== key)\n    );\n  };\n\n  const contextValue = {\n    notifications,\n    addNotification: (variant, message, options) => {\n      return addNotification(variant, message, options);\n    },\n    removeNotification: (key) => removeNotification(key),\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nNotificationProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { NotificationContext, NotificationProvider as default };\n","import { useQuery } from 'react-query';\n\nconst fetchActivationKeyData = async (keyName) => {\n  if (!keyName) {\n    return false;\n  }\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch(`/api/rhsm/v2/activation_keys/${keyName}`, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKey = async (keyName) => {\n  const keysData = await fetchActivationKeyData(keyName);\n  return keysData;\n};\n\nconst useActivationKey = (keyName) => {\n  return useQuery(`activation_key_${keyName}`, () => getActivationKey(keyName));\n};\n\nexport { useActivationKey as default };\n","import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\n\nexport default (flag) => {\n  const { flagsReady } = useFlagsStatus();\n  const isFlagEnabled = useFlag(flag);\n  return flagsReady ? isFlagEnabled : false;\n};\n","import { useContext } from 'react';\nimport { NotificationContext } from '../contexts/NotificationProvider';\n\nconst useNotifications = () => {\n  const { notifications, addNotification, removeNotification } =\n    useContext(NotificationContext);\n\n  const addSuccessNotification = (message, options) => {\n    return addNotification('success', message, options);\n  };\n\n  const addErrorNotification = (message, options) => {\n    return addNotification('danger', message, options);\n  };\n\n  const addInfoNotification = (message, options) => {\n    return addNotification('info', message, options);\n  };\n\n  return {\n    notifications,\n    addSuccessNotification,\n    addErrorNotification,\n    addInfoNotification,\n    removeNotification,\n  };\n};\n\nexport default useNotifications;\n","import { useQuery } from 'react-query';\n\nconst fetchSystemPurposeAttributes = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch(\n    '/api/rhsm/v2/organization?include=system_purpose_attributes',\n    {\n      headers: { Authorization: `Bearer ${token}` },\n    }\n  );\n\n  const responseData = await response.json();\n\n  return responseData.body;\n};\n\nconst getSystemPurposeAttributes = async () => {\n  const data = await fetchSystemPurposeAttributes();\n  return data.systemPurposeAttributes;\n};\n\nconst useSystemPurposeAttributes = () => {\n  return useQuery('organization_system_purpose_attributes', () =>\n    getSystemPurposeAttributes()\n  );\n};\n\nexport { useSystemPurposeAttributes as default };\n","import { createContext } from 'react';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"names":["getUserRbacPermissions","Promise","resolve","window","insights","chrome","getUserPermissions","then","rawRbacPermissions","permissions","map","rawPermission","permission","canReadActivationKeys","includes","canWriteActivationKeys","authenticateUser","auth","getUser","e","Error","message","Authentication","children","queryClient","useQueryClient","location","useLocation","useQuery","all","userStatus","rbacPermissions","accountNumber","identity","account_number","orgId","internal","org_id","isLoading","isFetching","isSuccess","isError","useEffect","hideGlobalFilter","invalidateQueries","pathname","Unavailable","Loading","propTypes","Breadcrumbs","breadcrumbs","Breadcrumb","Object","values","item","title","BreadcrumbItem","key","isActive","to","NavLink","exact","PropTypes","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","headingLevel","size","EmptyStateBody","AdditionalRepositoriesTable","props","repo","first","last","repositories","React","page","setPage","perPage","setPerPage","activeSortIndex","setActiveSortIndex","activeSortDirection","setActiveSortDirection","columnNames","getSortableRowValues","repositoryLabel","handleSetPage","_event","handlePerPageSelect","countProducts","filtedRepo","sortedRepositories","length","PaginationTop","Pagination","itemCount","onSetPage","onPerPageSelect","variant","PaginationVariant","isCompact","PaginationBottom","sortIndex","sort","a","b","aValue","bValue","result","sortRepos","paginatedRepos","slice","TableComposable","Thead","Tr","ouiaSafe","Th","width","sortBy","index","direction","defaultDirection","onSort","columnIndex","Tbody","repository","rowIndex","Td","dataLabel","repositoryName","fetchAdditionalRepositories","keyName","getToken","token","fetch","headers","Authorization","response","json","repositoriesData","body","getAvailableRepositories","AddAdditionalRepositoriesButton","onClick","WriteOnlyButton","W","style","margin","marginLeft","additionalRepositoriesMutation","data","selectedRepositories","additionalRepositoryLabels","method","JSON","stringify","label","Math","floor","status","AddAdditionalRepositoriesToolbar","friendlyNameMap","filter","setFilter","filterBy","setFilterBy","selectedOnlyToggleIsDisabled","searchIsDisabled","pagination","onlyShowSelectedRepositories","setOnlyShowSelectedRepositories","useState","isSelectFilterByExpanded","setIsSelectFilterByExpanded","Toolbar","id","ToolbarContent","ToolbarGroup","ToolbarItem","spacer","default","Select","isOpen","onToggle","toggleIcon","placeholderText","onSelect","_","value","SelectOption","SearchInput","placeholder","onChange","isDisabled","onClear","ToggleGroup","ToggleGroupItem","text","isSelected","selected","alignment","AddAdditionalRepositoriesTable","setSelectedRepositories","consideredRepositories","setConsideredRepositories","filteredRepositories","setFilteredRepositories","paginatedRepositories","setPaginatedRepositories","sortRepositories","toLowerCase","getSortParams","newPage","newPerPage","emptyState","SearchIcon","EmptyStatePrimary","Button","select","isSelecting","selectedRepository","colSpan","Bullseye","error","AddAdditionalRepositoriesModal","handleModalToggle","additionalRepositoriesAreLoading","additionalRepositoriesError","useNotifications","addSuccessNotification","addErrorNotification","mutate","useMutation","editChangesButtons","ActionGroup","onSuccess","resetQueries","onError","description","Modal","ModalVariant","onClose","footer","AdditionalRepositoriesCard","activationKey","name","availableRepositories","isEditAdditionalRepositoriesModalOpen","setisEditAdditionalRepositoriesModalOpen","handleEditAdditionalRepositoriesToggle","ButtonWrapper","Card","CardHeader","CardTitle","CardBody","TextContent","Text","component","TextVariants","additionalRepositories","EditButton","NoAccessPopover","content","Tooltip","SystemPurposeCard","actionHandler","notDefinedText","user","getQueryData","docsPopoverContent","ActivationKeysDocsPopover","popoverContent","position","CardActions","TextList","TextListVariants","TextListItem","TextListItemVariants","role","serviceLevel","usage","WorkloadCard","minHeight","releaseVersion","DeleteButton","withRouter","history","useHistory","useParams","pckg","activationKeys","useActivationKey","isKeyLoading","keyError","isDeleteActivationKeyModalOpen","setIsDeleteActivationKeyModalOpen","isEditActivationKeyModalOpen","setIsEditActivationKeyModalOpen","handleDeleteActivationKeyModalToggle","keyDeleted","push","handleEditActivationKeyModalToggle","Page","PageHeader","Level","LevelItem","PageHeaderTitle","Main","Grid","hasGutter","GridItem","span","Gallery","minWidths","GalleryItem","DeleteActivationKeyConfirmationModal","EditActivationKeyModal","activationKeyName","systemPurposeOnly","modalSize","paths","Dashboard","lazy","ActivationKeys","Routes","keyDetailsIsEnabled","useFeatureFlag","Suspense","fallback","Spinner","Switch","Route","path","ActivationKey","connector","notifications","removeNotification","AlertGroup","isToast","notification","i","Alert","isLiveRegion","timeout","actionClose","AlertActionCloseButton","variantLabel","downloadHref","URL","revokeObjectURL","QueryClient","defaultOptions","queries","retry","retryDelay","staleTime","Infinity","refetchOnWindowFocus","refetchOnMount","getRegistry","useContext","RegistryContext","register","notificationsReducer","appNavClick","useMemo","settings","redirect","init","identifyApp","unregister","on","event","domEvent","navId","undefined","QueryClientProvider","client","NotificationProvider","LockIcon","positions","right","PopoverPosition","left","top","bottom","Popover","headerContent","className","bodyContent","isInline","padding","ActivationKeyForm","submitForm","useSystemPurposeAttributes","setName","setRole","setServiceLevel","setUsage","validated","setValidated","nameRegex","Form","onSubmit","preventDefault","FormGroup","isRequired","helperText","TextInput","type","match","roles","placeholderValue","disableDefaultValues","popover","ActivationKeysFormSelect","setSelected","options","FormSelectOption","labelIcon","FormSelect","isPlaceholder","deleteActivationKeyMutation","ok","statusText","actions","_data","setQueryData","oldData","entry","deleteActivationKey","color","activationKeyMutation","SystemPurposeForm","updated","setUpdated","setError","modalSizes","small","large","formData","FormWrapper","buttonProps","NotificationContext","addNotification","setNotifications","contextValue","newNotificationProps","notificationProps","uuid","hasTimeout","alertLinkText","alertLinkHref","linkAttributes","alertLinkIsDownload","download","alertLink","AlertActionLink","href","actionLinks","buildNotificationProps","newNotifications","keyOfAlertToReplace","Provider","fetchActivationKeyData","activationKeysData","getActivationKey","keysData","flag","flagsReady","useFlagsStatus","isFlagEnabled","useFlag","addInfoNotification","fetchSystemPurposeAttributes","responseData","getSystemPurposeAttributes","systemPurposeAttributes","registry","createContext","middleware","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}