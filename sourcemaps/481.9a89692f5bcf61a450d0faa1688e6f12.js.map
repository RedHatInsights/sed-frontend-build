{"version":3,"file":"js/481.1666636880102.689727227579b96c7238.js","mappings":"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","sources":["webpack:///./src/hooks/useRbacPermissions.js","webpack:///./src/utils/platformServices.js","webpack:///./src/Components/Authentication/Authentication.js","webpack:///./src/hooks/useUser.js","webpack:///./src/Components/shared/breadcrumbs.js","webpack:///./src/Components/AdditionalRepositoriesTable/NoAdditionalRepositories.js","webpack:///./src/Components/AdditionalRepositoriesTable/AdditionalRepositoriesTable.js","webpack:///./src/Components/ActivationKey/AdditionalRepositoriesCard.js","webpack:///./src/Components/ActivationKey/SystemPurposeCard.js","webpack:///./src/Components/ActivationKey/WorkloadCard.js","webpack:///./src/Components/ActivationKey/ActivationKey.js","webpack:///./src/Routes.js","webpack:///./src/Components/Notifications/Notifications.js","webpack:///./src/App.js","webpack:///./src/Components/ActivationKeys/no-access.js","webpack:///./src/Components/LoadingState/Loading.js","webpack:///./src/contexts/NotificationProvider.js","webpack:///./src/hooks/useActivationKey.js","webpack:///./src/hooks/useFeatureFlag.js","webpack:///./src/hooks/useNotifications.js","webpack:///./src/store/index.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst getUserRbacPermissions = async () => {\n  return Promise.resolve(\n    window.insights.chrome.getUserPermissions('config-manager')\n  ).then((rawRbacPermissions) => {\n    const permissions = rawRbacPermissions.map(\n      (rawPermission) => rawPermission.permission\n    );\n    const rbacPermissions = {\n      canReadActivationKeys:\n        permissions.includes('config-manager:activation_keys:read') ||\n        permissions.includes('config-manager:activation_keys:*'),\n      canWriteActivationKeys:\n        permissions.includes('config-manager:activation_keys:write') ||\n        permissions.includes('config-manager:activation_keys:*'),\n    };\n\n    return rbacPermissions;\n  });\n};\n\nconst useRbacPermissions = () => {\n  return useQuery('rbac_permissions', () => getUserRbacPermissions());\n};\n\nexport { getUserRbacPermissions, useRbacPermissions as default };\n","const authenticateUser = () => {\n  try {\n    return window.insights.chrome.auth.getUser();\n  } catch (e) {\n    throw new Error(`Error authenticating user: ${e.message}`);\n  }\n};\n\nexport { authenticateUser };\n","import React, { useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { useLocation } from 'react-router-dom';\nimport useUser from '../../hooks/useUser';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nconst Authentication = ({ children }) => {\n  const queryClient = useQueryClient();\n  const location = useLocation();\n\n  const { isLoading, isFetching, isSuccess, isError } = useUser();\n\n  useEffect(() => {\n    isSuccess && window.insights?.chrome?.hideGlobalFilter();\n  }, [isSuccess]);\n\n  useEffect(() => {\n    /**\n     * On every rerender, based on URL change (location.pathname),\n     * reset the user's status to loading before authenticating again.\n     */\n    queryClient.invalidateQueries('user');\n  }, [location.pathname]);\n\n  if (isError === true) {\n    return <Unavailable />;\n  } else if (isLoading === true || isFetching === true) {\n    return <Loading />;\n  } else if (isSuccess === true) {\n    return <>{children}</>;\n  }\n};\n\nAuthentication.propTypes = {\n  children: propTypes.object,\n};\n\nexport default Authentication;\n","import { useQuery } from 'react-query';\nimport { getUserRbacPermissions } from '../hooks/useRbacPermissions';\nimport { authenticateUser } from '../utils/platformServices';\n\nconst getUser = () => {\n  return Promise.all([authenticateUser(), getUserRbacPermissions()]).then(\n    ([userStatus, rbacPermissions]) => {\n      const user = {\n        accountNumber: userStatus.identity.account_number,\n        orgId: userStatus?.identity?.internal?.org_id,\n        rbacPermissions: rbacPermissions,\n      };\n      return user;\n    }\n  );\n};\n\nconst useUser = () => {\n  return useQuery('user', () => getUser());\n};\n\nexport { getUser, useUser as default };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nconst Breadcrumbs = (breadcrumbs) => {\n  return breadcrumbs ? (\n    <Breadcrumb>\n      {Object.values(breadcrumbs).map((item) =>\n        item.title ? (\n          <BreadcrumbItem key={item.title} isActive={item.isActive}>\n            {(item.to && (\n              <NavLink exact to={item.to}>\n                {item.title}\n              </NavLink>\n            )) ||\n              item.title}\n          </BreadcrumbItem>\n        ) : (\n          '/'\n        )\n      )}\n    </Breadcrumb>\n  ) : null;\n};\n\nBreadcrumbs.propTypes = {\n  breadcrumbs: PropTypes.object,\n};\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\n\nconst NoAdditionalRepositories = () => {\n  return (\n    <>\n      <EmptyState>\n        <EmptyStateIcon icon={AddCircleOIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          No additional repositories\n        </Title>\n        <EmptyStateBody>\n          You currently have no additional repositories to display.\n        </EmptyStateBody>\n      </EmptyState>\n    </>\n  );\n};\n\nexport default NoAdditionalRepositories;\n","import React from 'react';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport NoAdditionalRepositories from './NoAdditionalRepositories';\n\nconst AdditionalRepositoriesTable = (props) => {\n  const { repositories } = props;\n  const columnNames = {\n    repositoryLabel: 'Label',\n    repositoryName: 'Name',\n  };\n  if (repositories.length > 0) {\n    return (\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th width={40}>{columnNames.repositoryName}</Th>\n            <Th>{columnNames.repositoryLabel}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {repositories.map((repository) => {\n            return (\n              <Tr key={repository.repositoryName} ouiaSafe={true}>\n                <Td dataLabel={columnNames.repositoryName}>\n                  {repository.repositoryName}\n                </Td>\n                <Td dataLabel={columnNames.repositoryLabel}>\n                  {repository.repositoryLabel}\n                </Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </TableComposable>\n    );\n  } else {\n    return <NoAdditionalRepositories />;\n  }\n};\n\nAdditionalRepositoriesTable.propTypes = {\n  repositories: propTypes.array,\n};\n\nexport default AdditionalRepositoriesTable;\n","import React from 'react';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport AdditionalRepositoriesTable from '../AdditionalRepositoriesTable';\n\nconst AdditionalRepositoriesCard = (props) => {\n  const { activationKey } = props;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          <Title headingLevel=\"h2\"> Additional repositories</Title>\n        </CardTitle>\n      </CardHeader>\n      <CardBody>\n        <TextContent>\n          <Text component={TextVariants.p}>\n            The core repositories for your operating system version, for example\n            BaseOS and AppStream, are always enabled and do not need to be\n            explicitly added to the activation key.\n          </Text>\n        </TextContent>\n        <AdditionalRepositoriesTable\n          repositories={activationKey.additionalRepositories}\n        />\n      </CardBody>\n    </Card>\n  );\n};\n\nAdditionalRepositoriesCard.propTypes = {\n  activationKey: propTypes.object,\n};\n\nexport default AdditionalRepositoriesCard;\n","import React from 'react';\nimport {\n  TextContent,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst SystemPurposeCard = (props) => {\n  const { activationKey } = props;\n  const notDefinedText = 'Not defined';\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          <Title headingLevel=\"h2\">System Purpose</Title>\n        </CardTitle>\n      </CardHeader>\n      <CardBody>\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            <TextListItem component={TextListItemVariants.dt}>\n              Role\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {activationKey && activationKey.role\n                ? activationKey.role\n                : notDefinedText}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dt}>SLA</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {activationKey && activationKey.serviceLevel\n                ? activationKey.serviceLevel\n                : notDefinedText}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              Usage\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {activationKey && activationKey.usage\n                ? activationKey.usage\n                : notDefinedText}\n            </TextListItem>\n          </TextList>\n        </TextContent>\n      </CardBody>\n    </Card>\n  );\n};\n\nSystemPurposeCard.propTypes = {\n  activationKey: propTypes.object,\n};\n\nexport default SystemPurposeCard;\n","import React from 'react';\nimport {\n  TextContent,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst WorkloadCard = (props) => {\n  const { activationKey } = props;\n  const notDefinedText = 'Not defined';\n  return (\n    <Card style={{ minHeight: '100%' }}>\n      <CardHeader>\n        <CardTitle>\n          <Title headingLevel=\"h2\">Workload</Title>\n        </CardTitle>\n      </CardHeader>\n      <CardBody>\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            <TextListItem component={TextListItemVariants.dt}>\n              Release version\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {activationKey && activationKey.releaseVersion\n                ? activationKey.releaseVersion\n                : notDefinedText}\n            </TextListItem>\n          </TextList>\n        </TextContent>\n      </CardBody>\n    </Card>\n  );\n};\n\nWorkloadCard.propTypes = {\n  activationKey: propTypes.object,\n};\n\nexport default WorkloadCard;\n","import React from 'react';\nimport { withRouter, useParams } from 'react-router-dom';\nimport pckg from '../../../package.json';\nimport Breadcrumbs from '../shared/breadcrumbs';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Grid,\n  GridItem,\n  Gallery,\n  GalleryItem,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport AdditionalRepositoriesCard from './AdditionalRepositoriesCard';\nimport useActivationKey from '../../hooks/useActivationKey';\nimport Loading from '../LoadingState/Loading';\nimport SystemPurposeCard from './SystemPurposeCard';\nimport WorkloadCard from './WorkloadCard';\nimport NoAccessView from '../ActivationKeys/no-access';\nimport { useQueryClient } from 'react-query';\n\nconst ActivationKey = () => {\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const { id } = useParams();\n  const { routes: paths } = pckg;\n  const breadcrumbs = [\n    { title: 'Activation Keys', to: paths.activationKeys },\n    { title: id, isActive: true },\n  ];\n  const {\n    isLoading: isKeyLoading,\n    error: keyError,\n    data: activationKey,\n  } = useActivationKey(id);\n  const description =\n    'View and edit details and repositories for this activation key.';\n\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <Breadcrumbs {...breadcrumbs} />\n          <PageHeaderTitle title={id} />\n          <TextContent>\n            <Text component={TextVariants.p}>{description}</Text>\n          </TextContent>\n        </PageHeader>\n        {isKeyLoading && !keyError ? (\n          <Loading />\n        ) : (\n          <Main>\n            <Grid hasGutter>\n              <GridItem span={12}>\n                <Gallery\n                  hasGutter\n                  minWidths={{\n                    default: '40%',\n                  }}\n                >\n                  <GalleryItem>\n                    <SystemPurposeCard activationKey={activationKey} />\n                  </GalleryItem>\n                  <GalleryItem>\n                    <WorkloadCard activationKey={activationKey} />\n                  </GalleryItem>\n                </Gallery>\n              </GridItem>\n              <GridItem span={12}>\n                <AdditionalRepositoriesCard activationKey={activationKey} />\n              </GridItem>\n            </Grid>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKey);\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport pckg from '../package.json';\nimport Authentication from './Components/Authentication/Authentication';\nimport ActivationKey from './Components/ActivationKey/ActivationKey';\nimport useFeatureFlag from './hooks/useFeatureFlag';\nconst { routes: paths } = pckg;\n\nconst Dashboard = lazy(() =>\n  import(/* webpackChunkName: \"Dashboard\" */ './Routes/Dashboard')\n);\n\nconst ActivationKeys = lazy(() => import('./Components/ActivationKeys'));\n\nexport const Routes = () => {\n  const keyDetailsIsEnabled = useFeatureFlag(\n    'sed-frontend.activationKeysDetailsPage'\n  );\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      <Authentication>\n        <Switch>\n          {keyDetailsIsEnabled && (\n            <Route path={paths.activationKey} component={ActivationKey} />\n          )}\n          <Route path={paths.activationKeys} component={ActivationKeys} />\n\n          <Route path={paths.connector} component={Dashboard} />\n        </Switch>\n      </Authentication>\n    </Suspense>\n  );\n};\n","import React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertGroup,\n} from '@patternfly/react-core';\nimport useNotifications from '../../hooks/useNotifications';\n\nconst Notifications = () => {\n  const { notifications, removeNotification } = useNotifications();\n\n  return (\n    <AlertGroup isToast>\n      {notifications.map((notification, i) => (\n        <Alert\n          isLiveRegion\n          timeout={notification.timeout}\n          title={notification.message}\n          variant={notification.variant}\n          key={notification.key}\n          actionClose={\n            <AlertActionCloseButton\n              data-testid={`notification-close-btn-${i}`}\n              title={notification.message}\n              variantLabel={`${notification.variant} alert`}\n              onClose={() => {\n                removeNotification(notification.key);\n                if (notification?.downloadHref) {\n                  window.URL.revokeObjectURL(notification.downloadHref);\n                }\n              }}\n            />\n          }\n        />\n      ))}\n    </AlertGroup>\n  );\n};\n\nexport default Notifications;\n","import React, { useEffect, useContext, useMemo } from 'react';\nimport { Routes } from './Routes';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { RegistryContext } from './store';\nimport { useHistory } from 'react-router-dom';\nimport NotificationProvider from './contexts/NotificationProvider';\nimport Notifications from './Components/Notifications';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 3,\n      retryDelay: 10 * 1000,\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    },\n  },\n});\n\nconst App = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const history = useHistory();\n  useEffect(() => {\n    getRegistry().register({ notifications: notificationsReducer });\n  }, [getRegistry]);\n\n  const appNavClick = useMemo(\n    () => ({\n      settings(redirect) {\n        insights?.chrome?.appNavClick({ id: 'settings', redirect });\n      },\n      activationKeys(redirect) {\n        insights?.chrome?.appNavClick({ id: 'activationKeys', redirect });\n      },\n    }),\n    []\n  );\n\n  useEffect(() => {\n    insights.chrome.init();\n    insights.chrome.identifyApp('connector');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event.domEvent) {\n        history.push(`/${event.navId}`);\n        appNavClick[event.navId] !== undefined\n          ? appNavClick[event.navId](true)\n          : appNavClick.settings(true);\n      }\n    });\n    return () => unregister();\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <NotificationsPortal />\n      <NotificationProvider>\n        <Notifications />\n        <Routes />\n      </NotificationProvider>\n    </QueryClientProvider>\n  );\n};\nexport default App;\n","import {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst NoAccessView = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={LockIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Activation keys can only be accessed by organization administrators.\n      </Title>\n      <EmptyStateBody>\n        If you already know your organization ID and activation key, you can\n        register systems with RHC.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoAccessView;\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst Loading = () => {\n  return (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default Loading;\n","import React, { useState } from 'react';\nimport { AlertActionLink } from '@patternfly/react-core';\nimport { v4 as uuid } from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst NotificationContext = React.createContext({\n  notifications: [],\n  addNotification: () => null,\n  removeNotification: () => null,\n});\n\nconst NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n\n  const buildNotificationProps = (variant, message, options) => {\n    const notificationKey = uuid();\n    const notificationProps = {\n      variant: variant,\n      message: message,\n      key: notificationKey,\n      timeout: options?.hasTimeout ?? true,\n    };\n\n    if (options && options.alertLinkText && options.alertLinkHref) {\n      const linkAttributes = options.alertLinkIsDownload\n        ? { download: '' }\n        : {};\n      const alertLink = (\n        <>\n          <AlertActionLink>\n            <a href={options.alertLinkHref} {...linkAttributes}>\n              {options.alertLinkText}\n            </a>\n          </AlertActionLink>\n        </>\n      );\n      notificationProps.actionLinks = alertLink;\n    }\n\n    if (options && options.alertLinkIsDownload && options.alertLinkHref) {\n      notificationProps.downloadHref = options.alertLinkHref;\n    }\n\n    return notificationProps;\n  };\n\n  const addNotification = (variant, message, options) => {\n    const newNotificationProps = buildNotificationProps(\n      variant,\n      message,\n      options\n    );\n\n    let newNotifications = [...notifications, { ...newNotificationProps }];\n\n    if (options && options.keyOfAlertToReplace) {\n      newNotifications = newNotifications.filter(\n        (notification) => notification.key !== options.keyOfAlertToReplace\n      );\n    }\n\n    setNotifications(newNotifications);\n    return newNotificationProps.key;\n  };\n\n  const removeNotification = (key) => {\n    setNotifications(\n      notifications.filter((notification) => notification.key !== key)\n    );\n  };\n\n  const contextValue = {\n    notifications,\n    addNotification: (variant, message, options) => {\n      return addNotification(variant, message, options);\n    },\n    removeNotification: (key) => removeNotification(key),\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nNotificationProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { NotificationContext, NotificationProvider as default };\n","import { useQuery } from 'react-query';\n\nconst fetchActivationKeyData = async (keyName) => {\n  if (!keyName) {\n    return false;\n  }\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch(`/api/rhsm/v2/activation_keys/${keyName}`, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKey = async (keyName) => {\n  const keysData = await fetchActivationKeyData(keyName);\n  return keysData;\n};\n\nconst useActivationKey = (keyName) => {\n  return useQuery(`activation_key_${keyName}`, () => getActivationKey(keyName));\n};\n\nexport { useActivationKey as default };\n","import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\n\nexport default (flag) => {\n  const { flagsReady } = useFlagsStatus();\n  const isFlagEnabled = useFlag(flag);\n  return flagsReady ? isFlagEnabled : false;\n};\n","import { useContext } from 'react';\nimport { NotificationContext } from '../contexts/NotificationProvider';\n\nconst useNotifications = () => {\n  const { notifications, addNotification, removeNotification } =\n    useContext(NotificationContext);\n\n  const addSuccessNotification = (message, options) => {\n    return addNotification('success', message, options);\n  };\n\n  const addErrorNotification = (message, options) => {\n    return addNotification('danger', message, options);\n  };\n\n  const addInfoNotification = (message, options) => {\n    return addNotification('info', message, options);\n  };\n\n  return {\n    notifications,\n    addSuccessNotification,\n    addErrorNotification,\n    addInfoNotification,\n    removeNotification,\n  };\n};\n\nexport default useNotifications;\n","import { createContext } from 'react';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"names":["getUserRbacPermissions","Promise","resolve","window","insights","chrome","getUserPermissions","then","rawRbacPermissions","permissions","map","rawPermission","permission","canReadActivationKeys","includes","canWriteActivationKeys","authenticateUser","auth","getUser","e","Error","message","Authentication","children","queryClient","useQueryClient","location","useLocation","useQuery","all","userStatus","rbacPermissions","accountNumber","identity","account_number","orgId","internal","org_id","isLoading","isFetching","isSuccess","isError","useEffect","hideGlobalFilter","invalidateQueries","pathname","Unavailable","Loading","propTypes","Breadcrumbs","breadcrumbs","Breadcrumb","Object","values","item","title","BreadcrumbItem","key","isActive","to","NavLink","exact","PropTypes","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","headingLevel","size","EmptyStateBody","AdditionalRepositoriesTable","props","repositories","columnNames","length","TableComposable","Thead","Tr","ouiaSafe","Th","width","Tbody","repository","repositoryName","Td","dataLabel","repositoryLabel","AdditionalRepositoriesCard","activationKey","Card","CardHeader","CardTitle","CardBody","TextContent","Text","component","TextVariants","additionalRepositories","SystemPurposeCard","notDefinedText","TextList","TextListVariants","TextListItem","TextListItemVariants","role","serviceLevel","usage","WorkloadCard","style","minHeight","releaseVersion","withRouter","user","getQueryData","id","useParams","pckg","activationKeys","useActivationKey","isKeyLoading","keyError","error","data","Page","PageHeader","PageHeaderTitle","Main","Grid","hasGutter","GridItem","span","Gallery","minWidths","default","GalleryItem","paths","Dashboard","lazy","ActivationKeys","Routes","keyDetailsIsEnabled","useFeatureFlag","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","ActivationKey","connector","useNotifications","notifications","removeNotification","AlertGroup","isToast","notification","i","Alert","isLiveRegion","timeout","variant","actionClose","AlertActionCloseButton","variantLabel","onClose","downloadHref","URL","revokeObjectURL","QueryClient","defaultOptions","queries","retry","retryDelay","staleTime","Infinity","refetchOnWindowFocus","refetchOnMount","getRegistry","useContext","RegistryContext","history","useHistory","register","notificationsReducer","appNavClick","useMemo","settings","redirect","init","identifyApp","unregister","on","event","domEvent","push","navId","undefined","QueryClientProvider","client","NotificationProvider","LockIcon","NotificationContext","React","addNotification","useState","setNotifications","contextValue","options","newNotificationProps","notificationProps","uuid","hasTimeout","alertLinkText","alertLinkHref","linkAttributes","alertLinkIsDownload","download","alertLink","AlertActionLink","href","actionLinks","buildNotificationProps","newNotifications","keyOfAlertToReplace","filter","Provider","value","fetchActivationKeyData","keyName","getToken","token","fetch","headers","Authorization","response","json","activationKeysData","body","getActivationKey","keysData","flag","flagsReady","useFlagsStatus","isFlagEnabled","useFlag","addSuccessNotification","addErrorNotification","addInfoNotification","createContext","middleware","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}