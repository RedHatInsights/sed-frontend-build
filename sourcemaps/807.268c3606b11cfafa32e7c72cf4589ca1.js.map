{"version":3,"file":"js/807.21a973eebf26f465801a.js","mappings":"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","sources":["webpack:///./src/hooks/useActivationKeys.js","webpack:///./src/Components/ActivationKeysTable/ActivationKeysTable.js","webpack:///./src/Components/ActivationKeys/no-access.js","webpack:///./src/Components/ActivationKeys/CreateActivationKeyButton.js","webpack:///./src/Components/EmptyState/NoActivationKeysFound.js","webpack:///./src/Components/EmptyState/index.js","webpack:///./src/hooks/useSystemPuproseAttributes.js","webpack:///./src/Components/Forms/ActivationKeysFormSelect.js","webpack:///./src/Components/Forms/CreateActivationKeyForm.js","webpack:///./src/hooks/useCreateActivationKey.js","webpack:///./src/Components/Modals/CreateActivationKeyModal.js","webpack:///./src/Components/ActivationKeys/index.js","webpack:///./src/Components/ActivationKeys/ActivationKeys.js"],"sourcesContent":["import { useQuery } from 'react-query';\n\nconst fetchActivationKeysData = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  const activationKeysData = await response.json();\n\n  return activationKeysData.body;\n};\n\nconst getActivationKeys = async () => {\n  const keysData = await fetchActivationKeysData();\n  return keysData;\n};\n\nconst useActivationKeys = () => {\n  return useQuery('activation_keys', () => getActivationKeys());\n};\n\nexport { useActivationKeys as default };\n","import React from 'react';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from '@patternfly/react-table';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\n\nconst ActivationKeysTable = () => {\n  const columnNames = {\n    name: 'Key Name',\n    role: 'Role',\n    serviceLevel: 'SLA',\n    usage: 'Usage',\n  };\n  const { isLoading, error, data } = useActivationKeys();\n\n  const Results = () => {\n    return (\n      <TableComposable aria-label=\"ActivationKeys\">\n        <Thead>\n          <Tr ouiaSafe={true}>\n            <Th>{columnNames.name}</Th>\n            <Th>{columnNames.role}</Th>\n            <Th>{columnNames.serviceLevel}</Th>\n            <Th>{columnNames.usage}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {data.map((datum) => (\n            <Tr key={datum.name} ouiaSafe={true}>\n              <Td dataLabel={columnNames.name}>{datum.name}</Td>\n              <Td dataLabel={columnNames.role}>{datum.role}</Td>\n              <Td dataLabel={columnNames.serviceLevel}>{datum.serviceLevel}</Td>\n              <Td dataLabel={columnNames.usage}>{datum.usage}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    );\n  };\n\n  if (isLoading && !error) {\n    return <Loading />;\n  } else if (!isLoading && !error) {\n    return <Results />;\n  } else {\n    return <Unavailable />;\n  }\n};\n\nexport default ActivationKeysTable;\n","import {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nconst NoAccessView = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={LockIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Activation keys can only be accessed by organization administrators.\n      </Title>\n      <EmptyStateBody>\n        If you already know your organization ID and activation key, you can\n        register systems with RHC.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoAccessView;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { useQueryClient } from 'react-query';\nimport PropTypes from 'prop-types';\n\nconst CreateActivationKeyButton = (props) => {\n  const { onClick } = props;\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const isDisabled = () => {\n    return !user.rbacPermissions.canWriteActivationKeys;\n  };\n  return (\n    <Button variant=\"primary\" onClick={onClick} isDisabled={isDisabled()}>\n      Create activation key\n    </Button>\n  );\n};\n\nCreateActivationKeyButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default CreateActivationKeyButton;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport CreateActivationKeyButton from '../ActivationKeys/CreateActivationKeyButton';\n\nconst NoActivationKeysFound = (props) => {\n  const { handleModalToggle } = props;\n  return (\n    <>\n      <EmptyState>\n        <EmptyStateIcon icon={AddCircleOIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          No activation keys\n        </Title>\n        <EmptyStateBody>\n          You currently have no activation keys to display. Activation keys\n          allow you to register a system with system purpose, role and usage\n          attached.\n        </EmptyStateBody>\n        <CreateActivationKeyButton onClick={handleModalToggle} />\n      </EmptyState>\n    </>\n  );\n};\n\nNoActivationKeysFound.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n};\n\nexport default NoActivationKeysFound;\n","import NoActivationKeysFound from './NoActivationKeysFound';\n\nexport default NoActivationKeysFound;\n","import { useQuery } from 'react-query';\n\nconst fetchSystemPurposeAttributes = async () => {\n  const token = await window.insights.chrome.auth.getToken();\n\n  const response = await fetch(\n    '/api/rhsm/v2/organization?include=system_purpose_attributes',\n    {\n      headers: { Authorization: `Bearer ${token}` },\n    }\n  );\n\n  const responseData = await response.json();\n\n  return responseData.body;\n};\n\nconst getSystemPurposeAttributes = async () => {\n  const data = await fetchSystemPurposeAttributes();\n  return data.systemPurposeAttributes;\n};\n\nconst useSystemPurposeAttributes = () => {\n  return useQuery('organization_system_puprose_attributes', () =>\n    getSystemPurposeAttributes()\n  );\n};\n\nexport { useSystemPurposeAttributes as default };\n","import React, { useState } from 'react';\nimport {\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n} from '@patternfly/react-core';\n\nimport PropTypes from 'prop-types';\n\nconst ActivationKeysFormSelect = (props) => {\n  const {\n    label,\n    popover,\n    data,\n    onSelect,\n    helperText,\n    name,\n    placeholderValue,\n  } = props;\n  const [selected, setSelected] = useState('');\n  const options = data.map((role) => {\n    return <FormSelectOption key={role} value={role} label={role} />;\n  });\n  const valueChange = (value) => {\n    setSelected(value);\n    onSelect(value);\n  };\n\n  return (\n    <FormGroup label={label} labelIcon={popover} helperText={helperText}>\n      <FormSelect\n        onChange={valueChange}\n        value={selected}\n        name={name}\n        aria-label={placeholderValue}\n      >\n        <FormSelectOption label={placeholderValue} isPlaceholder={true} />\n        {options}\n      </FormSelect>\n    </FormGroup>\n  );\n};\n\nActivationKeysFormSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  popover: PropTypes.element.isRequired,\n  helperText: PropTypes.string,\n  data: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  placeholderValue: PropTypes.string,\n};\n\nexport default ActivationKeysFormSelect;\n","import React, { useState } from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport useSystemPuproseAttributes from '../../hooks/useSystemPuproseAttributes';\nimport ActivationKeysFormSelect from './ActivationKeysFormSelect';\nimport PropTypes from 'prop-types';\nimport useNotifications from '../../hooks/useNotifications';\n\nconst CreateActivationKeyForm = (props) => {\n  const { handleModalToggle, submitForm, isSuccess, isError } = props;\n  const { addSuccessNotification, addErrorNotification } = useNotifications();\n  const { isLoading, error, data } = useSystemPuproseAttributes();\n  const [name, setName] = useState('');\n  const [role, setRole] = useState('');\n  const [serviceLevel, setServiceLevel] = useState('');\n  const [usage, setUsage] = useState('');\n  const [validated, setValidated] = useState('default');\n  const nameRegex = '^[a-z][a-z0-9-]*$';\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (validated === 'success') {\n      submitForm(name, role, serviceLevel, usage);\n    } else {\n      setValidated('error');\n    }\n  };\n\n  const validateName = (value) => {\n    if (value.length === 0) {\n      setValidated('error');\n    } else if (!value.match(nameRegex)) {\n      setValidated('error');\n    } else {\n      setValidated('success');\n      setName(value);\n    }\n  };\n\n  const createButtonDisabled = () => {\n    return validated === 'error' || name.length === 0 || !name.match(nameRegex);\n  };\n\n  if (isSuccess) {\n    addSuccessNotification('Activation Key was created successfully', {\n      timeout: false,\n    });\n    handleModalToggle();\n  } else if (isError) {\n    addErrorNotification('Activation Key was not created, please try again', {\n      timeout: 8000,\n    });\n    handleModalToggle();\n  }\n\n  return (\n    <Form id=\"create-activation-key-form\" onSubmit={handleSubmit}>\n      <FormGroup\n        label=\"Name\"\n        isRequired\n        helperText=\"Enter the name of the activation key. Must start with a letter and end with a letter or number. Valid characters include lowercase letters from a to z, numbers from 0 to 9, and hyphens ( - ).\"\n      >\n        <TextInput\n          id=\"activation-key-name\"\n          label=\"Name\"\n          isRequired\n          type=\"text\"\n          validated={validated}\n          onChange={validateName}\n          name=\"name\"\n        />\n      </FormGroup>\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.roles}\n          onSelect={setRole}\n          label=\"Role\"\n          name=\"role\"\n          placeholderValue=\"Select role\"\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Role is used to categorize systems by the workload on the\n                    system\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Only roles available to your account are shown.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required role from the list. The list only contains roles available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.serviceLevel}\n          onSelect={setServiceLevel}\n          label=\"Service Level Agreement (SLA)\"\n          name=\"serviceLevel\"\n          placeholderValue=\"Select a service level agreement\"\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Service Level Agreement (SLA) determines the level of\n                    support for systems registered with this activation key.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required service level from the list. The list only contains service levels available to the activation key.\"\n        />\n      )}\n      {!isLoading && !error && (\n        <ActivationKeysFormSelect\n          data={data.usage}\n          onSelect={setUsage}\n          label=\"Usage\"\n          name=\"usage\"\n          placeholderValue=\"Select usage\"\n          popover={\n            <Popover\n              bodyContent={\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Usage is used to categorize systems by how they are meant to\n                    be used, and therefore supported.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    Subscription Watch can help you filter and report by these\n                    items.\n                  </Text>\n                </TextContent>\n              }\n            >\n              <HelpIcon />\n            </Popover>\n          }\n          helperText=\"Select the required usage from the list. The list only contains usages available to the activation key.\"\n        />\n      )}\n      <ActionGroup>\n        <Button\n          key=\"create\"\n          id=\"create-activation-key-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={createButtonDisabled()}\n        >\n          Save\n        </Button>\n\n        <Button\n          key=\"cancel\"\n          id=\"cancel-create-activation-key-button\"\n          variant=\"link\"\n          onClick={handleModalToggle}\n        >\n          Cancel\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\n\nCreateActivationKeyForm.propTypes = {\n  handleModalToggle: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  isSuccess: PropTypes.bool,\n  isError: PropTypes.bool,\n};\n\nexport default CreateActivationKeyForm;\n","import { useMutation } from 'react-query';\n\nconst activationKeyMutation = async (data) => {\n  const { name, role, serviceLevel, usage } = data;\n  const token = await window.insights.chrome.auth.getToken();\n  const response = await fetch('/api/rhsm/v2/activation_keys', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: name,\n      role: role,\n      serviceLevel: serviceLevel,\n      usage: usage,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Status Code ${response.status}.  Error creating activation key: ${response.statusText}.`\n    );\n  }\n  return response.json();\n};\n\nconst useCreateActivationKey = () => {\n  return useMutation(activationKeyMutation);\n};\n\nexport { useCreateActivationKey as default };\n","import * as React from 'react';\nimport { Modal, ModalVariant } from '@patternfly/react-core';\nimport CreateActivationKeyForm from '../Forms/CreateActivationKeyForm';\nimport useCreateActivationKey from '../../hooks/useCreateActivationKey';\nimport propTypes from 'prop-types';\nimport Loading from '../LoadingState/Loading';\nimport { useQueryClient } from 'react-query';\n\nconst CreateActivationKeyModal = (props) => {\n  const queryClient = useQueryClient();\n  const [created, setCreated] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const { handleModalToggle, isOpen } = props;\n  const { mutate, isLoading } = useCreateActivationKey();\n  const submitForm = (name, role, serviceLevel, usage) => {\n    mutate(\n      { name, role, serviceLevel, usage },\n      {\n        onSuccess: () => {\n          setError(false);\n          setCreated(true);\n          queryClient.invalidateQueries('activation_keys');\n        },\n        onError: () => {\n          setError(true);\n          setCreated(false);\n        },\n      }\n    );\n  };\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title=\"Create new activation key\"\n      description=\"\"\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n    >\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <CreateActivationKeyForm\n          handleModalToggle={handleModalToggle}\n          submitForm={submitForm}\n          isSuccess={created}\n          isError={error}\n        />\n      )}\n    </Modal>\n  );\n};\n\nCreateActivationKeyModal.propTypes = {\n  handleModalToggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n};\n\nexport default CreateActivationKeyModal;\n","import ActivationKeys from './ActivationKeys';\n\nexport default ActivationKeys;\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  ActionGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ActivationKeysTable from '../ActivationKeysTable';\nimport { useQueryClient } from 'react-query';\nimport NoAccessView from './no-access';\nimport NoActivationKeysFound from '../EmptyState';\nimport CreateActivationKeyModal from '../Modals/CreateActivationKeyModal';\nimport useActivationKeys from '../../hooks/useActivationKeys';\nimport Loading from '../LoadingState/Loading';\nimport CreateActivationKeyButton from './CreateActivationKeyButton';\nconst ActivationKeys = () => {\n  const queryClient = useQueryClient();\n  const user = queryClient.getQueryData('user');\n  const { isLoading, error, data } = useActivationKeys();\n  const [isOpen, setisOpen] = useState(false);\n  const handleModalToggle = () => {\n    setisOpen(!isOpen);\n  };\n  let pageContent;\n  if (isLoading) {\n    pageContent = <Loading />;\n  } else if (!isLoading && !error && !data.length) {\n    pageContent = (\n      <NoActivationKeysFound handleModalToggle={handleModalToggle} />\n    );\n  } else if (!isLoading && !error && data.length) {\n    pageContent = (\n      <>\n        <ActionGroup>\n          <CreateActivationKeyButton onClick={handleModalToggle} />\n        </ActionGroup>\n        <ActivationKeysTable />\n      </>\n    );\n  }\n  const Page = () => {\n    return (\n      <React.Fragment>\n        <PageHeader>\n          <PageHeaderTitle title=\"Activation Keys\" />\n          <TextContent>\n            <Text component={TextVariants.p}>\n              Organization ID: {user.orgId}\n            </Text>\n          </TextContent>\n        </PageHeader>\n        <Main>\n          <PageSection variant={PageSectionVariants.light}>\n            {pageContent}\n          </PageSection>\n        </Main>\n        <CreateActivationKeyModal\n          isOpen={isOpen}\n          handleModalToggle={handleModalToggle}\n        />\n      </React.Fragment>\n    );\n  };\n\n  if (user.rbacPermissions.canReadActivationKeys) {\n    return <Page />;\n  } else {\n    return <NoAccessView />;\n  }\n};\n\nexport default withRouter(ActivationKeys);\n"],"names":["fetchActivationKeysData","window","insights","chrome","auth","getToken","token","fetch","headers","Authorization","response","json","activationKeysData","body","getActivationKeys","keysData","useActivationKeys","useQuery","columnNames","isLoading","error","data","Results","TableComposable","Thead","Tr","ouiaSafe","Th","Tbody","map","datum","key","name","Td","dataLabel","role","serviceLevel","usage","Loading","Unavailable","Bullseye","EmptyState","EmptyStateIcon","icon","LockIcon","Title","headingLevel","size","EmptyStateBody","CreateActivationKeyButton","props","onClick","user","useQueryClient","getQueryData","Button","variant","isDisabled","rbacPermissions","canWriteActivationKeys","propTypes","PropTypes","NoActivationKeysFound","handleModalToggle","AddCircleOIcon","fetchSystemPurposeAttributes","responseData","getSystemPurposeAttributes","systemPurposeAttributes","ActivationKeysFormSelect","label","popover","onSelect","helperText","placeholderValue","useState","selected","setSelected","options","FormSelectOption","value","FormGroup","labelIcon","FormSelect","onChange","isPlaceholder","CreateActivationKeyForm","submitForm","isSuccess","isError","useNotifications","addSuccessNotification","addErrorNotification","setName","setRole","setServiceLevel","setUsage","validated","setValidated","nameRegex","timeout","Form","id","onSubmit","event","preventDefault","isRequired","TextInput","type","length","match","roles","Popover","bodyContent","TextContent","Text","component","TextVariants","ActionGroup","activationKeyMutation","method","JSON","stringify","ok","Error","status","statusText","CreateActivationKeyModal","queryClient","React","created","setCreated","setError","isOpen","useMutation","mutate","Modal","ModalVariant","title","description","onClose","onSuccess","invalidateQueries","onError","withRouter","pageContent","setisOpen","Page","PageHeader","PageHeaderTitle","orgId","Main","PageSection","PageSectionVariants","canReadActivationKeys"],"sourceRoot":""}