{"version":3,"sources":["webpack://sed-frontend/./src/Routes/Dashboard/dashboard.scss","webpack://sed-frontend/./src/Routes/Dashboard/SampleTabRoute.js","webpack://sed-frontend/./src/utils/helpers.js","webpack://sed-frontend/./src/Components/ConfirmChangesModal/index.js","webpack://sed-frontend/./src/api/index.js","webpack://sed-frontend/./src/store/actionTypes.js","webpack://sed-frontend/./src/store/actions.js","webpack://sed-frontend/./src/Components/ConnectLog/LogNestedtable.js","webpack://sed-frontend/./src/Components/ConnectLog/index.js","webpack://sed-frontend/./src/store/currStateReducer.js","webpack://sed-frontend/./src/store/logReducer.js","webpack://sed-frontend/./src/store/connectedSystems.js","webpack://sed-frontend/./src/Routes/Dashboard/index.js","webpack://sed-frontend/./src/api/inventory.js","webpack://sed-frontend/./src/Routes/Dashboard/dashboard.scss?8482"],"names":["___CSS_LOADER_EXPORT___","push","module","id","SampleTabRoute","setMadeChanges","defaults","onChange","useState","hasInsights","useOpenSCAP","enableCloudConnector","connectToInsights","setConnectToInsights","setUseOpenSCAP","setEnableCloudConnector","useEffect","getPopover","Popover","aria-label","headerContent","bodyContent","position","Button","ouiaId","variant","className","color","Stack","hasGutter","StackItem","Title","headingLevel","size","TextContent","Text","component","Switch","isChecked","newHasInsights","label","Fragment","key","prevValue","newUseOpenSCAP","newEnableCloudConnector","propTypes","defaultProps","pluralize","count","str","fallback","downloadFile","data","filename","Date","toISOString","type","blob","Blob","link","document","createElement","setAttribute","URL","createObjectURL","style","visibility","body","appendChild","click","removeChild","ConfirmChangesModal","isOpen","handleCancel","handleConfirm","systemsCount","Modal","title","onClose","actions","onClick","href","PropTypes","configApi","DefaultApi","undefined","instance","GET_CURR_STATE","SET_CURR_STATE","GET_LOG","GET_CONNECTED_HOSTS","saveCurrState","payload","updateStates","compliance_openscap","insights","remediations","fetchLog","perPage","page","getStates","columns","rowMapper","LogNestedTable","services","isInsights","TextVariants","Table","cells","rows","noPadding","Object","entries","map","value","TableHeader","TableBody","isRequired","cellFormatters","expandable","transforms","cellWidth","rowsMapper","results","opened","flatMap","account","createdAt","created_at","state","includes","DateFormat","date","extraTitle","isInline","getPlaybookById","parent","ConnectLog","setOpened","dispatch","useDispatch","logLoaded","useSelector","logReducer","loaded","pagination","itemCount","total","limit","Math","floor","offset","shallowEqual","setPage","useCallback","_e","pageNumber","setPerPage","PrimaryToolbar","onSetPage","onPerPageSelect","Skeleton","width","TableVariant","onCollapse","_key","filter","openId","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","PaginationVariant","currStatePending","currStateFulfilled","values","applyReducerHash","error","hosts","per_page","confirmChangesOpen","setConfirmChangesOpen","logsOpen","setLogsOpen","madeChanges","dataRef","useRef","activeStateLoaded","activeStateReducer","connectedSystemsReducer","systemsLoaded","chrome","appAction","getRegistry","register","getCurrentState","PageHeader","PageHeaderTitle","Main","Level","LevelItem","Flex","alignContent","default","alignItems","isDisabled","Divider","current","Bullseye","Spinner","saveAction","addNotification","description","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/Dashboard.fb7b140594c1ca8787cb.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".connector .dashboard__content{min-height:100%;background-color:var(--pf-global--BackgroundColor--100)}.connector .dashboard__header{display:flex;align-items:end}.connector .dashboard__success-status{color:var(--pf-global--success-color--100)}.connector .dashboard__navtab-title{width:100%}.connector .dashboard__tabs-content{display:flex}.connector .dashboard__tabs-nav{flex-shrink:0}.connector .dashboard__in-progress-text{color:var(--pf-global--palette--blue-500)}.connector .dashboard__in-progress-text>svg{color:initial}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/Routes/Dashboard/dashboard.scss\"],\"names\":[],\"mappings\":\"AAAA,+BACoB,eAAe,CAAC,uDAAuD,CAD3F,8BAC+G,YAAY,CAAC,eAAe,CAD3I,sCACuK,0CAA0C,CADjN,oCAC2O,UAAU,CADrP,oCAC+Q,YAAY,CAD3R,gCACiT,aAAa,CAD9T,wCAC4V,yCAAyC,CADrY,4CACua,aAAa\",\"sourcesContent\":[\".connector{\\n.dashboard__content{min-height:100%;background-color:var(--pf-global--BackgroundColor--100)}.dashboard__header{display:flex;align-items:end}.dashboard__success-status{color:var(--pf-global--success-color--100)}.dashboard__navtab-title{width:100%}.dashboard__tabs-content{display:flex}.dashboard__tabs-nav{flex-shrink:0}.dashboard__in-progress-text{color:var(--pf-global--palette--blue-500)}.dashboard__in-progress-text>svg{color:initial}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  Button,\n  Popover,\n  Stack,\n  StackItem,\n  Switch,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport '@patternfly/react-styles/css/components/Table/table.css';\n\nconst SampleTabRoute = ({ setMadeChanges, defaults, onChange }) => {\n  const [connectToInsights, setConnectToInsights] = useState(\n    defaults.hasInsights ||\n      defaults.useOpenSCAP ||\n      defaults.enableCloudConnector\n  );\n  const [useOpenSCAP, setUseOpenSCAP] = useState(defaults.useOpenSCAP);\n  const [enableCloudConnector, setEnableCloudConnector] = useState(\n    defaults.enableCloudConnector\n  );\n\n  useEffect(() => {\n    setMadeChanges(\n      connectToInsights !== defaults.hasInsights ||\n        useOpenSCAP !== defaults.useOpenSCAP ||\n        enableCloudConnector != defaults.enableCloudConnector\n    );\n    onChange({ useOpenSCAP, enableCloudConnector });\n  }, [useOpenSCAP, enableCloudConnector, connectToInsights]);\n\n  const getPopover = () => {\n    return (\n      <Popover\n        aria-label=\"connected-dashboard-description\"\n        headerContent={<div>Desc header</div>}\n        bodyContent={<p>Popover description</p>}\n        position=\"bottom\"\n      >\n        <Button\n          ouiaId=\"title-popover-button\"\n          variant=\"plain\"\n          className=\"pf-u-p-xs\"\n        >\n          <OutlinedQuestionCircleIcon color=\"grey\" />\n        </Button>\n      </Popover>\n    );\n  };\n\n  return (\n    <Stack hasGutter className=\"pf-u-p-md\">\n      <StackItem>\n        <Title headingLevel=\"h2\" size=\"2xl\">\n          Red Hat Insights\n        </Title>\n        <TextContent className=\"pf-u-mt-md\">\n          <Text component=\"p\">\n            Red Hat Insights is a proactive operational efficiency and security\n            risk management solution in Red Hat Enterprise Linux (RHEL)\n            subscriptions for versions 6.4 and higher, as well as public cloud\n            versions of RHEL. It helps identify, prioritize, and resolve risks\n            to security, compliance, performance, availability, and stability\n            before they become urgent issues. Insights also enables users to\n            monitor for adherence to internal policies and understand\n            configuration changes over time.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Title headingLevel=\"h3\" size=\"xl\">\n          Settings\n        </Title>\n        <Stack hasGutter className=\"pf-u-mt-lg\">\n          <StackItem>\n            <Switch\n              id=\"connect-to-insights\"\n              ouiaId=\"connect-to-insights\"\n              aria-label=\"Connect to Red Hat Insights\"\n              isChecked={connectToInsights}\n              onChange={() => {\n                const newHasInsights = !connectToInsights;\n                setConnectToInsights(() => newHasInsights);\n                if (!newHasInsights) {\n                  setUseOpenSCAP(() => false);\n                  setEnableCloudConnector(() => false);\n                }\n              }}\n              label={\n                <Fragment>\n                  <Title headingLevel=\"h4\" size=\"md\">\n                    Connect to Red Hat Insights\n                  </Title>\n                  <TextContent>\n                    <Text component=\"small\">\n                      Required to use Insights applications. Enables Advisor,\n                      Drift, Patch, Vulnerability and Policies applications.\n                    </Text>\n                  </TextContent>\n                </Fragment>\n              }\n            />\n            <div className=\"pf-u-pl-3xl\">\n              <Stack>\n                <StackItem>\n                  <Switch\n                    className=\"pf-u-mt-md\"\n                    key=\"use-openscap\"\n                    id=\"use-openscap\"\n                    ouiaId=\"use-openscap\"\n                    aria-label=\"Use OpenSCAP for Compliance policies\"\n                    isChecked={useOpenSCAP}\n                    onChange={() => {\n                      setUseOpenSCAP((prevValue) => {\n                        const newUseOpenSCAP = !prevValue;\n                        setConnectToInsights(() => true);\n                        return newUseOpenSCAP;\n                      });\n                    }}\n                    label={\n                      <Fragment>\n                        <Title headingLevel=\"h4\" size=\"md\">\n                          Use OpenSCAP for Compliance policies\n                          {getPopover()}\n                        </Title>\n                        <TextContent>\n                          <Text component=\"small\">\n                            Required to use Compliance application\n                          </Text>\n                        </TextContent>\n                      </Fragment>\n                    }\n                  />\n                </StackItem>\n                <StackItem>\n                  <Switch\n                    className=\"pf-u-mt-md\"\n                    key=\"enable-cloud-connector\"\n                    id=\"enable-cloud-connector\"\n                    ouiaId=\"enable-cloud-connector\"\n                    aria-label=\"Enable Cloud Connector\"\n                    isChecked={enableCloudConnector}\n                    onChange={() => {\n                      setEnableCloudConnector((prevValue) => {\n                        const newEnableCloudConnector = !prevValue;\n                        if (newEnableCloudConnector) {\n                          setConnectToInsights(() => true);\n                        }\n                        return newEnableCloudConnector;\n                      });\n                    }}\n                    label={\n                      <Fragment>\n                        <Title headingLevel=\"h4\" size=\"md\">\n                          Enable Cloud Connector to fix issues directly from\n                          Insights\n                          {getPopover()}\n                        </Title>\n                        <TextContent>\n                          <Text component=\"small\">\n                            Cloud Connector allows you to push Remediation\n                            Ansible Playbooks directly from Insights to your\n                            systems.\n                          </Text>\n                        </TextContent>\n                      </Fragment>\n                    }\n                  />\n                </StackItem>\n              </Stack>\n            </div>\n          </StackItem>\n        </Stack>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSampleTabRoute.propTypes = {\n  setMadeChanges: propTypes.func.isRequired,\n  defaults: propTypes.shape({\n    useOpenSCAP: propTypes.bool,\n    hasInsights: propTypes.bool,\n    enableCloudConnector: propTypes.bool,\n  }),\n  onChange: propTypes.func.isRequired,\n};\n\nSampleTabRoute.defaultProps = {\n  defaults: {\n    useOpenSCAP: false,\n    hasInsights: false,\n    enableCloudConnector: false,\n  },\n};\n\nexport default SampleTabRoute;\n","export const pluralize = (count, str, fallback) =>\n  count > 1 ? fallback || str + 's' : str;\n\nexport const downloadFile = (\n  data,\n  filename = `${new Date().toISOString()}`\n) => {\n  const type = 'data:text/plain;charset=utf-8,';\n  const blob = new Blob([data], { type });\n  const link = document.createElement('a');\n  link.setAttribute('href', URL.createObjectURL(blob));\n  link.setAttribute('download', `${filename}.yml`);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Text, TextContent } from '@patternfly/react-core';\nimport { pluralize } from '../../utils/helpers';\n\nconst ConfirmChangesModal = ({\n  isOpen = false,\n  handleCancel,\n  handleConfirm,\n  systemsCount,\n}) => {\n  return (\n    <Modal\n      variant=\"small\"\n      title=\"Confirm changes\"\n      isOpen={isOpen}\n      onClose={handleCancel}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"button\"\n          onClick={handleConfirm}\n        >\n          Confirm changes\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text component=\"p\">\n          Your changes applies to{' '}\n          <b>\n            {systemsCount} connected {pluralize(systemsCount, 'system')}\n          </b>\n          . Selected settings will also be applied to <b>all future systems</b>{' '}\n          that are connect through Red Hat Connect (rhc).\n        </Text>\n        <Text component=\"p\" className=\"pf-u-mb-sm\">\n          Upon confirmation, an Ansible Playbook will be pushed to{' '}\n          {systemsCount} {pluralize(systemsCount, 'system')} to apply changes.\n        </Text>\n      </TextContent>\n      <a href=\"#\">View playbook</a>\n    </Modal>\n  );\n};\n\nConfirmChangesModal.propTypes = {\n  isOpen: PropTypes.bool,\n  handleConfirm: PropTypes.func.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  systemsCount: PropTypes.number.isRequired,\n};\n\nexport default ConfirmChangesModal;\n","export const CONNECTOR_API_BASE = '/api/config-manager/v1';\n\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { DefaultApi } from '@redhat-cloud-services/config-manager-client';\n\nexport * from './inventory';\n\nexport const configApi = new DefaultApi(\n  undefined,\n  CONNECTOR_API_BASE,\n  instance\n);\n\nexport const updateCurrState = ({\n  useOpenSCAP,\n  enableCloudConnector,\n  hasInsights,\n}) => {\n  return configApi.updateStates({\n    compliance_openscap: useOpenSCAP ? 'enabled' : 'disabled',\n    insights:\n      useOpenSCAP || enableCloudConnector || hasInsights\n        ? 'enabled'\n        : 'disabled',\n    remediations: enableCloudConnector ? 'enabled' : 'disabled',\n  });\n};\n","// Current state actions\nexport const GET_CURR_STATE = 'GET_CURR_STATE';\nexport const SET_CURR_STATE = 'SET_CURR_STATE';\n\n// Log view actions\nexport const GET_LOG = 'GET_LOG';\n\n// Connected hosts\nexport const GET_CONNECTED_HOSTS = 'GET_CONNECTED_HOSTS';\n","import { configApi, updateCurrState, getConnectedHosts } from '../api';\nimport {\n  GET_CURR_STATE,\n  GET_LOG,\n  SET_CURR_STATE,\n  GET_CONNECTED_HOSTS,\n} from './actionTypes';\n\nexport const fetchCurrState = () => ({\n  type: GET_CURR_STATE,\n  payload: configApi.getCurrentState(),\n});\n\nexport const saveCurrState = (data) => ({\n  type: SET_CURR_STATE,\n  payload: updateCurrState(data),\n});\n\nexport const fetchLog = ({ perPage = 50, page = 1 } = {}) => ({\n  type: GET_LOG,\n  payload: configApi.getStates(perPage, (page - 1) * perPage),\n});\n\nexport const fetchConnectedHosts = () => ({\n  type: GET_CONNECTED_HOSTS,\n  payload: getConnectedHosts(),\n});\n","import React from 'react';\nimport {\n  Stack,\n  StackItem,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nconst columns = [\n  { title: 'Service' },\n  {\n    title: 'State',\n  },\n];\n\nconst rowMapper = {\n  useOpenSCAP: 'Use OpenSCAP for Compliance policies',\n  enableCloudConnector:\n    'Enable Cloud Connector to fix issues directly from Insights',\n};\n\nconst LogNestedTable = ({ services, isInsights }) => {\n  return (\n    <Stack>\n      <StackItem>\n        <TextContent>\n          <Text component={TextVariants.h3}>State pushed to systems</Text>\n        </TextContent>\n      </StackItem>\n      <Table\n        aria-label=\"Active services Table\"\n        className=\"sed-c-services__table\"\n        cells={columns}\n        rows={[\n          {\n            noPadding: true,\n            cells: [\n              'Connected to Red Hat Insighsts',\n              isInsights ? 'on' : 'off',\n            ],\n          },\n          ...Object.entries(services).map(([key, value]) => [\n            rowMapper[key],\n            value === 'enabled' ? 'on' : 'off',\n          ]),\n        ]}\n        variant=\"compact\"\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nLogNestedTable.propTypes = {\n  services: PropTypes.shape({\n    useOpenSCAP: PropTypes.bool,\n    enableCloudConnector: PropTypes.bool,\n  }).isRequired,\n  isInsights: PropTypes.bool.isRequired,\n};\n\nexport default LogNestedTable;\n","import React, { Fragment, useEffect, useState, useCallback } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n  expandable,\n  cellWidth,\n} from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport {\n  Modal,\n  Pagination,\n  Skeleton,\n  PaginationVariant,\n  Button,\n} from '@patternfly/react-core';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { fetchLog } from '../../store/actions';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport flatMap from 'lodash/flatMap';\nimport LogNestedTable from './LogNestedtable';\nimport { downloadFile } from '../../utils/helpers';\nimport { configApi } from '../../api';\n\nconst columns = [\n  {\n    title: 'Initiated date/time',\n    cellFormatters: [expandable],\n  },\n  'Initiator',\n  {\n    title: 'Playbook',\n    transforms: [cellWidth(20)],\n  },\n];\n\nconst rowsMapper = (results, opened) =>\n  flatMap(\n    results.map(({ account, created_at: createdAt, id, state }, key) => [\n      {\n        id,\n        isOpen: opened.includes(id),\n        cells: [\n          <Fragment key=\"date\">\n            <DateFormat date={new Date(createdAt)} extraTitle=\"Created at: \" />\n          </Fragment>,\n          account,\n          <Fragment key={`download file-${id}`}>\n            <Button\n              variant=\"link\"\n              isInline\n              onClick={() => {\n                (async () => {\n                  const data = await configApi.getPlaybookById(id);\n                  downloadFile(data);\n                })();\n              }}\n            >\n              Download\n            </Button>\n          </Fragment>,\n        ],\n      },\n      {\n        parent: key * 2,\n        cells: [\n          <Fragment key=\"nested-table\">\n            <LogNestedTable\n              services={{\n                useOpenSCAP: state.compliance_openscap,\n                enableCloudConnector: state.remediations,\n              }}\n              isInsights={state.insights}\n            />\n          </Fragment>,\n        ],\n      },\n    ])\n  );\n\nconst ConnectLog = ({ isOpen = false, onClose }) => {\n  const [opened, setOpened] = useState([]);\n  const dispatch = useDispatch();\n  const logLoaded = useSelector(\n    ({ logReducer }) => logReducer?.loaded || false\n  );\n  const rows = useSelector(({ logReducer }) => logReducer?.results || []);\n  const pagination = useSelector(\n    ({ logReducer }) => ({\n      itemCount: logReducer?.total,\n      perPage: logReducer?.limit,\n      page:\n        Math.floor((logReducer?.offset || 0) / (logReducer?.limit || 0)) + 1,\n    }),\n    shallowEqual\n  );\n  useEffect(() => {\n    if (isOpen) {\n      dispatch(fetchLog());\n    }\n  }, [isOpen]);\n  const onCollapse = (_e, _key, isOpen, { id }) => {\n    setOpened(() =>\n      isOpen ? [...opened, id] : opened.filter((openId) => openId !== id)\n    );\n  };\n\n  const setPage = useCallback(\n    (_e, pageNumber) =>\n      dispatch(fetchLog({ page: pageNumber, perPage: pagination.perPage })),\n    [dispatch, pagination.perPage]\n  );\n\n  const setPerPage = useCallback(\n    (_e, perPage) => dispatch(fetchLog({ page: 1, perPage })),\n    [dispatch]\n  );\n\n  return (\n    <Modal\n      title=\"Red Hat connect log\"\n      variant=\"medium\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <PrimaryToolbar\n        pagination={\n          logLoaded ? (\n            {\n              ...pagination,\n              onSetPage: setPage,\n              onPerPageSelect: setPerPage,\n            }\n          ) : (\n            <Skeleton width=\"33%\" />\n          )\n        }\n      />\n      {logLoaded ? (\n        <Table\n          aria-label=\"Logs table\"\n          variant={TableVariant.compact}\n          rows={rowsMapper(rows, opened)}\n          cells={columns}\n          onCollapse={onCollapse}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      ) : (\n        <SkeletonTable colSize={3} rowSize={10} />\n      )}\n      <TableToolbar isFooter>\n        {logLoaded ? (\n          <Pagination\n            {...pagination}\n            variant={PaginationVariant.bottom}\n            onSetPage={setPage}\n            onPerPageSelect={setPerPage}\n          />\n        ) : (\n          <Skeleton width=\"33%\" />\n        )}\n      </TableToolbar>\n    </Modal>\n  );\n};\n\nConnectLog.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ConnectLog;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CURR_STATE, SET_CURR_STATE } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst currStatePending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst currStateFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  values: {\n    useOpenSCAP: payload?.state?.compliance_openscap === 'enabled',\n    enableCloudConnector: payload?.state?.remediations === 'enabled',\n    hasInsights: payload?.state?.insights === 'enabled',\n  },\n});\n\nexport default applyReducerHash(\n  {\n    [`${SET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_PENDING`]: currStatePending,\n    [`${GET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${SET_CURR_STATE}_FULFILLED`]: currStateFulfilled,\n    [`${GET_CURR_STATE}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_LOG } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  results: [],\n};\n\nconst logPending = (state) => ({\n  ...state,\n  loaded: false,\n});\nconst logFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  ...(payload || {}),\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_LOG}_PENDING`]: logPending,\n    [`${GET_LOG}_FULFILLED`]: logFulfilled,\n    [`${GET_LOG}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { GET_CONNECTED_HOSTS } from './actionTypes';\n\nconst initialState = {\n  loaded: false,\n  values: {},\n};\n\nconst connectedSystemsPending = (state) => ({\n  ...state,\n  loaded: false,\n});\n\nconst connectedSystemsFulfilled = (state, { payload }) => ({\n  ...state,\n  loaded: true,\n  hosts: payload?.results || [],\n  total: payload?.count || 0,\n  page: payload?.page || 0,\n  perPage: payload?.per_page || 0,\n});\n\nexport default applyReducerHash(\n  {\n    [`${GET_CONNECTED_HOSTS}_PENDING`]: connectedSystemsPending,\n    [`${GET_CONNECTED_HOSTS}_FULFILLED`]: connectedSystemsFulfilled,\n    [`${GET_CONNECTED_HOSTS}_ERROR`]: () => ({ error: true }),\n  },\n  initialState\n);\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n  Button,\n  Divider,\n  Flex,\n  Level,\n  LevelItem,\n  Popover,\n  Stack,\n  StackItem,\n  Text,\n  Title,\n  Spinner,\n  Bullseye,\n  Skeleton,\n} from '@patternfly/react-core';\nimport {\n  OutlinedQuestionCircleIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport './dashboard.scss';\nimport SampleTabRoute from './SampleTabRoute';\nimport ConfirmChangesModal from '../../Components/ConfirmChangesModal';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ConnectLog from '../../Components/ConnectLog';\nimport activeStateReducer from '../../store/currStateReducer';\nimport logReducer from '../../store/logReducer';\nimport connectedSystemsReducer from '../../store/connectedSystems';\nimport {\n  fetchCurrState,\n  saveCurrState,\n  fetchConnectedHosts,\n} from '../../store/actions';\n\nconst SamplePage = () => {\n  const [confirmChangesOpen, setConfirmChangesOpen] = useState(false);\n  const [logsOpen, setLogsOpen] = useState(false);\n  const [madeChanges, setMadeChanges] = useState(false);\n  const dataRef = useRef();\n  const activeStateLoaded = useSelector(\n    ({ activeStateReducer }) => activeStateReducer?.loaded\n  );\n  const { useOpenSCAP, enableCloudConnector, hasInsights } = useSelector(\n    ({ activeStateReducer }) => ({\n      useOpenSCAP: activeStateReducer?.values?.useOpenSCAP,\n      enableCloudConnector: activeStateReducer?.values?.enableCloudConnector,\n      hasInsights: activeStateReducer?.values?.hasInsights,\n    }),\n    shallowEqual\n  );\n  const { systemsLoaded, systemsCount } = useSelector(\n    ({ connectedSystemsReducer }) => ({\n      systemsLoaded: connectedSystemsReducer?.loaded,\n      systemsCount: connectedSystemsReducer?.total,\n    }),\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    insights?.chrome?.appAction?.('cloud-connector-dashboard');\n    getRegistry().register({\n      activeStateReducer,\n      logReducer,\n      connectedSystemsReducer,\n    });\n    dispatch(fetchCurrState());\n    dispatch(fetchConnectedHosts());\n  }, []);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle\n          title={\n            <div className=\"dashboard__header\">\n              Red Hat Connect Dashboard&nbsp;\n              <Popover\n                aria-label=\"connected-dashboard-description\"\n                headerContent={<div>Desc header</div>}\n                bodyContent={<p>Popover description</p>}\n                position=\"bottom\"\n              >\n                <Button variant=\"plain\" className=\"pf-u-p-xs\">\n                  <OutlinedQuestionCircleIcon color=\"grey\" />\n                </Button>\n              </Popover>\n            </div>\n          }\n        />\n      </PageHeader>\n      <Main>\n        <div className=\"dashboard__content\">\n          <Stack className=\"pf-u-p-md\">\n            <StackItem>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h3\" size=\"md\">\n                    RHEL 8 systems connected\n                  </Title>\n                  <Flex\n                    alignContent={{ default: 'alignContentCenter' }}\n                    alignItems={{ default: 'alignItemsCenter' }}\n                  >\n                    {systemsLoaded ? (\n                      <Title headingLevel=\"h3\" size=\"2xl\">\n                        {systemsCount}\n                      </Title>\n                    ) : (\n                      <Skeleton width=\"33%\" />\n                    )}\n\n                    {!activeStateLoaded &&\n                      useOpenSCAP !== undefined &&\n                      enableCloudConnector !== undefined && (\n                        <Text\n                          className=\"dashboard__in-progress-text\"\n                          component=\"small\"\n                        >\n                          <InProgressIcon />\n                          &nbsp;Changes being applied\n                        </Text>\n                      )}\n                  </Flex>\n                  <a href=\"./insights/registration\">\n                    Connect RHEL 6 and 7 systems\n                  </a>\n                </LevelItem>\n                <LevelItem>\n                  <Button\n                    ouiaId=\"primary-save-button\"\n                    isDisabled={!systemsLoaded || !madeChanges}\n                    onClick={() => setConfirmChangesOpen(true)}\n                  >\n                    Save changes\n                  </Button>\n                  <Button onClick={() => setLogsOpen(true)} variant=\"link\">\n                    View log\n                  </Button>\n                </LevelItem>\n              </Level>\n            </StackItem>\n          </Stack>\n          <Divider />\n          {activeStateLoaded ||\n          (useOpenSCAP !== undefined && enableCloudConnector !== undefined) ? (\n            <SampleTabRoute\n              setMadeChanges={setMadeChanges}\n              defaults={{\n                useOpenSCAP,\n                enableCloudConnector,\n                hasInsights,\n              }}\n              onChange={(data) => {\n                dataRef.current = data;\n              }}\n            />\n          ) : (\n            <Bullseye>\n              <Spinner size=\"xl\" />\n            </Bullseye>\n          )}\n        </div>\n      </Main>\n      <ConfirmChangesModal\n        isOpen={confirmChangesOpen}\n        handleCancel={() => setConfirmChangesOpen(false)}\n        systemsCount={systemsCount}\n        handleConfirm={() => {\n          setConfirmChangesOpen(false);\n          (async () => {\n            const saveAction = saveCurrState(dataRef.current);\n            dispatch(saveAction);\n            await saveAction.payload;\n            dispatch(\n              addNotification({\n                variant: 'success',\n                title: 'Changes saved',\n                description:\n                  'Your service enablement changes were applied to connected systems',\n              })\n            );\n            setMadeChanges(false);\n          })();\n        }}\n      />\n      <ConnectLog isOpen={logsOpen} onClose={() => setLogsOpen(false)} />\n    </React.Fragment>\n  );\n};\n\nexport default SamplePage;\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst INVENTORY_BASE = '/api/inventory/v1';\n\nexport const getConnectedHosts = () =>\n  instance.get(\n    `${INVENTORY_BASE}/hosts?filter[system_profile][rhc_client_id]=not_nil&fields[system_profile]=rhc_client_id,rhc_config_state`\n  );\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./dashboard.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./dashboard.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}