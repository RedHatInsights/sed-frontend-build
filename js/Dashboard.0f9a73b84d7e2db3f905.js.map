{"version":3,"sources":["webpack://sed-frontend/./src/Routes/Dashboard/dashboard.scss","webpack://sed-frontend/./src/Routes/Dashboard/SampleTabRoute.js","webpack://sed-frontend/./src/Components/ConfirmChangesModal/index.js","webpack://sed-frontend/./src/Components/ConnectLog/LogNestedtable.js","webpack://sed-frontend/./src/Components/ConnectLog/index.js","webpack://sed-frontend/./src/Routes/Dashboard/index.js","webpack://sed-frontend/./src/Routes/Dashboard/dashboard.scss?8482"],"names":["___CSS_LOADER_EXPORT___","push","module","id","SampleTabRoute","setMadeChanges","useState","connectToInsights","setConnectToInsights","useOpenSCAP","setUseOpenSCAP","useAnalysis","setUseAnalysis","enableCloudConnector","setEnableCloudConnector","useEffect","getPopover","Popover","aria-label","headerContent","bodyContent","position","Button","ouiaId","variant","className","color","Stack","hasGutter","StackItem","Title","headingLevel","size","TextContent","Text","component","Switch","isChecked","onChange","label","Fragment","key","Badge","isRead","propTypes","ConfirmChangesModal","isOpen","handleCancel","handleConfirm","Modal","title","onClose","actions","type","onClick","href","PropTypes","columns","transforms","sortable","initialRows","DateFormat","date","Date","status","rows","sortBy","setRows","PrimaryToolbar","filterConfig","_e","value","console","log","pagination","Pagination","page","perPage","itemCount","Table","onSort","_event","index","direction","newRows","sort","a","b","SortByDirection","reverse","cells","TableHeader","TableBody","cellFormatters","expandable","parent","ConnectLog","TableVariant","onCollapse","event","rowKey","map","row","confirmChangesOpen","setConfirmChangesOpen","logsOpen","setLogsOpen","wasConfirmed","setWasConfirmed","madeChanges","dispatch","useDispatch","insights","chrome","appAction","listener","setTimeout","clearTimeout","PageHeader","PageHeaderTitle","Main","Level","LevelItem","Flex","alignContent","default","alignItems","isDisabled","Divider","addNotification","description","update","hot","invalidate","oldLocals","accept","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/Dashboard.0f9a73b84d7e2db3f905.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".connector .dashboard__content{min-height:100%;background-color:var(--pf-global--BackgroundColor--100)}.connector .dashboard__header{display:flex;align-items:end}.connector .dashboard__success-status{color:var(--pf-global--success-color--100)}.connector .dashboard__navtab-title{width:100%}.connector .dashboard__tabs-content{display:flex}.connector .dashboard__tabs-nav{flex-shrink:0}.connector .dashboard__in-progress-text{color:var(--pf-global--palette--blue-500)}.connector .dashboard__in-progress-text>svg{color:initial}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/Routes/Dashboard/dashboard.scss\"],\"names\":[],\"mappings\":\"AAAA,+BACoB,eAAe,CAAC,uDAAuD,CAD3F,8BAC+G,YAAY,CAAC,eAAe,CAD3I,sCACuK,0CAA0C,CADjN,oCAC2O,UAAU,CADrP,oCAC+Q,YAAY,CAD3R,gCACiT,aAAa,CAD9T,wCAC4V,yCAAyC,CADrY,4CACua,aAAa\",\"sourcesContent\":[\".connector{\\n.dashboard__content{min-height:100%;background-color:var(--pf-global--BackgroundColor--100)}.dashboard__header{display:flex;align-items:end}.dashboard__success-status{color:var(--pf-global--success-color--100)}.dashboard__navtab-title{width:100%}.dashboard__tabs-content{display:flex}.dashboard__tabs-nav{flex-shrink:0}.dashboard__in-progress-text{color:var(--pf-global--palette--blue-500)}.dashboard__in-progress-text>svg{color:initial}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  Badge,\n  Button,\n  Popover,\n  Stack,\n  StackItem,\n  Switch,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport '@patternfly/react-styles/css/components/Table/table.css';\n\nconst SampleTabRoute = ({ setMadeChanges }) => {\n  const defaults = {\n    connectToInsights: true,\n    useOpenSCAP: false,\n    useAnalysis: false,\n    enableCloudConnector: false,\n  };\n  const [connectToInsights, setConnectToInsights] = useState(\n    defaults.connectToInsights\n  );\n  const [useOpenSCAP, setUseOpenSCAP] = useState(defaults.useOpenSCAP);\n  const [useAnalysis, setUseAnalysis] = useState(defaults.useAnalysis);\n  const [enableCloudConnector, setEnableCloudConnector] = useState(\n    defaults.enableCloudConnector\n  );\n\n  useEffect(() => {\n    setMadeChanges(\n      connectToInsights != defaults.connectToInsights ||\n        useOpenSCAP != defaults.useOpenSCAP ||\n        useAnalysis != defaults.useAnalysis ||\n        enableCloudConnector != defaults.enableCloudConnector\n    );\n  }, [connectToInsights, useOpenSCAP, useAnalysis, enableCloudConnector]);\n\n  const getPopover = () => {\n    return (\n      <Popover\n        aria-label=\"connected-dashboard-description\"\n        headerContent={<div>Desc header</div>}\n        bodyContent={<p>Popover description</p>}\n        position=\"bottom\"\n      >\n        <Button\n          ouiaId=\"title-popover-button\"\n          variant=\"plain\"\n          className=\"pf-u-p-xs\"\n        >\n          <OutlinedQuestionCircleIcon color=\"grey\" />\n        </Button>\n      </Popover>\n    );\n  };\n\n  return (\n    <Stack hasGutter className=\"pf-u-p-md\">\n      <StackItem>\n        <Title headingLevel=\"h2\" size=\"2xl\">\n          Red Hat Insights\n        </Title>\n        <TextContent className=\"pf-u-mt-md\">\n          <Text component=\"p\">\n            Red Hat Insights is a proactive operational efficiency and security\n            risk management solution in Red Hat Enterprise Linux (RHEL)\n            subscriptions for versions 6.4 and higher, as well as public cloud\n            versions of RHEL. It helps identify, prioritize, and resolve risks\n            to security, compliance, performance, availability, and stability\n            before they become urgent issues. Insights also enables users to\n            monitor for adherence to internal policies and understand\n            configuration changes over time.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Title headingLevel=\"h3\" size=\"xl\">\n          Settings\n        </Title>\n        <Stack hasGutter className=\"pf-u-mt-lg\">\n          <StackItem>\n            <Switch\n              id=\"connect-to-insights\"\n              ouiaId=\"connect-to-insights\"\n              aria-label=\"Connect to Red Hat Insights\"\n              isChecked={connectToInsights}\n              onChange={() => setConnectToInsights(!connectToInsights)}\n              label={\n                <Fragment>\n                  <Title headingLevel=\"h4\" size=\"md\">\n                    Connect to Red Hat Insights\n                  </Title>\n                  <TextContent>\n                    <Text component=\"small\">\n                      Required to use Insights applications. Enables Advisor,\n                      Drift, Patch, Vulnerability and Policies applications.\n                    </Text>\n                  </TextContent>\n                </Fragment>\n              }\n            />\n            <div className=\"pf-u-pl-3xl\">\n              <Stack>\n                <StackItem>\n                  <Switch\n                    className=\"pf-u-mt-md\"\n                    key=\"use-openscap\"\n                    id=\"use-openscap\"\n                    ouiaId=\"use-openscap\"\n                    aria-label=\"Use OpenSCAP for Compliance policies\"\n                    isChecked={useOpenSCAP}\n                    onChange={() => setUseOpenSCAP(!useOpenSCAP)}\n                    label={\n                      <Fragment>\n                        <Title headingLevel=\"h4\" size=\"md\">\n                          Use OpenSCAP for Compliance policies\n                          {getPopover()}\n                        </Title>\n                        <TextContent>\n                          <Text component=\"small\">\n                            Required to use Compliance application\n                          </Text>\n                        </TextContent>\n                      </Fragment>\n                    }\n                  />\n                </StackItem>\n                <StackItem>\n                  <Switch\n                    className=\"pf-u-mt-md\"\n                    key=\"use-resource-optimization\"\n                    id=\"use-resource-optimization\"\n                    ouiaId=\"use-resource-optimization\"\n                    aria-label=\"Use Resource Optimization analysis\"\n                    isChecked={useAnalysis}\n                    onChange={() => setUseAnalysis(!useAnalysis)}\n                    label={\n                      <Fragment>\n                        <Title headingLevel=\"h4\" size=\"md\">\n                          Use Resource Optimization analysis\n                          <Badge className=\"pf-u-ml-sm pf-u-mr-xs\" isRead>\n                            Beta\n                          </Badge>\n                          {getPopover()}\n                        </Title>\n                        <TextContent>\n                          <Text component=\"small\">\n                            Required to use Resource Optimization application\n                          </Text>\n                        </TextContent>\n                      </Fragment>\n                    }\n                  />\n                </StackItem>\n                <StackItem>\n                  <Switch\n                    className=\"pf-u-mt-md\"\n                    key=\"enable-cloud-connector\"\n                    id=\"enable-cloud-connector\"\n                    ouiaId=\"enable-cloud-connector\"\n                    aria-label=\"Enable Cloud Connector\"\n                    isChecked={enableCloudConnector}\n                    onChange={() =>\n                      setEnableCloudConnector(!enableCloudConnector)\n                    }\n                    label={\n                      <Fragment>\n                        <Title headingLevel=\"h4\" size=\"md\">\n                          Enable Cloud Connector to fix issues directly from\n                          Insights\n                          {getPopover()}\n                        </Title>\n                        <TextContent>\n                          <Text component=\"small\">\n                            Cloud Connector allows you to push Remediation\n                            Ansible Playbooks directly from Insights to your\n                            systems.\n                          </Text>\n                        </TextContent>\n                      </Fragment>\n                    }\n                  />\n                </StackItem>\n              </Stack>\n            </div>\n          </StackItem>\n        </Stack>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSampleTabRoute.propTypes = {\n  setMadeChanges: propTypes.func.isRequired,\n};\n\nexport default SampleTabRoute;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Text, TextContent } from '@patternfly/react-core';\n\nconst ConfirmChangesModal = ({\n  isOpen = false,\n  handleCancel,\n  handleConfirm,\n}) => {\n  return (\n    <Modal\n      variant=\"small\"\n      title=\"Confirm changes\"\n      isOpen={isOpen}\n      onClose={handleCancel}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"button\"\n          onClick={handleConfirm}\n        >\n          Confirm changes\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text component=\"p\">\n          Your changes applies to <b>1032 connected systems</b>. Selected\n          settings will also be applied to <b>all future systems</b> that are\n          connect through Red Hat Connect (rhc).\n        </Text>\n        <Text component=\"p\" className=\"pf-u-mb-sm\">\n          Upon confirmation, an Ansible Playbook will be pushed to 1032 systems\n          to apply changes.\n        </Text>\n      </TextContent>\n      <a href=\"#\">View playbook</a>\n    </Modal>\n  );\n};\n\nConfirmChangesModal.propTypes = {\n  isOpen: PropTypes.bool,\n  handleConfirm: PropTypes.func.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n};\n\nexport default ConfirmChangesModal;\n","import React, { Fragment, useState } from 'react';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Pagination } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n} from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nconst columns = [\n  { title: 'System', transforms: [sortable] },\n  {\n    title: 'Last attempt date/time',\n    transforms: [sortable],\n  },\n  { title: 'Status', transforms: [sortable] },\n  '',\n];\n\nconst initialRows = [\n  [\n    'ipareplica8.example.lab',\n    <Fragment key=\"date\">\n      <DateFormat date={new Date()} type=\"exact\" />\n    </Fragment>,\n    <Fragment key={status}>\n      <div>\n        <CheckCircleIcon color=\"green\" />\n        &nbsp; Success\n      </div>\n    </Fragment>,\n    <Fragment key=\"download\">\n      <a href=\"#\">Download log</a>\n    </Fragment>,\n  ],\n  [\n    'r720.valleedelisle.nat',\n    <Fragment key=\"date\">\n      <DateFormat date={new Date()} type=\"exact\" />\n    </Fragment>,\n    <Fragment key={status}>\n      <div>\n        <ExclamationCircleIcon color=\"red\" />\n        &nbsp; Failure - Retried x23\n      </div>\n    </Fragment>,\n    <Fragment key=\"download\">\n      <a href=\"#\">Download log</a>\n    </Fragment>,\n  ],\n];\n\nconst LogNestedTable = () => {\n  const [{ rows, sortBy }, setRows] = useState({\n    rows: initialRows,\n    sortBy: {},\n  });\n  const onSort = (_event, index, direction) => {\n    setRows(({ rows }) => {\n      const newRows = rows.sort((a, b) =>\n        a[index] < b[index] ? -1 : a[index] > b[index] ? 1 : 0\n      );\n      return {\n        sortBy: {\n          index,\n          direction,\n        },\n        rows: direction === SortByDirection.asc ? newRows : newRows.reverse(),\n      };\n    });\n  };\n\n  return (\n    <div>\n      <PrimaryToolbar\n        filterConfig={{\n          onChange: (_e, value) => console.log({ value }),\n          value: 'text',\n        }}\n        pagination={<Pagination page={1} perPage={20} itemCount={7} />}\n      />\n      <Table\n        aria-label=\"Sortable Table\"\n        sortBy={sortBy}\n        onSort={onSort}\n        cells={columns}\n        rows={rows}\n        variant=\"compact\"\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </div>\n  );\n};\n\nexport default LogNestedTable;\n","import React, { Fragment, useState } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n  expandable,\n} from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport { Modal } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport LogNestedTable from './LogNestedtable';\n\nconst columns = [\n  {\n    title: 'Initiated date/time',\n    cellFormatters: [expandable],\n  },\n  'Initiator',\n  'Status',\n  'Playbook',\n];\n\nconst initialRows = [\n  {\n    isOpen: false,\n    cells: [\n      <Fragment key=\"date\">\n        <DateFormat date={new Date()} type=\"exact\" />\n      </Fragment>,\n      'John Doe',\n      <Fragment key=\"status\">\n        <div>\n          <InProgressIcon />\n          &nbsp; In progress\n        </div>\n      </Fragment>,\n      <Fragment key=\"download\">\n        <a href=\"#\">Download</a>\n      </Fragment>,\n    ],\n  },\n  {\n    parent: 0,\n    cells: [\n      <Fragment key=\"nested-table\">\n        <LogNestedTable />\n      </Fragment>,\n    ],\n  },\n  {\n    isOpen: false,\n    cells: [\n      <Fragment key=\"date\">\n        <DateFormat date={new Date()} type=\"exact\" />\n      </Fragment>,\n      'John Doe',\n      <Fragment key=\"status\">\n        <div>\n          <InProgressIcon />\n          &nbsp; In progress\n        </div>\n      </Fragment>,\n      <Fragment key=\"download\">\n        <a href=\"#\">Download</a>\n      </Fragment>,\n    ],\n  },\n  {\n    parent: 2,\n    cells: [\n      <Fragment key=\"nested-table\">\n        <LogNestedTable />\n      </Fragment>,\n    ],\n  },\n  {\n    isOpen: false,\n    cells: [\n      <Fragment key=\"date\">\n        <DateFormat date={new Date()} type=\"exact\" />\n      </Fragment>,\n      'John Doe',\n      <Fragment key=\"status\">\n        <div>\n          <InProgressIcon />\n          &nbsp; In progress\n        </div>\n      </Fragment>,\n      <Fragment key=\"download\">\n        <a href=\"#\">Download</a>\n      </Fragment>,\n    ],\n  },\n  {\n    parent: 4,\n    cells: [\n      <Fragment key=\"nested-table\">\n        <LogNestedTable />\n      </Fragment>,\n    ],\n  },\n];\n\nconst ConnectLog = ({ isOpen = false, onClose }) => {\n  const [rows, setRows] = useState(initialRows);\n  const onCollapse = (event, rowKey, isOpen) => {\n    setRows((rows) =>\n      rows.map((row, index) => (index === rowKey ? { ...row, isOpen } : row))\n    );\n  };\n\n  return (\n    <Modal\n      title=\"Red Hat connect log\"\n      variant=\"large\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <Table\n        aria-label=\"Logs table\"\n        variant={TableVariant.compact}\n        onCollapse={onCollapse}\n        rows={rows}\n        cells={columns}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Modal>\n  );\n};\n\nConnectLog.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ConnectLog;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Divider,\n  Flex,\n  Level,\n  LevelItem,\n  Popover,\n  Stack,\n  StackItem,\n  Text,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  OutlinedQuestionCircleIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport './dashboard.scss';\nimport SampleTabRoute from './SampleTabRoute';\nimport ConfirmChangesModal from '../../Components/ConfirmChangesModal';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ConnectLog from '../../Components/ConnectLog';\n\nconst SamplePage = () => {\n  const [confirmChangesOpen, setConfirmChangesOpen] = useState(false);\n  const [logsOpen, setLogsOpen] = useState(false);\n  const [wasConfirmed, setWasConfirmed] = useState(false);\n  const [madeChanges, setMadeChanges] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    insights?.chrome?.appAction?.('sample-page');\n  }, []);\n  useEffect(() => {\n    let listener;\n    if (wasConfirmed) {\n      listener = setTimeout(() => {\n        setWasConfirmed(false);\n      }, 5000);\n    }\n    return () => {\n      clearTimeout(listener);\n    };\n  }, [wasConfirmed]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle\n          title={\n            <div className=\"dashboard__header\">\n              Red Hat Connect Dashboard&nbsp;\n              <Popover\n                aria-label=\"connected-dashboard-description\"\n                headerContent={<div>Desc header</div>}\n                bodyContent={<p>Popover description</p>}\n                position=\"bottom\"\n              >\n                <Button variant=\"plain\" className=\"pf-u-p-xs\">\n                  <OutlinedQuestionCircleIcon color=\"grey\" />\n                </Button>\n              </Popover>\n            </div>\n          }\n        />\n      </PageHeader>\n      <Main>\n        <div className=\"dashboard__content\">\n          <Stack className=\"pf-u-p-md\">\n            <StackItem>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h3\" size=\"md\">\n                    RHEL 8 systems connected\n                  </Title>\n                  <Flex\n                    alignContent={{ default: 'alignContentCenter' }}\n                    alignItems={{ default: 'alignItemsCenter' }}\n                  >\n                    <Title headingLevel=\"h3\" size=\"2xl\">\n                      1032\n                    </Title>\n                    {wasConfirmed && (\n                      <Text\n                        className=\"dashboard__in-progress-text\"\n                        component=\"small\"\n                      >\n                        <InProgressIcon />\n                        &nbsp;Changes being applied\n                      </Text>\n                    )}\n                  </Flex>\n                  <a href=\"#\">Connect RHEL 6 and 7 systems</a>\n                </LevelItem>\n                <LevelItem>\n                  <Button\n                    ouiaId=\"primary-save-button\"\n                    isDisabled={!madeChanges}\n                    onClick={() => setConfirmChangesOpen(true)}\n                  >\n                    Save changes\n                  </Button>\n                  <Button onClick={() => setLogsOpen(true)} variant=\"link\">\n                    View log\n                  </Button>\n                </LevelItem>\n              </Level>\n            </StackItem>\n          </Stack>\n          <Divider />\n          <SampleTabRoute setMadeChanges={setMadeChanges} />\n        </div>\n      </Main>\n      <ConfirmChangesModal\n        isOpen={confirmChangesOpen}\n        handleCancel={() => setConfirmChangesOpen(false)}\n        handleConfirm={() => {\n          setWasConfirmed(true);\n          setConfirmChangesOpen(false);\n          dispatch(\n            addNotification({\n              variant: 'success',\n              title: 'Changes saved',\n              description:\n                'Your service enablement changes are being applied to connected systems',\n            })\n          );\n        }}\n      />\n      <ConnectLog isOpen={logsOpen} onClose={() => setLogsOpen(false)} />\n    </React.Fragment>\n  );\n};\n\nexport default SamplePage;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./dashboard.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./dashboard.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}